(                        <12/ 4/85>140)                                                                                                                                   FORTH SOURCE CODE                                                                  AS PILE] [COMPILE] [FROM:NEWFORTH]    NF;                                  DECIMAL  -->                                                                                                   ( bobp ) 13:35)                                                                    JMP-TO  START-ADDR DELTA + 08 + !NEW                                          DECIMAL  -->                                                                                                                                                                    NF: \ [COMPILE] \ NF;                                                           NF: GAP 0 , NF;                                                                 NF: LITERAL [COMPILE] LITERAL NF;                                               NF: [COMR CLD, 6C # LDA, W 1 -    STA, 01 # LDY,                          BEGIN, AAAA ,Y LDA, IP ,Y STA, DEY, 0<  UNTIL, BBBB JMP,                                                              LABEL JMP-TO 0 , MOVEWORD?                                              TREAM                      THEN R> DROP NF;                                                             80C0 'NF X NFA !                                                                NF: ( [COMPILE] ( NF;                                                   ( START-ADDR <I.C. STACKS<12/16/85>143) HEX                                     SETNEW ( INITIALIZE POINTERS )                                                  ASSEMBLER MEM                                                                   LABEL  START-ADD( NF: WORDS AT BEG. SORC <12/17/85>141) HEX                                                                             6 ' WIDTH ! FORGET-SYS                                                          NF: X BLK @                                IF STATE @ ?S                                NF: --> ?LOADING 0 >IN ! 1 BLK +!          BLK @ DUP SCR ! . NF;                 -->                                                                   ( 13:33)                                                                                                                                                                                                                                                        ( bobp )                                                                                                                 NF: ASSEMBLER [COMPILE] ASSEMBLER          ASSEMBLER MEM NF;                                                            NF: ABORT"  *<ABORT">* , 34 WORD           C@ 1+ ALLOT NF;                                                                                            FRED HAER                                                                                                                                                                                                                                                         NF: 'NEW 'NF CFANEW 2+ [COMPILE]           LITERAL NF;                                                                  NF: DOES>  *<;CODE>* , 32 C,                       *DODOES* , NF;       MODIFIED                                                                         BY                                                                           BOB PYRON                                                                          AND            ( NF: WORDS              < 2/17/85>142) NF:  ;CODE  *<;CODE>* , HERERUN            [COMPILE] ASSEMBLER ASSEMBLER MEM       -2 CSP +! [COMPILE] [ NF;                                                    NF: ."  *<.">* , 34 WORD C@ 1+             ALLOT NF;                                                                                                                                                                                           ( bobp )                                                                 ( EXIT [SETUP] LIT       <12/21/85>144) LABEL SETUP .A ASL, N 1 - STA,            BEGIN, BOT LDA, N ,Y STA, INX, INY,      N 1 - CPY, 0=                          UNTIL, 00 # LDY, RTS,                                                         CODE LIT  IP )Y                                 'NEW RP!  ASSEMBLER START-ADDR               FORTH 11 ( HEX) + DELTA +  !NEW                                            DECIMAL -->                    ( bobp )                                                                              THEN, 0<                                IF,                                LABEL LBR:                                   0 # LDY, XSAVE LDX, BR: JMP,            THEN,                                THEN,                                 LABEL LX          NEXT JMP, C;                                                                  CODE SP!  SP00 LDX, NEXT JMP, C;                                                CODE RP!  XSAVE STX, RP00 LDX, TXS,       XSAVE LDX, NEXT JMP, C;                                                 THEN, 50 NOT ( OV NOT )                 IF,                                   LABEL L+:  SEC, RP) LDA, RP) 2+ SBC,       RP) 1+ LDA, RP) 3 + SBC,             LABEL L+/-:   50                             IF, 80 # EOR,              BOT STA,                  SP00 #HI LDA, BOT 1+ STA,               NEXT JMP, C;                                                                  CODE R0  DEX, DEX,                        RP00 #LO LDA, BOT STA,                  RP00 #HI LDA, BOT 1+ STA,     ( <LOOP>                 < 2/17/85>147)                                         HEX                                     CODE <LOOP> XSAVE STX, TSX, RP) INC, 0=   IF, RP) 1+ LDA, CLC, 1 # ADC,            RP) 1+ STA,                            ELSE, CLV,    ( SP0 R0 SP! RP!         <12/16/85>145) HEX                                     LABEL SP00 00D0 ,                       LABEL RP00 01FF , MOVEWORD?                                                     CODE SP0  DEX, DEX,                       SP00 #LO LDA, TH -02 BYTE:IN BRANCH  !NEW     DECIMAL -->                                                                                                                                            ( bobp )                                                                 IT> C;                                                                   'NEW EXIT -2 BYTE:IN <EXIT> !NEW        'NEW LIT 2- ' NF*LIT* !                -->                            (  PAI )                                                                 JMP,      THEN,                                 LABEL BUMP: CLC, IP LDA, 2 # ADC,         IP STA, CS IF, IP 1+ INC, THEN,         NEXT JMP, C;                                                                    ASSEMBLER BR:                              FORC,        IP LDA, 2 # ADC, IP STA, CS             IF, IP 1+ INC, THEN, W 1 - JMP, C;                                            CODE EXIT  PLA, IP STA,                   PLA, IP 1+ STA, NEXT JMP, C;                                                  CODE <EX                        CODE 0BRANCH INX, INX, FE ,X LDA, FF      ,X ORA, 0=                              IF,                                   LABEL BR: CLC, IP )Y LDA, IP ADC,          PHA, INY, IP )Y LDA, IP 1+ ADC, IP      1+ STA, PLA, IP STA, NEXT 2+ LDA, PHA, IP INC, 0=      IF, IP 1+ INC, THEN, IP )Y LDA,         IP INC, 0= IF, IP 1+ INC, THEN,        LABEL PUSH DEX, DEX,                    LABEL PUT BOT 1+ STA, PLA, BOT STA,     LABEL NEXT 1 # LDY, IP )Y LDA, W 1+      STA, DEY, IP )Y LDA, W STA, CL( EXECUTE BRANCH 0BRANCH <12/16/85>146) HEX                                     CODE EXECUTE BOT LDA, W STA, BOT 1+       LDA, W 1+ STA, INX, INX, W 1 - JMP, C;                                        CODE BRANCH C;                                          T: INX, INX, INX, INX, TXS,        XSAVE LDX, BUMP: JMP, C;                                                                                             DECIMAL -->                    ( 13:33)                                                                 ( <+LOOP> LEAVE          < 1/31/85>148)                                         HEX                                     CODE <+LOOP>  CLC, BOT 1+ LDY, BOT LDA,    INX, INX, XSAVE STX, TSX, RP) ADC,      RP) STA, TYA, RP) 1+ ADC, RP) 1+ STA,   50 NOT        LXT: JMP, C;                                                           DECIMAL -->                                                                                                    ( 13:33)                                                                         CODE RP@  XSAVE STX, TSX, TXA,            XSAVE LDX, DEX, DEX, BOT STA, BOT INC,  RP00 1+ LDA, BOT 1+ STA, NEXT JMP, C;                                         'NEW I  -02 BYTE:IN R@  !NEW            -->                                                        ELSE, CS NOT                               IF, SEC, RP) LDA, RP) 2+ SBC,            RP) 1+ LDA, RP) 3 + SBC, CS NOT           IF, LBR: JMP,                           THEN,                                THEN,                                THEN,                        CODE >R  BOT 1+ LDA, PHA, BOT LDA, PHA,   INX, INX, NEXT JMP, C;                                                        CODE SP@  TXA,                           LABEL PUSH0A PHA, 0 # LDA, PUSH JMP, C;                                                           IF, CS                                     IF, SEC, RP) 2+ LDA, RP) SBC,            RP) 3 + LDA, RP) 1+ SBC, CS NOT           IF, LBR: JMP,                           THEN,                                THEN,                     ( R@ R> >R SP@ RP@       <12/16/85>151)                                         CODE R@ C;                                                                      CODE R>  DEX, DEX, PLA, BOT STA, PLA,     BOT 1+ STA, NEXT JMP, C;                              ( </LOOP>                < 1/31/85>149)                                         HEX                                     CODE </LOOP>  CLC, BOT 1+ LDY, BOT LDA,    INX, INX, XSAVE STX, TSX, RP) ADC,      RP) STA, TYA, RP) 1+ ADC, RP) 1+ STA,   TYA, 0<                                                                                                                                                                                             ( 13:33)                                                                                                 -->                                                                                                                                                                                                                                     CODE J  XSAVE STX, TSX, RP) 4 + LDA,      PHA, RP) 5 + LDA, XSAVE LDX,            PUSH JMP, C;                          -->                                                                                                                                                                                                                     CODE LEAVE  XSAVE STX, TSX, RP) LDA,      RP) 2+ STA, RP) 1+ LDA, RP) 3 + STA,    XSAVE LDX, NEXT JMP, C;                                                       DECIMAL                         CODE I  XSAVE STX, TSX, RP) LDA, PHA,     RP) 1+ LDA, XSAVE LDX, PUSH JMP, C;                                           CODE I' XSAVE STX, TSX, RP) 2+ LDA, PHA,  RP) 3 + LDA, XSAVE LDX, PUSH JMP, C;                                                            IF, TYA, 0<                                IF, SEC, RP) 2+ LDA, RP) SBC,            RP) 3 + LDA, RP) 1+ SBC,                L+/-: JMP,                             THEN, L+: JMP,                       THEN, LXT: JMP, C;            ( <DO> I I' J            < 1/31/85>150)                                         CODE <DO> SEC 1+ LDA, PHA, SEC LDA,       PHA, BOT 1+ LDA, PHA, BOT LDA, PHA,   LABEL POPTWO INX, INX,                  LABEL POP INX, INX, NEXT JMP, C;                                                                                                                                                                                                               ( bobp )                                                                 ( AND XOR OR             <12/16/85>152)                                         CODE AND                                  BOT LDA, SEC AND, PHA,                  BOT 1+ LDA, SEC 1+ AND, INX, INX,       PUT JMP, C;                                                                                                                                                                                                                                  ( 13:33)                                                                           UNTIL, INX, INX, PUT JMP, C;                                                  CODE PICK  P&R JSR, PHA, BOT 1+ LDA,      XSAVE LDX, PUT JMP, C;                                                        DECIMAL -->                                     ,         BOT FF + STA, DEX, DEX, NEXT JMP, C;  DECIMAL -->                                                                                                                                                                                                      JSR, XSAVE CPX, 0< NOT   IF, DROP 0=                              IF, DROP SWAP 2                         THEN, XSAVE LDX, POP JMP,               2 THEN, PHA, BOT 1+ LDA,               BEGIN, BOT FF + LDY, BOT 1+ STY, DEX,    XSAVE CPX, 0=                                        CODE DUP BOT LDA, PHA, BOT 1+ LDA,        PUSH JMP, C;                                                                  CODE ?DUP BOT LDA, BOT FE + STA,          BOT 1+ ORA, 0=                          IF, NEXT JMP, THEN, BOT 1+ LDA( ROLL PICK              < 1/31/85>155) HEX                                     LABEL P&R XSAVE STX, BOT LDA, .A ASL,     XSAVE ADC, TAX, BOT LDA, RTS,                                                 CODE ROLL                                LABEL ROLL: P&R( OVER DROP ?DUP DUP     < 1/31/85>153) HEX                                     CODE OVER SEC LDA, PHA, SEC 1+ LDA,       PUSH JMP, C;                                                                  CODE DROP POP HERE 2 - ! C;                                                                                                                                                                                                                    ( 13:33)                                                                                                                                                                                                                                                        ( bobp )                                                                                                                                                                                                                                                                                                                                           BOT LDA, SEC ORA, PHA,                  BOT 1+ LDA, SEC 1+ ORA, INX, INX,       PUT JMP, C;                                                                   -->                                                                                     O HERE 2 - ! C;                                                 CODE DDUP  03 # LDY,                      BEGIN, DEX, BOT 4 + LDA, BOT STA,        DEY, 0<                                UNTIL, NEXT JMP, C;                   -->                                                     CODE XOR                                  BOT LDA, SEC EOR, PHA,                  BOT 1+ LDA, SEC 1+ EOR, INX, INX,       PUT JMP, C;                                                                   CODE OR                         ( SWAP ROT DDROP DDUP    < 1/31/85>154)                                         CODE SWAP SEC LDA, PHA, BOT LDA,          SEC STA, SEC 1+ LDA, BOT 1+ LDY,        SEC 1+ STY, PUT JMP, C;                                                       CODE DDROP POPTW                                                                                                                                                                                       ( 13:33)                                                                 ( ROT @ C@ !             < 1/31/85>156)                                         CODE ROT DEX, BOT STY, DEX, 03 # LDA,     BOT STA, ROLL: JMP, C;                                                        CODE @ BOT X) LDA, PHA, BOT INC, 0=       IF, BOT 1+ INC LDA, BOT 1+ SBC, SEC 1+ STA,     INX, INX, NEXT JMP, C;                 -->                                                                                                           ( 13:33)                                                                          'NEW NOT  -02 BYTE:IN 0=  !NEW                                                 CODE =  SEC, SEC LDA, BOT SBC, BOT STA,   SEC 1+ LDA, SEC 1+ STY, BOT 1+ SBC,     BOT ORA, 0= IF, INY, THEN, SEC STY,     POP JMP, C;                                                                                   CODE + CLC, BOT LDA, SEC ADC, SEC STA,    BOT 1+ LDA, SEC 1+ ADC, SEC 1+ STA,     INX, INX, NEXT JMP, C;                                                        CODE -  SEC, SEC LDA, BOT SBC, SEC STA,   SEC 1+                        CODE NOT BOT LDA, BOT 1+ ORA, BOT 1+      STY, 0=                                 IF, INY, THEN, BOT STY, NEXT JMP, C;                                          CODE 0= C;                                                              T INC, 0=                 IF, BOT 1+ INC,                         THEN, BOT X) LDA, SEC 1+ ADC,           BOT X) STA, POPTWO JMP, C;                                                    CODE +C!  CLC, BOT X) LDA, SEC ADC,       BOT X) STA, POPTWO JMP, C;    ( NEGATE NOT 0= =        <12/21/85>159)                                         CODE NEGATE SEC,                        LABEL NEG: TYA, BOT SBC, BOT STA,         TYA, BOT 1+ SBC, BOT 1+ STA,            NEXT JMP, C;                                          ( C! +! +C! + -          < 1/31/85>157)                                         CODE C! SEC LDA, BOT X) STA, POPTWO JMP,  C;                                                                            CODE +! CLC, BOT X) LDA, SEC ADC,         BOT X) STA, BOBOT 1+ STY, NEXT JMP, C;        DECIMAL -->                                                                                                                                            ( 13:33)                                                                                                                                                                                                                                                        ( 13:33)                                                                           BOT 1+ LDA, SEC 1+ SBC, <>: JMP, C;                                           CODE 0>  BOT 1+ LDA, 0<                   IF, BOT STY,                            ELSE, BOT ORA, BOT STY, 0= NOT           IF, BOT INC, THEN,                     THEN, INC, 0=   IF, BOT 1+ INC, THEN, SEC 1+ LDA,       BOT X) STA, POPTWO JMP, C;                                                                                            -->                                                                                      LDA, BOT SBC,            SEC 1+ LDA, BOT 1+ SBC,               LABEL <>: SEC 1+ STY, 50                  IF, 80 # EOR, THEN, 0<                  IF, INY, THEN, SEC STY, POP JMP, C;                                           CODE >  SEC, BOT LDA, SEC SBC,  , THEN, BOT X) LDA,       PUT JMP, C;                                                                   CODE C@ BOT X) LDA, BOT STA, BOT 1+       STY, NEXT JMP, C;                                                             CODE ! SEC LDA, BOT X) STA, BOT ( 0< < > 0>              < 1/31/85>158) HEX                                                                             CODE 0< BOT 1+ ASL, TYA, .A ROL,          BOT 1+ STY, BOT STA, NEXT JMP, C;                                             CODE <  SEC, SEC                                -->                                                                                                                                                    (  PAI )                                                                 ( U*                     < 1/31/85>160)                                         CODE U* N STY, BOT 3 + LSR, BOT 2+ ROR,     TYA, 16 # LDY,                         BEGIN, CS                                  IF, N 1+ STA, CLC, N LDA, BOT ADC,       N STA, N EC 2+ STY, SEC 3 + STA, THEN,     THEN, SEC ROL, SEC 1+ ROL, N DEC, 0=   UNTIL, POP JMP, C;                                                             DECIMAL -->                    ( 13:33)                                                                 OVE> )  CODE CMOVE 03 # LDA, SETUP JSR,           CMOVE: JMP, C;                          -->                                                                                                                                                                             PHP,                                    SEC, SEC 2 + LDA, BOT SBC, TAY,         SEC 3 + LDA, BOT 1+ SBC, CS             IF, SEC 2+ STY, SEC 3 + STA, PLP,        SEC,                                   ELSE, PLP, CS                            IF, SP, THEN,                    THEN, N 4 + )Y LDA, N 2+ )Y STA,        INY, 0=                                UNTIL, N 5 + INC, N 3 + INC,           AGAIN,                                                                        ( SOURCE DEST COUNT ---, <DOWN MAX, FFFF JMP,            THEN,  ( JUMP IS AT ' U/MOD 10 + )      SEC 2+ LDA, SEC LDY, SEC 2+             STY, .A ASL, SEC STA, SEC 3 + LDA,      SEC 1+ LDY, SEC 3 + STY, .A ROL,        SEC 1+ STA, 10 # LDA, N STA,            BEGIN, SEC 2+ ROL, SEC 3 + ROL,( CMOVE                  < 1/31/85>163)                                         LABEL  CMOVE:                             BEGIN,                                   BEGIN, N CPY, 0=                         IF, N 1+ DEC, 0<                         IF, NEXT JM( U/MOD                  < 1/31/85>161) ( THE FFFF BELOW WILL BE REPLACED BY  ) ( ' <Z-DIV>, THE DIVIDE OVERFLOW RTN  ) HEX                                     CODE U/MOD  SEC, SEC LDA, BOT SBC,       SEC 1+ LDA, BOT 1+ SBC, CS              IF, SP00 LDA, T                                                                                                                                                                                       ( 13:33)                                                                                                                                                                                                                                                        ( 13:33)                                                                             THEN,                                 THEN, TYA, PHA, INX, INX,               PUT JMP, C;                                                                   DECIMAL       -->                                                                                                                                                                                                                                                                                                                                       # SBC, 0A # CMP,           0< NOT                                   IF,  4 ROLL 4 ROLL                     THEN, BOT CMP, 0<                         IF, SEC STA,                             1 # LDA, PHA, TYA, PUT JMP,            THEN,                      1+ LDA, BOT 1+ ADC,           THEN, .A ROR, N ROR, BOT 3 + ROR,     BOT 2+ ROR, DEY, 0=                    UNTIL, BOT 1+ STA, N LDA, BOT STA,      NEXT JMP, C;                         -->                                                                     ( DIGIT                  < 1/31/85>162)                                         HEX                                     CODE DIGIT SEC, SEC LDA, 30 # SBC,        0< NOT                                  IF, 0A # CMP, 0< NOT                     IF,  SEC, 07                                                                                                                                                                                        ( 13:33)                                                                 ( BMOVE                  < 1/31/85>164)                                         ( SOURCE DEST COUNT ---, <UP/DN-MOVE>)  CODE  BMOVE 3 # LDA, SETUP JSR,           SEC, N 2+ LDA, N 4 + SBC, N 3 + LDA,    N 5 + SBC, 0< IF, CMOVE: JMP, THEN,     CLC, N 1+ LDA,                                -->                                                                                                                                                    ( bobp )                                                                          -->                                                                                                                                                                                                                                                               BOT LDA, 0= IF, BOT 1+ DEC, THEN,       BOT DEC, NEXT JMP, C;                                                        CODE 2-                                    BOT LDA, 0= IF, BOT 1+ DEC, THEN,       BOT DEC, 1-: JMP, C;                         CPY, 0=                     IF, N 3 + DEC, 0<                        IF, NEXT JMP, THEN,                    THEN, N 4 + )Y STA, INY, 0=            UNTIL, N 5 + INC,                      AGAIN, C;                                                                                     CODE 2+                                    BOT INC, 0= IF, BOT 1+ INC, THEN,       1+: JMP, C;                                                                  CODE 1-                                 LABEL 1-:                       ( FILL                   < 1/31/85>167)                                         CODE FILL  03 # LDA, SETUP JSR,           N 3 + LDA, 0<                           IF, NEXT JMP, THEN, N LDA,              BEGIN,                                   BEGIN, N 2 + ( 1+ 2+ 1- 2-            <12/ 4/85>165)                                         CODE 1+                                 LABEL 1+:                                  BOT INC, 0= IF, BOT 1+ INC, THEN,       NEXT JMP, C;                                                                                                                                                                                                                                ( 13:33)                                                                                                                                                                                                                                                        ( 13:33)                                                                                                                                                                                                                                                                                                                                            THEN, DEY, N 4 + )Y LDA, N 2+ )Y STA,  AGAIN, C;                             -->                                                                                                                                                                     =                          IF, BOT 1+ INC, 0=                       IF, NEXT JMP, THEN,                    THEN, SEC,                             THEN, BOT 1+ ROR, BOT ROR,              NEXT JMP, C;                          -->                              N 3 + ADC, N 3 + STA,    CLC, N 1+ LDA, N 5 + ADC, N 5 + STA,    N 1+ INC, N LDY,                        BEGIN, TYA, 0=                           IF, N 1+ DEC, 0=                         IF, NEXT JMP, THEN, N 3 + DEC,           N 5 + DEC,                 ( 2* 2/                  < 1/31/85>166)                                         CODE 2*  BOT ASL, BOT 1+ ROL,             NEXT JMP, C;                                                                  CODE 2/  CLC, BOT 1+ LDA, 0<              IF, BOT INC, 0                                                                                                                                                                                       ( 13:33)                                                                 ( QTERM ?TERMINAL        < 1/31/85>168) HEX                                     CODE  QTERM C000 BIT, 0<                  IF, INY, THEN, TYA, PUSH0A JMP, C;                                            CODE ?TERMINAL  C000 BIT, 0<              IF, BEGIN, C01P  COMPILE [FROM:NEWFORTH]         </LOOP> HERE - , NF;                                                         -->                                                                    ( bobp )                                                                         -->                                                                                                                                                                                                                                                             NF: LOOP COMPILE [FROM:NEWFORTH] <LOOP>    HERE - , NF;                                                                 NF: +LOOP  COMPILE [FROM:NEWFORTH]         <+LOOP> HERE - , NF;                                                         NF: /LOO                        CODE <CONST>                               02 # LDY, W )Y LDA, PHA, INY,           W )Y LDA, PUSH JMP, C;                                                       'NEW <:>     ' *COLON* !                'NEW <CONST> ' *CONSTANT* !     VER - SWAP ! NF;                                                NF: BEGIN  HERE NF;                                                             NF: DO  COMPILE [FROM:NEWFORTH] <DO>       HERE NF;                                                             ( <:> <CONST>            <12/17/85>171)                                         CODE <:>                                   IP 1+ LDA, PHA, IP LDA, PHA, CLC,       W LDA, 02 # ADC, IP STA, TYA,           W 1+ ADC, IP 1+ STA, NEXT JMP, C;                    ( NF: WORDS              <12/17/85>169)                                         NF: ;  ?CSP COMPILE [FROM:NEWFORTH]        <EXIT> SMUDGE [COMPILE] FORTH           [COMPILE] [ NF;                                                              NF: THEN  HERE O                                NF: WHILE                                   COMPILE [FROM:NEWFORTH] 0BRANCH         HERE 0 , NF;                        -->                            ( bobp )                                                                                                                                                                                                                                                        ( 13:33)                                                                             0BRANCH HERE 0 , NF;                                                        NF: ELSE                                    COMPILE [FROM:NEWFORTH] BRANCH          HERE 0 , SWAP HERE OVER -               SWAP ! NF;                                                                                                                                                                                                                                                                                                   , NF;                                                          NF: REPEAT  SWAP                            COMPILE [FROM:NEWFORTH] BRANCH          HERE - , HERE OVER - SWAP ! NF;                                             NF: IF COMPILE [FROM:NEWFORTH]  0 BIT, C000 BIT, 0< NOT       UNTIL, INY,                         THEN, TYA, PUSH0A JMP, C;                                                     DECIMAL -->                                                                                                     ( NF: WORDS              <12/17/85>170)                                         NF: UNTIL  COMPILE [FROM:NEWFORTH]         0BRANCH HERE - , NF;                                                         NF: AGAIN  COMPILE [FROM:NEWFORTH]         BRANCH HERE -                                                                                                                                                                                       ( bobp )                                                                 ( <VAR> <DCONST>         <12/17/85>172)                                         CODE <VAR>                                 CLC, W LDA, 02 # ADC, PHA, TYA,         W 1+ ADC, PUSH JMP, C;                                                       CODE <DCONST>                                                                                                                                                                                          (  PAI )                                                                           VARIABLE DRIVES                         VARIABLE OFFSET                         VARIABLE DISK-ERROR                                                           02  00 BYTE:IN DRIVES  !NEW                                                     -->                                                                                                                                                                                                                                                                                                                                       VARIABLE BASE                           VARIABLE DPL                            VARIABLE HLD                            VARIABLE OUT                                                                                                                                                                                                                                                                                                                          ( system variables       <12/16/85>175)                                           VARIABLE BLK                            VARIABLE SCR                                                                    VARIABLE TIB                            VARIABLE >IN  ( 0 1 2                  <12/20/85>173)                                              0 CONSTANT 0                            1 CONSTANT 1                            2 CONSTANT 2                                                               -->             LE VOC-LINK                                                               VARIABLE USE                            VARIABLE PREV                          -->                           ( bobp )                                                                                                                                                                                                                                                        ( bobp )                                                                         DECIMAL                                   VARIABLE DP                             VARIABLE ICEBOX    04 NFALLOT           VARIABLE CURRENT                        VARIABLE CONTEXT   14 NFALLOT                           ( see #VOCS scr 212 )   VARIAB        'NEW <VAR>  ' *DVARIABLE* !             'NEW <VAR>  ' *CREATE* !                'NEW <DCONST>  ' *DCONSTANT* !          -->                                                                                                                             LIMIT                     B1FC CONSTANT FIRST                     B1FC CONSTANT MEM-LIMIT                   20 CONSTANT BL                          28 CONSTANT C/L    ( 40 decimal )       50 CONSTANT SPE    ( end of stack )                                                            04 # LDY,                               BEGIN,  INY, DEX, W )Y LDA,                BOT STA, DEY, DEY, 0=                UNTIL, NEXT JMP, C;                                                          'NEW <VAR>  ' *VARIABLE* !      ( system constants & vars<12/18/85>174) HEX                                          1 CONSTANT ?AUX                         1 CONSTANT ?2E                                                                  2 CONSTANT #BUFF                     B600 CONSTANT                                                                                                                                                                                        ( bobp )                                                                 ( D+ DNEGATE U<          <12/16/85>176)                                         CODE D+                                  CLC,                                    BOT 2+  LDA, BOT 6 + ADC, BOT 6 + STA,  BOT 3 + LDA, BOT 7 + ADC, BOT 7 + STA,  BOT     LDA, BO                                                                                                                                                                                       ( bobp )                                                                            2 BSM ! 'NEW $BSM CALL ;                                                     ( copies monitor to banked memory )     : COPY-MON                                RM-W2 F800 DUP 800 CMOVE R2-W2 ;                                              DECIMAL         : DSWAP 4 ROLL 4 ROLL ;                 : DOVER 4 PICK 4 PICK ;                                                         -->                                                                                                                             ad & bank 2 write )        0 BSM ! 'NEW $BSM CALL ;                                                     : R1-W1 ( bank 1 read & write )            1 BSM ! 'NEW $BSM CALL ;                                                     : R2-W2 ( bank 2 read & write )                         : D+-  0< IF DNEGATE THEN ;             : DABS DUP D+- ;                                                                : MAX  DDUP < IF SWAP THEN DROP ;       : MIN  DDUP > IF SWAP THEN DROP ;                                       ( RM-W2 R1-W1 R2-W2 etc. <12/16/85>179) HEX                                                                             : MON ( jump to system monitor )           FF69 ROMCALL ;                                                               : RM-W2 ( rom re( S->D ABS DABS MAX MIN  <12/16/85>177)                                         : S->D DUP 0< NEGATE ;                                                          : +-   0< IF NEGATE THEN ;              : ABS  DUP +- ;                                         CALL ( adr -- )                  C081 LDA, ( bsm off) 'NEW CALL JMP, C;                                         DECIMAL -->                                                            ( bobp )                                                                 P, C;                                                                   -->                                                                                                            ( bobp )                                                                         CODE CALL ( addr -- )                      BOT    LDA, CALL: 1+ STA,               BOT 1+ LDA, CALL: 2+ STA,               TXA, PHA,  CALL: JSR,  PLA, TAX,        'NEW $BSM JSR, POP JMP, C;                                                   CODE ROM          NEG: JMP, C;                                                                  CODE U<                                   SEC, SEC LDA, BOT SBC,                  SEC 1+ LDA, BOT 1+ SBC, SEC 1+ STY,     CS NOT IF, INY, THEN, SEC STY,          POP JM ELSE, DEY, 0=               IF, C08B LDY, C08B LDY,                 ELSE, C083 LDY, C083 LDY,             THEN, THEN, PLA, TAY, PLA, RTS, C;                                           LABEL CALL:  20 C, 0 C, 0 C, 60 C,                                      T 4 + ADC, BOT 4 + STA,  BOT 1+  LDA, BOT 5 + ADC, BOT 5 + STA,  POPTWO JMP, C;                                                                 CODE DNEGATE                              SEC, TYA, SEC SBC, SEC STA,             TYA, SEC 1+ SBC, SEC 1+ STA,  ( BSM $BSM CALL ROMCALL  <12/17/85>178) HEX                                     VARIABLE BSM ( bank-switched mem flag )                                         CODE $BSM ( subroutine )                   PHA, TYA, PHA, 'NEW BSM LDY, 0=         IF, C081 LDY,-->                                                                                                                                                                                    ( bobp )                                                                 ( <EMIT> EMIT PAGE       <12/17/85>180) HEX                                                                             CODE <EMIT> ( ch -- )                      C081 LDA,         ( bsm off )           XSAVE STX,                              BOT LDA,     -->                                                                                                                                                                                    ( bobp )                                                                            BEGIN                                      1+ DUP >R C@ BASE @ DIGIT            WHILE                                      SWAP BASE @ U* DROP ROT                 BASE @ U* D+ DPL @ 1+                   IF 1 DPL +! THEN R>                  REPEA        : KEY <KEY> ;                                                                   : S0     SP0 @ ;                                                                : DEPTH  SP@ S0 SWAP - 2/ ;                                                     DECIMAL + ;                                                             : CFA   2- ;                                                                    : DECIMAL 10 BASE ! ;                                                           : CONVERT                       ch )                       C081 LDA,        ( bsm off   )          FD0C JSR,        ( get key   )          # 7F AND,        ( clr hi bit)          'NEW $BSM JSR,   ( reset bsm )          PUSH0A JMP, C;                                                       ( CONVERT & misc.        <12/18/85>183)                                         : NOOP ;                                                                        : HERE  DP @ ;                                                                  : PAD   HERE 68 ( CR <KEY> KEY S0 DEPTH  <12/18/85>181) HEX                                                                             : <CR>  0D <EMIT> 0 OUT ! ;             : CR  <CR> ;                                                                    CODE <KEY> ( --  1- ELSE LEAVE THEN                LOOP ;                                                                       'NEW <."> 2 -    ' *<.">* !             -->                            ( bobp )                                                                 -->                                                                                                                                                                                    ( bobp )                                                                                                                 : <.">  R@ COUNT DUP 1+ R> + >R TYPE ;                                          : -TRAILING ( adr cnt -- adr cnt' )        DUP 0                                   DO DDUP + 1- C@ BL =                       IF           POP JMP, C;                                                                  : EMIT  <EMIT> ;                                                                : PAGE  FC58 ROMCALL ;                                                          DECIMAL                         : COUNT  DUP 1+ SWAP C@ ;                                                       : <TYPE>  0 MAX ?DUP                       IF 0 DO COUNT EMIT LOOP THEN DROP ;                                          : TYPE  <TYPE> ;                                           # 80 ORA,         ( set hi bit)         0FDED JSR,                              XSAVE LDX,                              'NEW OUT INC,                           0= IF, 'NEW OUT 1+ INC, THEN,           'NEW $BSM JSR,    ( bsm on ) ( <TYPE> TYPE SPACE <."> <12/16/85>182)                                         : SPACE  BL EMIT ;                                                              : SPACES  0 MAX ?DUP                       IF 0 DO SPACE LOOP THEN ;                            T R> ;                          -->                                                                                                                                                    ( bobp )                                                                 ( <."> <ABORT"> <DODOES> <12/18/85>184)                                         : <ABORT">                                 IF GAP     ( @APPENDIX )                   GAP     ( WHERE1 )                      SP! CR R@ COUNT TYPE                    GAP GAP (  NOOP ;                         : ALSO   NOOP ;                                                                 -->                                                                    (  PAI )                                                                  to                   \ reload APPENDIX here                                            : <ABORT>                                  SP! [COMPILE] FORTH DEFINITIONS         QUIT ;                                                                       : QUERY ls )        CONTEXT @ CURRENT ! ;                                                       : VOCABULARY NOOP ;                     : FORGET NOOP ;                         : WORDS  NOOP ;                         : VLIST  NOOP ;                         : ONLY                          : EXPECT     NOOP ;                                                             : INTERPRET  NOOP ;                                                                                                     : QUIT NOOP ; \ hook in the word                           IF GAP ( STATE )   @                       GAP ( ?STREAM )                      THEN                                    R> DROP ;        ( immediate later )                                         : DEFINITIONS  NOOP ( for virtua( forward references     <12/17/85>187)                                         : FORGET-SYS NOOP ;  ( unlink any     )                      ( system overlay )                                         : @APPENDIX  NOOP ; ( relink appendix )                 ( FORTH ROOT & root words<12/21/85>185)                                         VOCABULARY ROOT                         VOCABULARY FORTH IMMEDIATE                                                      : X ( null word )                          BLK @                                                                                                                                                                                               (  PAI )                                                                                                                                                                                                                                                        ( bobp )                                                                         'NEW ROOT 04 +  04 BYTE:IN FORTH !NEW                                           ( set startup vocabulary )                                                      'NEW FORTH 04 + 00 BYTE:IN ICEBOX !NEW                                          -->     DC,        BOT 1+ STA, SEC, PLA, 1 # SBC,          W STA, PLA, 0 # SBC, W 1+ STA,          *COLON* JMP, C;                                                              'NEW <DODOES>    ' *DODOES* !           'NEW <ABORT"> 2- ' *<ABORT">* !         -->     TH and ROOT )                                                   *VOCAB*  -2 BYTE:IN ROOT   !NEW         *VOCAB*  -2 BYTE:IN FORTH  !NEW                                                 ( set voc-link )                                                        FORTH DEFINITIONS )           GAP     ( QUIT )                     ELSE R> DUP C@ + 1+ >R THEN ;                                                CODE <DODOES>                              DEX, DEX, CLC, W LDA,                   2 # ADC, BOT STA, TYA, W 1+ A( <DOVOC>                <12/21/85>186)                                         : <DOVOC> DOES> CONTEXT ! ;                                                     'NEW <DOVOC> 2 + ' *VOCAB* !                                                    ( set CFA of FOR TIB @ 80 EXPECT 0 >IN ! ;                                              -->                                                                                                            ( bobp )                                                                 ( BRK-RETN RESET ABORT   <12/16/85>188) HEX                                                                                                                     : ABORT     <ABORT> <ABORT> ;           : BRK-RETN  <ABORT> <ABORT> ;                                                           DECIMAL -->                                                                                                                                            ( bobp )                                                                         ( CODE VERSION AVAILABLE, BUT IT IS   ) ( 162 BYTES.   3.3 TIMES FASTER.      ) ( SEE SCREEN 264 OF SOURCE CODE LISTNG) ( IF YOU NEED A FAST SCALING */.      )                                                                                          ABS       >R OVER XOR ROT ROT DABS SWAP R@ U*     ROT R> U* ROT 0 D+ R@ U/MOD ROT ROT     R> U/MOD SWAP DROP SWAP ROT D+- ;                                                                                    'NEW <Z-DIV>  10 BYTE:IN U/MOD  !NEW             ;                                                              : */MOD  >R M* R> M/ ;                                                          : */     */MOD SWAP DROP ;              -->                                                                                             CODE <Z-DIV>                               'NEW ZERO-DIV #LO LDA, IP STA,          'NEW ZERO-DIV #HI LDA, IP 1+ STA,       NEXT JMP, C;                                                                 : M*/  DDUP XOR SWAP ABS >R SWAP( MOD / * */MOD */       <12/16/85>191)                                         : MOD    /MOD DROP ;                                                            : /      /MOD SWAP DROP ;                                                       : *      U* DROP( M*/ ZERO-DIV           <12/18/85>189) HEX                                     : ZERO-DIV                                 NOOP ( execution vector )               NOOP ( EXIT )                           1 ABORT" DIVIDE OVERFLOW" ;                                                                                                                                                                                                                 ( bobp )                                                                 -->                                                                                                                                                                                    ( bobp )                                                                         : M/MOD  >R 0 R@ U/MOD R> SWAP >R                U/MOD R> ;                                                             -->                                                                                                                                       'NEW BRK-RETN #HI LDA, IP 1+ STA,       # 2 LDA, 'NEW BSM STA,                  C083 LDA, C083 LDA,                                    ( restore bank-sw mem)   'NEW RP! JMP, C;                                                              DECIMAL                         : M/     OVER >R >R DUP D+- R@ ABS               U/MOD R> R@ XOR +- SWAP                 R> +- SWAP ;                                                           : /MOD   >R S->D R> M/ ;                                                                        ( This version always sets )            ( bank-switch memory to R2-W2. )                                                CODE RESET  CLD,                          RP00 LDX, TXS, SP00 LDX,                'NEW BRK-RETN #LO LDA, IP STA,( M* M+ M/ /MOD M/MOD    <12/16/85>190)                                         : M*     DDUP XOR >R ABS SWAP ABS U*             R> D+- ;                                                               : M+     S->D D+ ;                                                                                                                                                                                                                             ( bobp )                                                                 ( HOLD <# # #> #S SIGN   <12/16/85>192)                                         : HOLD   -1 HLD +! HLD @ C! ;                                                   : <#     PAD HLD ! ;                                                            : #      BASE @  S->D R> D.R ;                                                          -->                                                                                                            ( bobp )                                                                                                                                                                                                                                                                                                                                         : U.  0 D. ;                                                                    : U.R 0 SWAP D.R ;                                                              : .   S->D D. ;                                                                 : .R  >R                        DECIMAL -->                                                                     ( DOSRWTS IS IN DOS AT B65E   )                                                                                                                         ER DUP D+-                       <# #S ROT SIGN #>                    R> OVER - SPACES TYPE                THEN ;                                                                       : D.  0 D.R SPACE ;                                                     ( <RWTS>                 <12/16/85>195)                                         HEX                                     ( IMPLEMENTATON, RETURNS FLAG )         CODE <RWTS>                                B65E JSR, NEXT JMP, C;                               ( D.R D. U. U.R . .R     <12/16/85>193)                                         : D.R                                      DEPTH 3 <                               IF CR ." EMPTY STACK" SP!               ELSE                                       >R SWAP OV                                WILL INSTALL ALTSKEW AS THE READ TABLE.                                                                                                                ( bobp )                                                                                                                                                                                                                                                        ( bobp )                                                                                                                         VARIABLE ALTSKEW -2 DP +!                D00 , 90B , 507 , 103 ,                 C0E , 80A , 406 , F02 ,                                                ALTSKEW DOSRD 16 ( DECIMAL) CMOVE               IL ;                                            : SIGN   0< IF 45 HOLD THEN ;                                                   -->                                                                                                                             DOSWR                   DECIMAL -->                                                                     NOTE: SAVE-FORTH COPIES DOSWR TO DOSRD  TO PREVENT A NO-NO.  DOSRD IS THE TABLE FOR READING FROM DISK AND DOSWR IS THE  TABLE FOR WRITING.   SAMPLE:    M/MOD ROT 9 OVER <               IF 7 + THEN                             48 + HOLD ;                                                            : #>     DDROP HLD @ PAD OVER - ;                                               : #S     BEGIN # DDUP OR NOT UNT( DISK CONSTANTS         <12/16/85>194) HEX                                         10 CONSTANT SECS/TRK                    23 CONSTANT TRKS/HD                      1 CONSTANT HDS/DRV                   BFB8 CONSTANT DOSRD                     BFC8 CONSTANT                                                                                                                                                                                        ( bobp )                                                                 ( <DISKERR> DISKERR      <12/18/85>196) HEX                                                                             : <DISKERR>                                CR                                      ." BLK# " BLK @ .                       ." ERR# " DIS 6, 2 DRIVES FOR SLOT 5, AND 1  DRIVE IN THE DRV 0 POSITION IN SLOT 4.  IN THIS CASE, SCRN 699 CAN BE ADDRESSED,SCRN 700 = "NODRIVE"                                                   ( bobp )                                                                                  OVER !                               THEN 1028 +                          LOOP DROP ;                                                                  : FLUSH SAVE-BUFFERS EMPTY-BUFFERS ;                                            -->                                                     -->                                     NOTE: <R/W> ASSUMES THAT CONTROLLER     CARDS ARE INSTALLED IN DESCENDING ORDER STARTING AT SLOT 6, E.G., IF 5 DRIVES   ARE DECLARED, THERE MUST BE 2 DRIVES    FOR SLOT                                                                : SAVE-BUFFERS                             FIRST #BUFF 0                           DO DUP @ 0<                                IF DUP @ 32767 AND                         OVER 2+ OVER 0 R/W      TRKS/HD /MOD              DUP DRIVES @ < NOT                        IF DDROP DDROP DROP NODRIVE THEN      2 /MOD 6 SWAP - SWAP                    DSWAP 6 ROLL 4 RWTS ;                                                        : R/W  <R/W> ;                  ( FLUSH EMPTY-BUFFERS    <12/16/85>199)                                         : EMPTY-BUFFERS                            FIRST LIMIT OVER - 0 FILL               FIRST #BUFF 0                           DO 32767 OVER ! 1028 + LOOP             DROP ;       ( NODRIVE <R/W> R/W      <12/16/85>197)                                         : NODRIVE  QUIT ;                                                               ( ADDR SCRN R/W<0=WRITE,1=READ> ---, )  : <R/W>  ROT ROT 4 *                       SECS/TRK /MOD                                                                                                                                                                                       ( bobp )                                                                 -->                                                                                                                                                                                    ( bobp )                                                                            USE @ DUP >R                            BEGIN +BUF UNTIL USE !                  R@ @ 0<                                 IF R@ 2+ R@ @ 32767 AND                    0 R/W THEN                           R@ ! R@ PREV ! R> 2+ ;               -->                DEPTH 7 < ABORT" 7 ARGUMENTS NEEDED"    6 PICK 10 * B7E9 C!                     <RWTS>                                  DUP DISK-ERROR !                        IF DISKERR THEN ;                                                            DECIMAL MIT =                      IF DROP FIRST THEN                      DUP PREV @ - ;                                                               : BUFFER                                   USE @ PREV @ =                          IF USE @ +BUF DROP USE ! THENK-ERROR @ .                QUIT ;                                                                       : DISKERR  <DISKERR> ;                                                          ( addr slot dr sec tr r/w nsects -- )   : RWTS                          ( UPDATE +BUF BUFFER     <12/16/85>198)                                         : UPDATE                                   PREV @ @  -32768 OR  PREV @ ! ;                                              : +BUF                                     1028 + DUP LI                                : FLUSH                                    #BUFF 1+ 0                              DO 32767 BUFFER DROP LOOP ;                                         ( bobp )                                                                 ( BLOCK ONB              <12/16/85>200)                                         : BLOCK                                    OFFSET @ + >R                           PREV @                                  BEGIN                                      DUP @ R@ - 5 ROLL 100 < OR                      LOOP OR DSWAP DDROP OR                THEN 0= ;                           DECIMAL -->                                                            ( bobp )                                                                            'NEW $BSM JSR, ( bsm on )               POPTWO JMP, C;                                                               : BEEP  7 EMIT ;                                                                : 2BEEP BEEP BEEP ;                                        ELSE 0 0 0 3 0                             DO 100 0                                   DO  4 PICK I + C@ +  8 +LOOP            ROT                                  LOOP 3 PICK 3 0                         DO DOVER = NOT                            A JMP, C;                                                       CODE XYTAB                                 SEC LDY, 24 STY,                        BOT LDA, 25 STA,                        C081 LDA, ( turn off bsm )              FC22 JSR,                    STA, FD # LDA, 39 STA,     28 # LDA, 21 STA, FF # LDA, 32 STA,     NEXT JMP, C;                                                                 ( CN00 ---, F = 1 IF A CARD INSTALLED ) : <?CARD>  DUP C000 =                      IF DROP 0                    ( XY@ XYTAB BEEP 2BEEP   <12/16/85>203) HEX                                                                             CODE XY@                                   DEX, DEX,                               24 LDA, BOT STA, BOT 1+ STY,            25 LDA, PUSH0( MODE40 <?CARD>         <12/16/85>201) HEX                                     CODE MODE40                                C051 LDA, C00E STA, C056 LDA,           C00C STA, C054 LDA, C000 STA,           F0 # LDA, 36 STA, FD # LDA, 37 STA,     1B # LDA, 38                                                                                                                                                                                        ( bobp )                                                                                                 : ONB                                      SECS/TRK TRKS/HD * HDS/DRV * 4 / + ;                                                                        ( bobp )                                                                             IF 192 + 256 * ?SLOT 56 !               ELSE MODE40 THEN ;                                                          -->                                                                                                                                        DUP PREV ! 2+                           R> DROP ;                                                                    : ONB 140 + ;                                                                   -->                                             D THEN ;                                                        : PR#  ?DUP                                 IF 192 + 256 * ?SLOT 54 !               ELSE MODE40 THEN ;                                                          : IN#  ?DUP                      2*                        WHILE                                      +BUF NOT                                IF DROP R@ BUFFER                          DUP R@ 1 R/W 2-                      THEN                                 REPEAT                       ( ?SLOT MODE! PR# IN#    <12/16/85>202) DECIMAL                                                                         : NOCARD <ABORT> ;                                                              : ?SLOT  DUP <?CARD> 0=                    IF DROP NOCAR                                DECIMAL  -->                                                                                                                                           ( bobp )                                                                 ( ?BOOT GR->APP          <12/16/85>204) HEX                                       VARIABLE ?BOOT                          VARIABLE SYS-SECTS                      VARIABLE APP-SECTS                                                            : GR->APP ( get                                                                                                                                                                                        ( bobp )                                                                            DOVER DOVER D< NOT                      IF DSWAP THEN DDROP ;                                                        -->                                                                                                                                                                                                                                                                                                                                                                                             P ;                                                             : DMAX                                     DOVER DOVER D<                          IF DSWAP THEN DDROP ;                                                        : DMIN                          NT COLDSTART                                                    01  00 BYTE:IN ?BOOT  !NEW                                                      DECIMAL -->                                                                                                     ( D< DMAX DMIN           <12/16/85>207)                                         : D<                                       ROT DDUP =                              IF ROT ROT DNEGATE D+ 0<                ELSE SWAP < SWAP DROP                   THEN SWAP DRO( LOGO START-SYS         <12/16/85>205)                                         : LOGO NOOP ;                                                                   : START-SYS NOOP ;                                                              BASE-ADDR CONSTALD                                 ASSEMBLER JMP-TO FORTH DELTA +  !NEW                                         DECIMAL -->                                                            ( bobp )                                                                                                                                                                                                                                                        ( bobp )                                                                            200 TIB !  FIRST USE !  FIRST PREV !    0 OFFSET !                              'NEW RESET DUP  3F2 !  3F9 !            3F3 C@  A5 XOR  3F4 C!  4C 3F8 C!       DECIMAL LOGO START-SYS ABORT ;                                                'NEW CO                                                DECIMAL -->                                                                                                                                                                                                     ->APP THEN                 ICEBOX     @ VOC-LINK !                 ICEBOX 2+  @ DP !                       ICEBOX 4 + @ 'NEW FORTH !               LIMIT 404 #BUFF * -                       DUP 'NEW FIRST !  'NEW MEM-LIMIT !    EMPTY-BUFFERS                appendix from gr page )    2000 D000 2000 CMOVE                    APP-SECTS @                             IF F000 6 0                                SYS-SECTS @ 10 + SECS/TRK /MOD          1 APP-SECTS @ RWTS                   THEN 0 ?BOOT ! ;             ( COLD                   <12/18/85>206) HEX                                     : COLD  SP!                                RM-W2 FBB3 C@ 6 =                          DUP 'NEW ?2E ! 'NEW ?AUX !           ?2E NOT IF COPY-MON THEN R2-W2          ?BOOT @ IF GR                                                                                                                                                                                       ( bobp )                                                                 ( DU< D- D0= D= D> D@ D! <12/18/85>208)                                         : DU<  >R >R -32768 +                          R> R> -32768 + D< ;                                                      : D-  DNEGATE D+ ;                                                                                                                                                                                                                             ( bobp )                                                                                                                                                                                                                                                                                                                                          00 BYTE:IN APP-LINK2 !NEW                                                      -->                                                                                                                                                                                              VARIABLE APP-LATEST                                                                                                    MAIN                                                                            -->                                                     ' WIDTH !                                                                       LFA:IN APP-LINK1                         00 BYTE:IN APP-LINK1 !NEW                                                      LFA:IN APP-LINK2                ( appendix vars          <12/20/85>211) APPENDIX                                                                        APP-START CONSTANT APP-START             VARIABLE OLD-DP                         VARIABLE OLD-LATEST                     VARIABLE APP-DP( APP-LINK1 APP-LINK2    <12/20/85>209)                                         WIDTH 9 ' WIDTH !                                                               00 CONSTANT APP-LINK1                   00 CONSTANT APP-LINK2                                                                                                                                                                                                                          ( bobp )                                                                                                                                                                                                                                                        ( bobp )                                                                 arn? )     VARIABLE EPRINT                                                              MAIN                                    10  00 BYTE:IN >IN-ERR   !NEW           01  00 BYTE:IN FWARNING  !NEW           01  00 BYTE:IN WARNING   !NEW           -->             : D@  DUP @ SWAP 2+ @ SWAP ;                                                    : D!  SWAP OVER ! 2+ ! ;                                                        -->                                                                                     E                          VARIABLE FENCE                          VARIABLE >IN-ERR                                                                VARIABLE PRIOR    ( voc; for search)    VARIABLE WARNING                        VARIABLE FWARNING ( forward w                        : D0=  OR 0= ;                                                                  : D=  D- D0= ;                                                                  : D>  DSWAP D< ;                                                        ( system variables       <12/20/85>210) APPENDIX                                31 CONSTANT WIDTH                        8 CONSTANT #VOCS ( see CONTEXT scr174)                                            VARIABLE CSP                            VARIABLE STAT                                                                                                                                                                                       ( bobp )                                                                 ( TRAVERSE LATEST PFA etc<12/18/85>212) APPENDIX                                                                        : TRAVERSE                                 SWAP                                    BEGIN OVER + 127 OVER C@ < UNTIL        SWAP DROP ;                                                                                                                                                                                         (  PAI )                                                                            ABORT" CONDITIONALS NOT PAIRED" ;                                            : ?STACK  SP@ S0 SWAP U<                   ABORT" STACK UNDERFLOW"                 SP@ SPE U< ABORT" FULL STACK" ;                                              : ?STREA             DP @ OLD-DP !                           APP-DP @ DP !                           65535 'NEW MEM-LIMIT !               THEN ;                                                                        MAIN -->                                        @ -                        ABORT" DEFINITION NOT FINISHED" ;                                            : ?LOADING  BLK @ NOT                      ABORT" LOADING ONLY" ;                                                       : ?PAIRS  -                                               OLD-DP @ 0= ( don't allow twice )       IF                                         APP-LINK1  APP-LINK2 ! ( unhook )       CURRENT @ @                             DUP APP-START !  OLD-LATEST !           APP-LATEST @  CURRENT @ !  ( ?COMP ?CSP ?LDNG ETC.  <12/20/85>215) APPENDIX                                                                        : ?COMP  STATE @ NOT                       ABORT" COMPILE ONLY" ;                                                       : ?CSP  SP@ CSP ( APPENDIX               <12/20/85>213) \ saves current state sets to compile   \ in appendix (in bsm2)                                                         APPENDIX                                                                        : APPENDIX                                      MAIN -->                                                                                                                                               (  PAI )                                                                                                                                                                                                                                                                                                                                              DP @ APP-DP !                           OLD-DP @ DP !                           0 OLD-DP ! ( set flag )                 FIRST 'NEW MEM-LIMIT !               THEN ;                                ( IMMEDIATE )                                                                                   : LFA  NFA 2- ;                                                                 : PFA-LFA 2- ;                                                                  MAIN -->                                        T ( don't allow word )                    ( to execute twice )    IF                                         APP-LINK1  APP-START !                  CURRENT @ @                             DUP APP-LINK2 ! APP-LATEST !            OLD-LATEST @  CURRENT @ !                                                                  : LATEST  CURRENT @ @ 2+ ;                                                      : PFA  1 TRAVERSE 3 + ;                                                         : NFA  3 - -1 TRAVERSE ;        ( MAIN                   <12/20/85>214) \ restore compiling to the              \ main dictionary                       APPENDIX                                                                        : MAIN                                    OLD-DP @ 0= NOM                                  ABORT" INPUT STREAM EXHAUSTED" ;                                             MAIN -->                                                               ( bobp )                                                                 ( TOGGLE SMUDGE IMMED.   <12/20/85>216) APPENDIX                                                                        CODE TOGGLE                               SEC X) LDA, BOT EOR,                    SEC X) STA, POPTWO JMP, C;                                                            MAIN -->                                                                                                                                               ( bobp )                                                                 A,      ( n 1- holds first byte of name )                                                 SEC,                                    SEC    LDA, 02 # SBC, N    STA,         SEC 1+ LDA, 00 # SBC, N 1+ STA,       ( n holds pointer to LFA of word )      ( that i           IF BLOCK ELSE TIB @ THEN                >IN @ + ;                                                                    : <;CODE>  R> LATEST PFA CFA ! ;                                                  'NEW <;CODE> 2- ' *<;CODE>* !                                           XSAVE STX, SEC,                         SEC 2 + LDA, 02 # SBC, N 2 + STA,       SEC 3 + LDA, 00 # SBC, N 3 + STA,     ( n 2+ holds pointer to name )                                                    02 # LDY, N 2+ )Y LDA, N 1- ST                        : ]  192 STATE ! ;                                                              : COMPILE  ?COMP R> DUP 2+ >R @ , ;                                             : 'STREAM                                  BLK @ ?DUP                   ( <<FIND>                <12/18/85>219) APPENDIX HEX                            \ modified; when flag = 0,              \ then do not search ROOT                                                       ( here nfa f -- [pfa n' 1] or [0] )     CODE <<FIND>    ( [ ] 'STREAM COMPILE    <12/18/85>217) APPENDIX                                                                        : HEX  16 BASE ! ;                                                              : [  0 STATE ! ;  IMMEDIATE                              SEC STY, INY, 0=                  IF, BOT 1+ INC, THEN, BOT STY,        NEXT JMP, C;                           DECIMAL MAIN -->                                                       ( bobp )                                                                 EM-LIMIT 0  DP @ 0 R@ M+  D<       ABORT" WENT PAST MEM-LIMIT"             R> DP +! ;                                                                                                  ( bobp )                                                                          BEGIN, N 2+ )Y LDA, 0=                    IF, BOT STY, SEC STY, NEXT JMP,         THEN, N CMP, 0= NOT                   WHILE, INY, 0=                            IF, BOT 1+ INC, SEC 1+ INC,              N 3 + INC, THEN,                     REPEAT,        : ,   HERE !  2 ALLOT ;                                                         : C,  HERE C! 1 ALLOT ;                                                         MAIN -->                                : ALLOT                                    >R  MLDA, N CMP, 0=           WHILE, INY, 0=                            IF, BOT 1+ INC, SEC 1+ INC,               SEC 3 + INC, N 3 + INC, THEN,       REPEAT, SEC 2+ STY, 0 # CMP, 0=           IF, BOT STY, INY, SEC STY, NEXT JMP,    THEN,                                                : SMUDGE    LATEST 32 TOGGLE ;                                                  : IMMEDIATE LATEST 64 TOGGLE ;                                                  : ALLOT DP +! ;                                                         ( ENCLOSE                <12/18/85>218) APPENDIX HEX                            CODE ENCLOSE                             BOT LDA, N STA, SEC LDA, N 2+ STA,      SEC 1+ LDA, N 3 + STA, DEX, DEX,        DEX, DEX, SEC 1+ STY, BOT 1+ STY,       BEGIN, N 2+ )Y s currently being tested )                                                BOT LDA, BOT 1+ ORA, N 4 + STA,       ( n 4+ holds search flag )              DECIMAL -->                    ( bobp )                                                                 ( <<FIND> CONT           <12/18/85>220) HEX                                                                              BEGIN,  02 # LDY, N )Y LDA, 3F # AND,    N 1- CMP, 0=  ( count equal? )          IF,  ( yes, compare remaining bytes )    BEGIN, INY, NDA, BOT STA, BOT 1+ STA,          NEXT JMP, C;                                                                  DECIMAL MAIN -->                                                       ( bobp )                                                                                                                 : WORD  GAP ( 'STREAM ) SWAP ENCLOSE        DDUP > ( HI-LEVEL WORD )                 IF DDROP DDROP 0 HERE !                 ELSE >IN +! OVER - DUP >R HERE C!        + HERE 1+ R> DUP 255 >                  ABI CMP,        THEN,      ( .. and LFA = 'ROOT )     THEN,                                 THEN,  0=                              UNTIL,                                   ( return false flag )                   XSAVE LDX, INX, INX, INX, INX,          00 # L                              HERE WORD1                              ABORT" INPUT > 255" CMOVE            THEN ;                                                                       MAIN                                    -->                             = 0 .. )                  N 1+ ORA, 0= NOT                        IF,      ( .. or, when LFA not 0 .. )     N 4 + LDA, 0=                           IF,   ( .. but search flag = 0 .. )       N LDA, 'NEW ROOT #LO CMP, 0=            IF, N 1+ LDA, 'NEW ROOT #H( WORD                   <12/18/85>223) APPENDIX                                                                        : WORD  'STREAM                            SWAP ENCLOSE DDUP >                     IF DDROP DDROP 0 HERE ! HERE            ELSE         ( <<FIND> CONCLD         <12/18/85>221) HEX                                     ( try next word in vocab )                01 # LDY, N )Y LDA, TAX, DEY,           N )Y LDA, N STA, N 1+ STX,                                                    ( quit when LFA STY, SEC 1+ LDA, BOT STA,        SEC INC, 0= IF, SEC 1+ INC, THEN,       NEXT JMP, C;                                                                   MAIN -->                       ( bobp )                                                                 N,                                 REPEAT,                                THEN,                                 DECIMAL -->                                                            ( bobp )                                                                  + ADC,  SEC 5 + STA, ( addr n1 + )                                                      BOT LDA, SEC 6 + STA, 01 # ADC,         SEC 2+ STA, BOT 1+ LDA, SEC 7 + STA,    00 # ADC, SEC 3 + STA,                                                          BOT 1+ TA,            N 1+ LDA, 00 # ADC, SEC 3 + STA,             ( replace SEC 2+ with PFA )        02 # LDY, N )Y LDA, SEC STA,            0 # LDY, SEC 1+ STY, BOT 1+ STY,        INY, BOT STY, NEXT JMP,                          ( set flag and return )      THE                         SEC, SEC 2+ LDA, SEC 4 + SBC, SEC STA,  BOT X) STA, SEC 3 + LDA, SEC 5 + SBC,   SEC 1+ STA, ( count = n2 n1 - )                                                 CLC, SEC 6 + LDA, SEC 4 + ADC,          SEC 4 + STA, SEC 7 + LDA, SEC 5 )Y LDA,                     N 2+ )Y EOR, .A ASL, 0=               WHILE,   ( bytes still match )            CS   ( at end of word name )            IF,  ( return parameters )                INY, INY, INY, XSAVE LDX,               TYA, CLC, N ADC, SEC 2+ S( WORD1 <code version>   <12/18/85>222) ( adr n1 n2 n3 here --, h a+n1 h1+ c f) APPENDIX                                CODE WORD1  CLC, 'NEW >IN LDA, SEC ADC,  'NEW >IN STA, 'NEW >IN 1+ LDA, ( n3 )   SEC 1+ ADC, 'NEW >IN 1+ STA, ( >in +!)                 ORT" INPUT > 255" 1+ CMOVE           THEN HERE ;                                                                                                                                       ( bobp )                                                                 ( NUMBER                 <12/18/85>224) APPENDIX                                                                        : NUMBER                                   0 0 ROT                                 DUP 1+ C@ 45 = DUP >R +                 -1 DPL ! CONV                                                                                                                                                                                       ( bobp )                                                                 DIATE                                           MAIN -->                                                                                                                                                                                                         )                  OVER SWAP   ( wa wa voc )               @ 2+ 1 <<FIND>                          DUP IF LEAVE THEN                 THEN THEN                            LOOP DUP >R IF ROT THEN DROP R> ;                                            MAIN -->                        : ?FIND -FIND NOT ABORT" NOT FOUND" ;                                           : '     ?FIND DROP [COMPILE] LITERAL ;          IMMEDIATE                                                               : [']   ?COMP [COMPILE] ' ; IMME        ( wa )                CONTEXT I 2* + @  ( wa voc )            DUP                                     IF DUP PRIOR @    ( wa vo vo pr )          OVER PRIOR !                            = IF DROP 0    ( wa 0 )                 ELSE           ( wa voc( -FIND FIND ?FIND ' ['] <12/18/85>227) APPENDIX                                                                        : -FIND BL WORD <FIND> ;                                                        : FIND  -FIND IF DROP CFA ELSE 0 THEN ;                 ( <FIND> -FIND           <12/18/85>225) APPENDIX                                                                        : <FIND> ( wa -- {pfa n 1} or {0})         0 PRIOR !  0         ( wa dummy )       #VOCS 0 DO                                 DROP      MP, C;                                                                  DECIMAL MAIN -->                                                                                               ( bobp )                                                                                                                                                                                                                                                        ( bobp )                                                                                                                 CODE ?STCK                                BOT FF + STY, BOT FE + STY,             INY, SEC, TXA, 'NEW SPE CMP, CS NOT     IF, BOT FE + STY, THEN, DEX, DEX,       SP00 CMP, CS IF, BOT STY, THEN,         NEXT J           THEN DROP                               R> IF DNEGATE THEN ;                                                         MAIN -->                                                                                                                                                : DLITERAL                                 STATE @                                 IF SWAP                                    [COMPILE] LITERAL                       [COMPILE] LITERAL                    THEN ;  IMMEDIATE            ERT                        DUP C@ BL >                             IF DUP C@ 46 = NOT                         ABORT" NOT RECOGNIZED"                  0 DPL ! CONVERT                         DUP C@ BL >                             ABORT" NOT RECOGNIZED"    ( LITERAL DLITERAL ?STCK <12/18/85>226) APPENDIX HEX                                                                    : LITERAL                                  STATE @                                 IF COMPILE LIT , THEN ; IMMEDIATE                                                                                                                                                                                                           ( bobp )                                                                 ( ?CLOSE                 <12/17/85>228) HEX APPENDIX                                                                    : <INV>  3F 32 C! ;                     : <NORM> FF 32 C! ;                                                             : ?CLOSE        <VAR> , 2- CURRENT @ ! ;                                                MAIN -->                                                                                                       ( bobp )                                                                                                                 : DVARIABLE                                CREATE 0 , 0 , ;                                                                                                     MAIN -->                                                   DUP C@ WIDTH MIN 1+ ALLOT               DUP 128 TOGGLE HERE 1- 128 TOGGLE       DP C@ 255 =                                IF DUP 2- DUP 1+ 1 DP +!                   HERE OVER - BMOVE 1+                 THEN                                 'NEW                         : VARIABLE                                 CREATE 0 , ;                                                                 : DCONSTANT                                CREATE -2 ALLOT 'NEW <DCONST> ,         ( dval) , ,  ;               MPTED TO REDEFINE NULL"    DUP <FIND>                              IF DDROP WARNING @                         IF OUT @ IF CR THEN                        <INV>  DUP COUNT TYPE                   <NORM> ."  ISN'T UNIQUE" CR       THEN THEN                    ( CONSTANT VARIABLE      <12/18/85>231) APPENDIX                                                                        : CONSTANT                                 CREATE -2 ALLOT 'NEW <CONST> ,          ( val) , ;                                           ( CREATE                 <12/18/85>229) APPENDIX                                                                        : CREATE  ?CLOSE                           CURRENT @ @ ,  BL WORD                  DUP 1+ C@ 0= DUP IF -2 DP +! THEN         ABORT" ATTE                                                                                                                                                                                       ( bobp )                                                                                                                                                                                                                                                        ( bobp )                                                                                                                                                                                                                                                                                                                                                                                 DECIMAL MAIN -->                                                                                                                                                                                                                                                                : ;  ?CSP COMPILE <EXIT>                   SMUDGE [COMPILE] [ ; IMMEDIATE                                               MAIN -->                                                                                           MEM-LIMIT 100 - HERE U<                 IF CR CR BEEP                              ." APPROACHING MEMORY LIMIT AT "        <INV> MEM-LIMIT U. <NORM>               CR CR                                THEN ;                       ( : ;                    <12/18/85>230) APPENDIX                                                                        : :  SP@ CSP !                             CURRENT @ CONTEXT !                     CREATE  -2 ALLOT  'NEW <:> ,            SMUDGE ] ;                                                                                                                                                                                          ( bobp )                                                                 ( ID.                    <12/16/85>232) APPENDIX                                                                        : ID. ( nfa -- )                           DUP C@ 31 AND SWAP                      BEGIN                                      SWAP 1- SW                                                                                                                                                                                       ( bobp )                                                                                                                 : \  ?LOADING                              >IN @ C/L / 1+ C/L * >IN ! ;            IMMEDIATE                                                                    MAIN -->                                                   DUP ?FORWARD CFA ,  ; IMMEDIATE                                              DECIMAL MAIN -->                                                                                                                                                        <;CODE>                    32 C,  'NEW <DODOES> ,                  ; IMMEDIATE                                                                  : (  -1 >IN +!                             41 WORD C@ 1+ HERE + C@                 41 = NOT ?STREAM ;  IMMEDIATER THEN                        ." FORWARD CALL TO "                    <INV> NFA ID. <NORM> CR              ELSE DROP THEN ;                                                             : [COMPILE]                                ?COMP ?FIND DROP             ( 'X DOES> ( \           <12/16/85>235) APPENDIX                                                                        'NEW X CONSTANT 'X                                                              : DOES>                                    ?CSP COMPILE ( ?FORWARD [COMPILE]     <12/16/85>233) APPENDIX                                                                        : ?FORWARD ( pfa --  )                     HERE OVER U<                            FWARNING @ AND                          IF OUT @ IF CORT" IN PROTECTED DICTIONARY"      <<FORGET>> ;                                                                 MAIN -->                                                               (  PAI )                                                                                                                                                                                                                                                        ( bobp )                                                                            UNTIL R>  DP ! ;                                                             : <FORGET>                                 BL WORD CURRENT @ @ 2+ 0 <<FIND> 0=        ABORT" NOT IN CURRENT VOCABULARY"    DROP LFA DUP FENCE @ U<                    AB                                                                                                                                                                                                                                                                 FORTH DEFINITIONS THEN    VOC-LINK @                              BEGIN R@ OVER U< WHILE @ REPEAT         DUP VOC-LINK !                          BEGIN DUP 4 -                              BEGIN @ DUP R@ U< UNTIL                 OVER 4 - ! @ ?DUP 0=      AP 1+ DUP C@ DUP              127 AND EMIT 128 AND                 UNTIL DROP ?DUP                         IF 0 DO 94 EMIT LOOP THEN SPACE ;                                                                                    DECIMAL MAIN -->                ( <FORGET>               <12/21/85>234) APPENDIX                                : <<FORGET>>  >R                           R@ CONTEXT @ U<                          IF [COMPILE] FORTH THEN                R@ CURRENT @ U<                          IF [COMPILE]                                                                                                                                                                                       ( bobp )                                                                 ( <VOCABULARY>           <12/17/85>236) APPENDIX                                                                        : <VOCABULARY>                             CREATE                                     'NEW ROOT  , 41089 ,                    HERE VOC-L                                                                                                                                                                                       ( bobp )                                                                                                                                                                                                                                                                                                                                                  ELSE DUP                                THEN I C! 0 I 1+ !                   THEN EMIT 1                          /LOOP DROP ;                                                                 MAIN -->                                        RY INTERPRET                  STATE @ NOT                             IF ."  OK" THEN                      AGAIN ;                                                                      MAIN -->                                                                P I = DUP R> 2- + >R             IF 7                                    ELSE 8 DUP EMIT SPACE                      -3 OUT +!                            THEN                                 ELSE DUP 13 =                              IF LEAVE DROP BL 0     ( <QUIT>                 <12/18/85>239) APPENDIX                                                                        : <QUIT>                                   0 BLK ! [COMPILE] [                     BEGIN                                      CR RP! QUE( <EXPECT>               <12/16/85>237) APPENDIX                                                                        : <EXPECT>                                 OVER + OVER                             DO KEY DUP 8 = OVER 127 = OR               IF DROP DU                                                                                                                                                                                       ( bobp )                                                                                                                                                                                                                                                        ( bobp )                                                                                  ELSE DROP [COMPILE] LITERAL             THEN                                 THEN                                 AGAIN ;                                                                      MAIN -->                                                                                                                                                                                                                                                                                                         <                               IF   DUP ?FORWARD CFA ,                 ELSE CFA EXECUTE ?STCK                       IF ?STACK THEN                     THEN                                 ELSE HERE NUMBER DPL @ 1+                  IF   [COMPILE] DLITERALINK @ ,                       VOC-LINK !                           <DOVOC> ( DOES> CONTEXT ! ) ;                                                                                        MAIN -->                                                                ( <INTERPRET>            <12/18/85>238) APPENDIX                                                                        : <INTERPRET>                              BEGIN                                      -FIND                                   IF STATE @                                                                                                                                                                                       ( bobp )                                                                 ( GET:CS ?2E             <12/16/85>240) APPENDIX HEX                                                                    : GET:CS                                   ?AUX IF C013 C@ 80 AND 0= 0=            ELSE 0 THEN ;                                                                                                                                                                                                                               ( bobp ) DECIMAL -->                                            (  0:23)            TXA, CLC, 6 # ADC, TAX,                 NEXT JMP, C;                                                                 CODE !L                                    INY, 'NEW C!L JMP, C;                                                        DECIMAL            C014 LDA, 80 # AND, .A ROL,             00 # LDA, .A ROL, RTS,                                                       DECIMAL MAIN -->                                                                                                                 LDA, N STA,               BOT 1+ LDA, N 1+ STA,                   SAVWR JSR, PHA, SEC LDY,                C004 ,Y STA, 00 # LDY, SEC 2+ LDA,      N )Y STA, N 1- LDY, 0= NOT              IF, SEC 3 + LDA, N )Y STA, THEN,        PLA, TAY, C004 ,Y STA,                                  BOT LDA, N STA,                         BOT 1+ LDA, N 1+ STA,                   C013 LDA, 80 # AND,                     .A ROL, 00 # LDA, .A ROL, RTS,                                               LABEL SAVWR                     ( C!L !L                 <12/16/85>243) HEX APPENDIX                                                                    ( C!L and !L, N is switch  )                                                    CODE C!L                                   N 1- STY, BOT( SAVRD SAVWR            <12/16/85>241) HEX APPENDIX                                                                    ( must be installed in )                ( bank-switched memory )                                                        LABEL SAVRD                                                                                                                                                                                            ( bobp )                                                        ( 18:30)                                                                                                                                                                                        ( bobp )                                                                         CODE @L                                    INY, 'NEW C@L JMP, C;                                                        DECIMAL MAIN -->                                                                                                                                                                                                                                                                                                                                                                                RD JSR, PHA, SEC LDY,      C002 ,Y STA, 00 # LDY, N )Y LDA,        SEC STA, N 1- LDY, 0= NOT               IF, N )Y LDA, SEC 1+ STA, THEN,         PLA, TAY, C002 ,Y STA,                  INX, INX, RTS, C;                                                                            DECIMAL MAIN -->                                                                                                        MAIN                                    : ?2E ( -- 0/1 )                           RM-W2 FBB3 C@ 6 = R2-W2 ;    ( C@L @L                 <12/16/85>242) HEX APPENDIX                                                                    ( Y is 0 for byte, 1 for word )                                                 CODE C@L                                   N 1- STY, SAVMAIN -->                                                                                                                                                                               ( bobp )                                                        ( 18:30) ( <CMOVEL>               <12/16/85>244) HEX APPENDIX                            CODE <CMOVEL>                             TXA, CLC, 0A # ADC, XSAVE STA,          SAVRD JSR, PHA, SAVWR JSR, PHA,         SEC LDA, N 2+ STA,                      SEC 1+ LDA, N                                                                                                                                                                                        ( bobp )                                                        ( 18:30)            COMPILE </LOOP> HERE - , ; IMMEDIATE                                         MAIN -->                                                                                                                                                                INX,       PLA, TAY, C004 ,Y STA,                  PLA, TAY, C002 ,Y STA,                  NEXT JMP, C;                                                                 DECIMAL MAIN -->                                                                        S                          COMPILE <LOOP> HERE - , ; IMMEDIATE                                          : +LOOP  3 ?PAIRS                          COMPILE <+LOOP> HERE - , ; IMMEDIATE                                         : /LOOP 3 ?PAIRS                                           SAVRD 8 + JSR, PHA,                     SAVWR JSR, PHA,                         SEC 0C + LDY, C002 ,Y STA,              C004 ,Y STA, 00 # LDY, B65E JSR,        BOT LDA, SEC STA,                       BOT 1+ LDA, SEC 1+ STA, INX, ( DO LOOP +LOOP /LOOP    <12/16/85>247) APPENDIX                                                                        : DO  ?COMP                                COMPILE <DO> HERE 3 ; IMMEDIATE                                              : LOOP   3 ?PAIR( <RWTSL>                <12/16/85>245) HEX APPENDIX                            \ jumps to subroutine RWTS in DOS area  \ DOS must be resident in seg to be     \ turned on                                                                     CODE <RWTSL>     5 < ABORT" need 5 arguments"      <CMOVEL> ;                                                                   DECIMAL MAIN -->                                                       ( bobp )                                                        ( 13:10) ,                                  N 5 + INC, N 3 + INC, CLC, CS          UNTIL, C;                             DECIMAL MAIN -->                                                       ( bobp )                                                        ( 18:30) needed"    ?DOSL 6 PICK 10 * B7E9 C!               <RWTSL> DUP DISK-ERROR !                IF DISKERR THEN ;                                                            ( frseg fradr toseg toadr nbytes -- )   : CMOVEL                                   DEPTH              IF, N 1+ DEC, 0<                          IF, PLA, TAY, C004 ,Y STA,                  PLA, TAY, C002 ,Y STA,                  XSAVE LDX, NEXT JMP,              THEN, THEN, N 4 + )Y LDA,               N 2+ )Y STA, INY, 0=                 UNTIL0 GET:CS 1 XOR                B600 A00 <CMOVEL>                    THEN ;                                                                       ( seg adr slot dr sec trk r/w nsecs --) : RWTSL                                    DEPTH 8 < ABORT" 8 arguments 3 + STA,                  SEC 4 + LDA, N 4 + STA,                 SEC 5 + LDA, N 5 + STA,                 SEC 2 + LDY, C004 ,Y STA,               SEC 6 + LDY, C002 ,Y STA, 00 # LDY,     BEGIN,                                    BEGIN, N CPY, 0=            ( ?DOSL RWTSL CMOVEL     <12/16/85>246) HEX APPENDIX                                                                    ( installs DOS in other segment )       : ?DOSL                                    GET:CS 1 XOR B600 @L A501 = NOT         IF GET:CS B60                                                                                                                                                                                       ( bobp )                                                                 ( IF THEN ELSE           <12/16/85>248) APPENDIX                                                                        : IF                                       ?COMP COMPILE 0BRANCH HERE 0 , 2 ;      IMMEDIATE                                                                                                                                                                                                                                   ( bobp )                                                                            THEN ;  IMMEDIATE                                                            MAIN                                                                            -->                                                                                                                                     : REPEAT                                   >R >R [COMPILE] AGAIN                   R> R> 2- [COMPILE] THEN ;  IMMEDIATE                                         MAIN -->                                                                      STATE @ IF COMPILE <."> THEN            34 WORD DUP C@ 1+                       OVER + C@ 34 = NOT ?STREAM              STATE @                                 IF C@ 1+ ALLOT                             ELSE COUNT TYPE THEN   MMEDIATE                                                        : AGAIN  1 ?PAIRS COMPILE BRANCH           HERE - , ;  IMMEDIATE                                                        : WHILE  [COMPILE] IF 2+ ;                   IMMEDIATE                  ( ."                     <12/16/85>251) APPENDIX                                                                        : ."                                       'STREAM C@ 34 =                         IF 1 >IN +!                             ELSE         ( BEGIN UNTIL AGAIN REPEA<12/16/85>249) APPENDIX                                                                        : BEGIN  ?COMP HERE 1 ;  IMMEDIATE                                              : UNTIL  1 ?PAIRS COMPILE 0BRANCH          HERE - , ;  I                                                                                                                                                                                       ( bobp )                                                                                                                                                                                                                                                        ( bobp )                                                                         : ?NUM   DEPTH 1 < ABORT" NUMBER?" ;                                            : ?2NUM  DEPTH 2 < ABORT" NUMBERS?" ;                                           MAIN -->                                                                                0 ,        SWAP 2 [COMPILE] THEN 2 ;               IMMEDIATE                                                                    MAIN -->                                                                                                                        0 C,                       ELSE                                       34 WORD                                 DUP C@ 1+ SWAP OVER +                   C@ 34 = NOT ?STREAM ALLOT            THEN ; IMMEDIATE                                                                             : THEN                                     ?COMP 2 ?PAIRS                          HERE OVER - SWAP ! ;  IMMEDIATE                                              : ELSE                                     2 ?PAIRS COMPILE BRANCH HERE ( ABORT"                 <12/16/85>250) APPENDIX                                                                        : ABORT"                                   ?COMP COMPILE <ABORT">                  'STREAM C@ 34 =                         IF 1 >IN +!                                                                                                                                                                                         ( bobp )                                                                 ( WHERE1                 <12/18/85>252) APPENDIX                                                                        : WHERE1                                   BLK @                                   IF PAGE BLK @ DUP SCR !                    CR CR ." SECTS ! ;                                                                DECIMAL MAIN -->                                                                                               ( bobp )                                                                                                                                                                                                                                                                                                                                            DUP SYS-SECTS ! ;                                                            : APP->GR ( move appendix to gr page )     D000 2000 2000 CMOVE                    APP-DP @ F000 -                         0 MAX 0 100 U/MOD SWAP 0= 0= +          APP-S                        MAIN -->                                                                        : ?SF                                      CR CR                                   ." INITIALIZED DISK IN DRIVE A "        (Y/N)? IF <SF> THEN ;        CEBOX 4 + ! ;                                                   : SYSTEM-SIZE                              ( always include graphics page )        HERE DUP 4000 U< IF DROP 4000 THEN      COLDSTART -                             0 100 U/MOD SWAP DROP 1+     ( SAVE-FORTH             <12/16/85>255) APPENDIX                                                                        : SAVE-FORTH                               NOOP FORGET-SYS                         1 ?BOOT !  <SF> ;                                    ( FREEZE SYSTEM-SIZE     <12/16/85>253) HEX APPENDIX                                                                    : FREEZE                                   VOC-LINK @  ICEBOX !                    HERE        ICEBOX 2+ !                 CURRENT @ @ IAPP-SECTS @ RWTS                   THEN 0 ?BOOT ! ;                                                             DECIMAL MAIN -->                                                       ( bobp )                                                                                                                                                                                                                                                        ( bobp )                                                                            0F + 10 /MOD B715 C! B71A C!            B600 6 0 0 0 0 0A RWTS                  COLDSTART 6 0 0 1 0 SYSTEM-SIZE RWTS    APP-SECTS @                             IF F000 6 0                                SYS-SECTS @ 10 + SECS/TRK /MOD          0            CR HERE C@ DUP >R -                     HERE R@ + 1+                            C@ BL = IF 1- THEN SPACES               R> 0 DO 94 EMIT LOOP ;                                                       MAIN -->                                        -SECTS ! THEN              [COMPILE] FORTH DEFINITIONS             DOSWR DOSRD 10 CMOVE                    FREEZE COLDSTART B748 !                 SYSTEM-SIZE DUP B7E0 C!                 COLDSTART 0 100 U/MOD SWAP DROP            OVER + B7E7 C!            CR# "  DUP .                  >IN @ 1023 MIN DUP >IN-ERR !            C/L /MOD  ." LINE# "  DUP .             C/L * ROT BLOCK +                       CR CR C/L -TRAILING TYPE                >IN @ 1023 > +                       ELSE >IN @ THEN              ( <SF>                   <12/16/85>254) HEX APPENDIX                            : <SF>  NOOP                               FORGET-SYS EMPTY-BUFFERS                [COMPILE] MAIN                          ?BOOT @ IF APP->GR                         ELSE 0 APP                                                                                                                                                                                       ( bobp )                                                                 ( LOAD THRU -->          <12/16/85>256) APPENDIX                                : LOAD                                     DUP 0= ABORT" UNLOADABLE" DUP .         BLK @ >R >IN @ >R                       BLK ! 0 >IN !                           INTERPRET                                                                                                                                                                                           ( bobp )                                                                 L +           DUP                                  LOOP DDROP ;                                                                                                         279  00 BYTE:IN BLKMAX  !NEW                                                    MAIN -->        DECIMAL MAIN -->                                                                                                                                                                                                                                        MAX                                                             : BLK->CRT                                 DUP OFFSET @ + 0<                       ABORT" NEGATIVE SCRN NO."               BLOCK DUP NLINS +EDY + +EDY             DO I L#ADDR 0 C/L L->CRT40 C/SR, 03 # AND,              04 # ORA, BOT 1+ STA,                   BOT LDA, 18 # AND,                      CS IF, 7F # ADC, THEN, BOT STA,         .A ASL, .A ASL, BOT ORA, BOT STA,       NEXT JMP, C;                                                         ( BLK->CRT               <12/16/85>259)                                         APPENDIX                                 24 CONSTANT NLINS                        0 CONSTANT +EDY                         0 CONSTANT +EDX                           VARIABLE BLK( L#ADDR                 <12/16/85>257) APPENDIX HEX                                                                    ( LINENO. ---, CRTADDR )                                                        CODE L#ADDR                                BOT LDA, .A L                                                                                                                                                                                       ( bobp )                                                                                                 MAIN -->                                                                                                                                               ( bobp )                                                                               N )Y STA, DEY, 0<                    UNTIL, NEXT JMP, C;                                                          MAIN DECIMAL -->                                                                                                                        : EDIT->LOAD  LOAD ."  OK" QUIT ;                                               : -->                                      ?LOADING 0 >IN ! 1 BLK +!               BLK @ DUP SCR ! .                       ;  IMMEDIATE                                 N 2 + STA,                 SEC 5 + LDA, N 3 + STA,                 SEC 3 + LDA, N 1 + STA,                 CLC, SEC LDA, SEC 2+ ADC, N STA,        BOT LDY, TXA, 08 # ADC, TAX, DEY,       BEGIN,                                     N 2+ )Y LDA, 80 # EOR,                               R> >IN ! R> BLK ! ;                                                          : THRU ( first last -- )                   1+ SWAP                                 DO I LOAD LOOP ;                                                     ( L->CRT40               <12/16/85>258) APPENDIX HEX                                                                    ( MEMADDR L#ADDR DELTX COUNT ---, )                                             CODE L->CRT40                              SEC 4 + LDA,                                                                                                                                                                                        ( bobp )                                                                 ( L L40 L64 LL LN LB     <12/16/85>260) APPENDIX                                : <L>                                      PAGE BLKMAX @ OVER <                    ABORT" BEYOND BLKMAX" DUP SCR ! DUP     0 0 XYTAB 3 .R BLK->CRT                 0 22 XYTAB ;                                                                                                                                                                                        (  PAI )                                                                                                                 : WHO"                                     'NEW .HR:MIN 3 + DUP 5 BL FILL          34 WORD COUNT 5 MIN ROT SWAP CMOVE ;                                         : SETDATE  100 /MOD DROP                   YEAR               DUP 78 = OVER 89 = OR                UNTIL 89 =                              >R DDROP R> ;                        MAIN                                    -->                                                                                                             : .M/D/Y                                   MONTH @ 2 .R ." /"                      DAY @ 2 .R ." /"                        YEAR @ 2 .R ;                                                                : .HR:MIN ."  PAI " ;           UFFERS ;                                                        : (Y/N)?                                   ."  (Y/N)? " XY@ 0                      BEGIN                                      DROP                                    DDUP XYTAB KEY DUP EMIT   ( .M/D/Y SETDATE ETC.    <12/17/85>263) APPENDIX                                                                          VARIABLE YEAR                           VARIABLE DAY                            VARIABLE MONTH                                        ( COPY <Y/N>?            <12/21/85>261) APPENDIX                                                                        : COPY                                     ?2NUM OFFSET @ +                        SWAP BLOCK 2- !                         UPDATE SAVE-B                                                                                                                                                                                       ( bobp )                                                                                                                                                                                                                                                        ( bobp )                                                                               ?TERMINAL IF LEAVE THEN              LOOP CR ;                                                                    MAIN -->                                                                                                                                                                        : L   L40 ;                             : LL  SCR @ L ;                         : LN  SCR @ 1+ L ;                      : LB  SCR @ 1- L ;                                                              MAIN -->                        : LIST                                     CR DUP SCR ! ." SCR #" U.               C/L 40 = IF 24 ELSE 16 THEN             0 DO                                       CR I 3 .R SPACE                         I SCR @ .LINE                                                                             : L40                                      24 'NEW NLINS ! 0 'NEW +EDY !           40 'NEW C/L !   0 'NEW +EDX !           MODE40                                  DEPTH 0> IF <L> THEN ;       ( <LINE> .LINE LIST      <12/16/85>262) APPENDIX                                                                        : <LINE>  BLOCK SWAP C/L * + C/L ;                                              : .LINE  <LINE> -TRAILING TYPE ;                        ! DAY ! MONTH ! ;                                                       MAIN -->                                                                                                       ( bobp )                                                                 ( PAUSE                  <12/21/85>264) APPENDIX                                                                        : PAUSE                                    ?TERMINAL                               IF 1000 0 DO LOOP                          BEGIN ?TEROP 2 SPACES                        CURRENT @ NFA <INV> ID. <NORM> ;                                             MAIN -->                                                               ( bobp )                                                                                        DUP <<WORDS>>                     THEN THEN DROP                          ?TERMINAL IF LEAVE THEN              2 +LOOP                              ELSE                                       CR LFA <VL>                          THEN            CR  0 PRIOR !  #VOCS 2* 0               DO CONTEXT I + @ DUP                       IF PRIOR @ OVER -                          IF DUP PRIOR !                             DUP NFA ID. SPACE                 THEN THEN DROP                       2 +LO                           [COMPILE] '  DUP 'X =                   IF DROP 0 PRIOR !                          #VOCS 2* 0                              DO CONTEXT I + @ DUP                       IF PRIOR @ OVER -                          IF DUP PRIOR !                              : <ONLY>                                   CONTEXT #VOCS 2* 0 FILL                 [COMPILE] ROOT  CONTEXT @               #VOCS 2* 2- CONTEXT + ! <ALSO> ;                                             : <ORDER>                       ( <WORDS> <VLIST>        <12/17/85>267) APPENDIX                                                                        : <WORDS>                                  CONTEXT @ <<WORDS>> ?TERMINAL DROP ;                                         : <VLIST>       ( <ONLY> <ALSO>          <12/17/85>265) APPENDIX                                \ based on #VOCS = 8                                                            : <ALSO> ( do not overwrite last voc )     CONTEXT DUP 2+ #VOCS 2* 4 - BMOVE ;                                                  : <<WORDS>> ( voc -- ) DUP .NF @ <VL> ;                                         MAIN -->                                                               ( bobp )                                                                                                                                                                                                                                                        (  PAI )                                                                               DUP 'NEW ROOT =                         OVER @ 0=  OR                           PAUSE QTERM  OR NOT                  WHILE                                      DUP .NF @                            REPEAT DROP CR ;                                     21 00 BYTE:IN DAY   !NEW                85 00 BYTE:IN YEAR  !NEW                                                        DECIMAL MAIN -->                                                                                                                31 AND OUT @ + 5 +               C/L > IF CR THEN                     SPACE SPACE ID.                      THEN ;                                                                       : <VL> ( lfa -- )                          BEGIN                        MINAL UNTIL                   2000 0 DO LOOP                       THEN ;                                                                                                                                                       12 00 BYTE:IN MONTH !NEW        ( .NF <VL> <<WORDS>>     <12/17/85>266) APPENDIX                                : .NF ( nfa -- )                           DUP 2+ @ 41089 =  ( dummy voc link )    IF CR <INV> NFA ID. <NORM> CR           ELSE                                       2+ DUP C@ ?TERMINAL DROP ;                                                        MAIN -->                                                                                                       ( bobp )                                                                 ( WHERE                  <12/17/85>268) -->                                     APPENDIX                                                                        : WHERE                                    PAGE SCR @ DUP BLK->CRT BLOCK           DUP >IN-ERR @                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        -->                                                                             CR ." any key to continue: "            KEY DROP CR CR                                                                                                                  PRET  REPLACED:BY                               <INTERPRET>                                             00 BYTE:IN <DOVOC> REPLACED:BY <;CODE>                                          -->                                                                                             STATUS?                                                                         CREATE EXTRA STATUS?                                                            16384 68 + DPNEW !                                                      ( forward references     <12/21/85>271)                                         00 BYTE:IN EXPECT  REPLACED:BY <EXPECT>                                         00 BYTE:IN QUIT  REPLACED:BY <QUIT>                                             00 BYTE:IN INTER( EXTRA                  <12/18/85>269) MAIN                                                                            CR CR                                   ." Should not exceed 8192 (2000 hex):"  2BEEP 2BEEP 2BEEP 2BEEP                                                                                                                                                                                                                        ( bobp )                                                                 XYTAB SCR @ ." SCR = " . ;                                              MAIN -->                                                                                                       ( bobp )                                                                                                                                                                                                                                                                                                                                            REPEAT 1+ ROT -                         C/L /MOD +EDY + L#ADDR SWAP +EDX +      ROT @ 0                                 DO DDUP + I +                              DUP C@ 128 XOR SWAP C!               LOOP DROP                               0 22 T"> REPLACED:BY FORTH   14 BYTE:IN <ABORT"> REPLACED:BY                                     DEFINITIONS 16 BYTE:IN <ABORT"> REPLACED:BY QUIT                                            DECIMAL -->                                                              + 1-                      DUP C@ BL = IF 1- THEN                  PAD 2- SWAP 0 3 PICK !                  BEGIN                                      DUP C@ BL = 0=                       WHILE                                      1 3 PICK +! 1-            ( forward references     <12/20/85>270) HEX                                                                             04 BYTE:IN <ABORT"> REPLACED:BY                                       @APPENDIX 06 BYTE:IN <ABORT"> REPLACED:BY WHERE1  12 BYTE:IN <ABOR                                                                                                                                                                                       (  PAI )                                                                 ( forward references     <12/21/85>272)                                         00 BYTE:IN VOCABULARY  REPLACED:BY                              <VOCABULARY>                                            00 BYTE:IN FORGET  REPLACED:BY <FORGET>                 T   0E BYTE:IN CONTEXT !NEW                                             DECIMAL -->                                                                                                    (  PAI )                                                                                                                 ( Hook in appendix between )            ( APP-LINK1 and APP-LINK2 )                                                     APP-LAST @ DELTA -                         COMP-SEG LFA:IN APP-LINK2 !L                 NEW     LFA:IN ALSO      'NEW   ROOT   !NEW     LFA:IN <DODOES>  LFA:IN <DOVOC> !NEW                                            ( set up initial search order )         'NEW FORTH  00 BYTE:IN CONTEXT !NEW     'NEW FORTH  02 BYTE:IN CONTEXT !NEW     'NEW ROOo appendix )                                                    APP-DPNEW @                                COMP-SEG 'NEW APP-DP !L                                                      APP-LAST @ DELTA -                         COMP-SEG 'NEW APP-LATEST !L                          ( zap nfa of null word; make immediate) 80C0 NFA:IN  X !NEW                                                             ( fix vocabulary links )                00               LFA:IN ROOT   !NEW     'NEW   ROOT      LFA:IN LIT    !( APPENDIX ADJUSTMENTS   <12/17/85>275)                                         ( allow initial APPENDIX )                                                      0 COMP-SEG 'NEW OLD-DP !L                                                       ( set pointers t( forward references     <12/21/85>273) HEX                                                                             ( resolve null word )                   08   BYTE:IN X  REPLACED:BY  STATE      0C   BYTE:IN X  REPLACED:BY  ?STREAM                                                                                                                                                                                                           (  PAI )                                                                                                                                                                                                                                                        (  PAI )                                                                                                                 LAST @ DELTA -  00 BYTE:IN FORTH  !NEW                                          DECIMAL FORTH DEFINITIONS               -->                                                                                             00 BYTE:IN ALSO   REPLACED:BY <ALSO>                                                                                    DECIMAL -->                                                                                                                                             DPNEW @ DELTA - 02 BYTE:IN ICEBOX !NEW                                          LAST @ DELTA -  04 BYTE:IN ICEBOX !NEW                                                                                  ( set up latest )                                       00 BYTE:IN WORDS  REPLACED:BY <WORDS>                                           00 BYTE:IN VLIST  REPLACED:BY <VLIST>                                           00 BYTE:IN ONLY   REPLACED:BY <ONLY>                                    ( ADJ VOC ETC,           <12/21/85>274) HEX                                                                             ( set up initial boot parameters )                                              'NEW FORTH 04 + 00 BYTE:IN ICEBOX !NEW                                                  LFA:IN APP-LINK1                           COMP-SEG APP-START !L                -->                                                                    ( bobp )                                                                 ( FINISHED               <12/18/85>276)                                         CR CR 2BEEP                             ." Compilation finished." CR CR                                                 STATUS?  CR                                                                                                                                                                                                                                    ( bobposeg toaddr count -- )                                          : CMOVEZL                                  ASSEMBLER ZCNT !                        'NEW <CMVZL> 38 + ! SWAP                'NEW <CMVZL> 32 + ! <CMVZL> ;                                                                                                                                                                                                                                                                                                        ( CMOVEZL                <12/11/85>279) HEX APPENDIX                                                                    ( moves data from/to either seg )       ( within 0-1FF or D000-FFFF area)       ( <returns to orig z-pg> )              ( frseg fraddr t(                        <12/17/85>277) EXIT                                    : UWITHIN ( n lo hi -- 0/1 )               3 PICK U< >R U< R> OR NOT ;                                                                                                          L,                                  HERE 0A - INC, HERE 07 - INC,         AGAIN, C;                             DECIMAL MAIN -->                                                       ( 13:33)                                                        (  0:00)                                                                                                                                                                                        ( bobp )                                                                               IF, ZCNT 1+ DEC,                          0< IF, C0EE STA, POPTWO JMP,          THEN, THEN,                             C0AA STA, 2222 ,Y LDA, C0BB STA,        3333 ,Y STA,                            INY, 0=                               UNTI          DECIMAL                                 CR CR                                                                         QUIT                                                                                                                                                      IF, 09 # LDA, ELSE, 08 # LDA,           THEN, HERE 1D + STA, CLC,               SEC LDA, 08 # ADC, HERE 1B + STA,       BOT LDA, 08 # ADC, HERE 1A + STA,       BEGIN,  BEGIN,                              ZCNT CPY, 0=                                        CR ." 'EXTRA' is at "                                                           COMP-SEG 'NEW EXTRA                     DUP                                     DECIMAL . ." ("                         HEX     . ." hex)"            ( <CMVZL>                <12/11/85>278) HEX APPENDIX                              LABEL ZCNT 0 C, 0 C,                  ( <z-pg cannot be used by this move> )  ( frseg toseg -- )                      CODE <CMVZL>                              C013 LDA, 0<                                                                                                                                                                                         ( 13:33) DECIMAL -->                                            ( 14:28) 