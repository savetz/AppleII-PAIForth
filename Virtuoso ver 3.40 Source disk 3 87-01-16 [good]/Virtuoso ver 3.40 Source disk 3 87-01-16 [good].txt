-------------------------------------------- SCREEN 000
( NOTES                  < 4/26/85>140) 
                                        
EXIT                                    
                                        
This disk contains part 3 of the        
source code for OpDB ver 3.00A          
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                               (  RLP ) 
-------------------------------------------- SCREEN 001
\ LOADBLOCK              < 2/22/86>141  
                                        
[FORTH]                                 
                                        
\   233 LOAD \ <IQEMIT> & set vecotrs   
150 187 THRU \ branching/menu words     
188 229 THRU \ remaining words          
147 149 THRU \ opdb-logo patch unpatch  
146     LOAD \ set defaults             
                                        
263 279 THRU \ message loader           
                                        
[FORTH]                                 
MARK-FORGET                             
WRITE-LOADER                            
UNPATCH                                 
CR CR ." STILL NO FONT LOADED" CR CR    
                                        
                                        
                                        
                                        
                                        
                                        
                               \ FAH    
-------------------------------------------- SCREEN 006
\ DEFAULTS               < 2/22/86>146  
                                        
                                        
1 DX' !                                 
0 DY' !                                 
11 P/L !                                
9 M-BLINK !                             
32 M-CHAR !                             
0 M-ON !                                
0 M-OFF !                               
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                               \ FAH    
-------------------------------------------- SCREEN 007
( <OPDB-LOGO>            < 1/20/87>147) 
APPENDIX                                
                                        
: <OPDB-LOGO>                           
   <LOGO>                               
   ." OpDB version 3.41A "              
   [ MONTH @ DAY @ YEAR @ ]             
   LITERAL LITERAL LITERAL              
   0 .R 45 EMIT 0 .R 45 EMIT 0 .R       
   ."  (fah) " CR ;                     
                                        
' <OPDB-LOGO> CFA ' LOGO !              
                                        
MAIN                                    
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                               (  PAI ) 
-------------------------------------------- SCREEN 008
( UNPATCH                <12/21/85>148) 
EXIT                                    
[FORTH]                                 
                                        
: 'CFA \ -- ADR ; Return or compile     
  \ cfa of next word in input stream    
  -FIND NOT ABORT" Not found"           
  DROP CFA [COMPILE] LITERAL            
; IMMEDIATE                             
                                        
: UNPATCH                               
  'CFA NOOP         ' GET-A&E !         
  'CFA NOOP         ' GET-UTIL !        
  'CFA NOOP         ' GET-FPA !         
  'CFA NOOP         ' GET-MLOADER !     
  'CFA NOOP         ' <FORGET-SYS> !    
  'CFA <FORGET-SYS> ' SAVE-FORTH !      
  CR CR                                 
  ." Patches removed" CR CR             
;                                       
                                        
                                        
                                        
                               ( bobp ) 
-------------------------------------------- SCREEN 009
( PATCH                  <12/21/85>149) 
EXIT                                    
[FORTH]                                 
                                        
: PATCH                                 
  'CFA <PUT-LDR> ' GET-A&E !            
  'CFA <PUT-LDR> ' GET-UTIL !           
  'CFA <PUT-LDR> ' GET-FPA !            
  'CFA <PUT-LDR> ' GET-MLOADER !        
  'CFA MYFS      ' <FORGET-SYS> !       
  'CFA WRITE-LOADER ' SAVE-FORTH !      
  CR CR                                 
  ." Patches installed" CR CR           
;                                       
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
-------------------------------------------- SCREEN 011
\ INTER-BRANCH           <12/18/85>151  
[LOADER]                                
\ pointer for SET-IBRANCH, which is     
\ called by the final END in a SCREEN   
XVAR ^RESOLVE                           
                                        
\ given the address of a word created   
\ by inter screen branch word either    
\ increase the chain or compile the     
\ proper value                          
                                        
X: INTER-BRANCH \ ADDR -- ;             
  DUP C@ \ has the label been resolved? 
  IF \ yes, compile in the value        
    1+ @ ,OPDB                          
  ELSE \ no, link the list              
    EXEC DEP @ OVER 1+ @ LOADER ,OPDB   
    SWAP 1+ !                           
  THEN X;                               
                                        
                                        
                                        
                                        
                               \ FAH    
-------------------------------------------- SCREEN 012
\ MAKE-IBRANCH           <12/18/85>152  
[LOADER]                                
\ creates the word which is used to     
\ maintain the screen names used        
\ returns the PFA of the newly created  
\ word                                  
                                        
X: MAKE-IBRANCH \ -- pfa ;              
  GET-WORD CHECK-VAR-NAME UNGET-WORD    
  HERE ' SCR-NAMES INVOCAB?             
  ABORT" Screen already defined"        
  [SCR]                                 
  CREATE HERE                           
     0 C, 0 , X;                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                               \ FAH    
-------------------------------------------- SCREEN 013
\ RESLOVE-IBRANCH        <12/18/85>153  
                                        
[LOADER]                                
                                        
  XVAR SCR-BEG \ see ahead              
                                        
\ resolves all forward references to    
\ a screen to the value val             
X: RESOLVE-IBRANCH \ val ^first -- ;    
  ?DUP ( anything there )               
  IF                                    
   BEGIN                                
    DUP EXEC OPDB @DISK ( next in link )
    SWAP 3 PICK                         
    SWAP !DISK  ( !value )              
    DUP 0=                              
   UNTIL                                
   DDROP                                
  ELSE DROP ( val )                     
  THEN X;                               
                                        
                                        
                                        
                               \ FAH    
-------------------------------------------- SCREEN 014
\ SCREEN                 <12/18/85>154  
\ use: SCREEN name                      
[KEYWORDS]                              
: SCREEN                                
  LOADER -INSCR?                        
  ^RESOLVE @                            
  ABORT" One name per screen"           
  GET-WORD ' SCR-NAMES VFIND?           
   \ is name already defined?           
  IF \ yes, set up to resolve it        
    DUP C@ ( resolved already? )        
    ABORT" Already resolved"            
    ^RESOLVE !                          
  ELSE \ no, create it resolved         
    UNGET-WORD MAKE-IBRANCH             
    ^RESOLVE !                          
  THEN ;                                
                                        
                                        
                                        
                                        
                                        
                                        
                               \ FAH    
-------------------------------------------- SCREEN 015
\ SET-IBRANCH            <12/18/85>155  
[LOADER]                                
\ use the value of SCR-BEG to set       
\ all branches to this screen           
                                        
X: SET-IBRANCH \ -- ;                   
  ^RESOLVE @                            
  IF SCR-BEG @ 2- ^RESOLVE @ 1+ @       
    RESOLVE-IBRANCH                     
    1 ^RESOLVE @ C!                     
    SCR-BEG @ 2- ^RESOLVE @ 1+ !        
    0 ^RESOLVE !                        
  THEN X;                               
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                               \ FAH    
-------------------------------------------- SCREEN 016
\ CHECK-INTER            <12/18/85>156  
[LOADER]                                
\ checks to make sure that all branches 
\ have been resolved                    
                                        
X: CHECK-INTER                          
  CR CR                                 
  ' SCR-NAMES @ \ get to of vocab       
  BEGIN                                 
    DUP ' ROOT =                        
    PAUSE ?TERMINAL OR NOT              
  WHILE ( LFA )                         
    DUP 2+ PFA C@ 1 = NOT               
    IF CR 3 SPACES                      
       DUP 2+ ID. ." not resolved" THEN 
    @ ( POINT TO NEXT )                 
  REPEAT                                
  CR CR X;                              
                                        
                                        
                                        
                                        
                                        
                               \ FAH    
-------------------------------------------- SCREEN 017
\ <INTER>                <12/18/85>157  
[LOADER]                                
                                        
\ common code for GOTO and GOSUB        
\ and others                            
: <INTER> \ -- ;                        
   LOADER GET-WORD ' SCR-NAMES VFIND?   
    \ is name already defined?          
   IF \ yes, compile call               
     ( pfa ) INTER-BRANCH               
   ELSE \ no, create it                 
      UNGET-WORD MAKE-IBRANCH           
      EXEC DEP @ SWAP 1+ !              
       \ set pointer to this item       
      0 LOADER ,OPDB ( argument )       
   THEN ;                               
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                               \ FAH    
-------------------------------------------- SCREEN 018
\ GOTO                   <12/18/85>158  
[EXEC]                                  
\ 0 CONSTANT EXIT-SCR?                  
                                        
: CHECK-BRANCH \ N -- N ; errs if bad   
  ?DUP 0=                               
  RUN-ERR" Branch not set" ;            
                                        
\ ARG: addr ,                           
EXCODE: \ -- ;                          
  @2ARG                                 
  CHECK-BRANCH DEP !                    
  READ-SCR ( read the screen )          
\ 1 TO EXIT-SCR?                        
EX;                                     
                                        
[KEYWORDS]                              
\ use: GOTO name                        
: GOTO \ -- ;                           
  LOADER INSCR?                         
  !EXCODE <INTER> ;                     
                                        
                                        
                               \ FAH    
-------------------------------------------- SCREEN 019
\ GOSUB                  <12/18/85>159  
                                        
\ ARG: addr ,                           
EXCODE: \ -- ;                          
  GSTACK SDEPTH GS-MAX 2- >             
  RUN-ERR" Too many GOSUB's"            
  @2ARG                                 
  CHECK-BRANCH DEP !                    
  EP @ GSTACK PUSH                      
  LAST-DEP @ GSTACK PUSH                
  READ-SCR ( read the screen )          
\ 1 TO EXIT-SCR? ( exit and restart )   
EX;                                     
                                        
[KEYWORDS]                              
\ use: GOSUB name                       
: GOSUB \ -- ;                          
  LOADER INSCR?                         
  !EXCODE <INTER> ;                     
                                        
                                        
                                        
                                        
                               \ FAH    
-------------------------------------------- SCREEN 020
\ RETURN                 <12/18/85>160  
                                        
\ ARG: addr ,                           
EXCODE: \ -- ;                          
  GSTACK SDEPTH 2 <                     
  RUN-ERR" Too many RETURNS"            
  GSTACK POP DEP !                      
  READ-SCR ( flag ) DROP                
  GSTACK POP EP !                       
EX;                                     
                                        
[KEYWORDS]                              
: RETURN                                
   LOADER INSCR?                        
   !EXCODE                              
;                                       
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                               \ FAH    
-------------------------------------------- SCREEN 021
\ ONADR DO-ON            <12/18/85>161  
[EXEC]                                  
XVAR ONADR \ temp var for on            
                                        
\ get val of nth word in list           
\ args:  adr! , adr2 , .... adrN , -1 , 
X: DO-ON \ N -- adr ;                   
  0 ONADR !                             
  BEGIN @2ARG DUP -1 = NOT              
  WHILE SWAP 1- DUP 0= \ at proper arg  
   IF SWAP ONADR !                      
   ELSE SWAP DROP THEN                  
  REPEAT                                
  DDROP ONADR @ ?DUP 0=                 
  RUN-ERR" ON index in err" X;          
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                               \ FAH    
-------------------------------------------- SCREEN 022
\ ON..GOTO ON..GOSUB     <12/18/85>162  
                                        
\ ON..GOSUB excode                      
EXCODE: \ N -- ;                        
  GSTACK SDEPTH GS-MAX 2- >             
  RUN-ERR" Too many GOSUB's"            
  DO-ON CHECK-BRANCH DEP !              
  EP @ GSTACK PUSH                      
  LAST-DEP @ GSTACK PUSH                
  READ-SCR EX;                          
                                        
[LOADER]                                
X: !ONGOSUB !EXCODE X;                  
                                        
\ ON..GOTO excode                       
EXCODE: \ N -- ;                        
  DO-ON CHECK-BRANCH DEP !              
  READ-SCR ( read the screen )          
EX;                                     
                                        
[LOADER]                                
X: !ONGOTO !EXCODE X;                   
                                        
                               \ FAH    
-------------------------------------------- SCREEN 023
\ ON..GOTO ON..GOSUB     <12/18/85>163  
[LOADER]                                
XCREATE "GOTO LIT" GOTO"                
XCREATE "GOSUB LIT" GOSUB"              
                                        
\ use: ON expr GOTO scr1 scr2 scr3      
\ use: ON expr GOSUB scr1 scr2 scr3     
[KEYWORDS]                              
: ON \ -- ;                             
  LOADER INSCR?                         
  TYPES INT LOADER GET-EXPR             
  GET-WORD DUP "GOTO $=                 
  IF DROP !ONGOTO                       
  ELSE "GOSUB $= NOT                    
   ABORT" GOTO or GOSUB expected"       
   !ONGOSUB THEN                        
  BEGIN GET-WORD                        
   LOADER ' KEYWORDS INVOCAB? NOT       
  WHILE UNGET-WORD <INTER>              
  REPEAT                                
  UNGET-WORD                            
  -1 ,OPDB ; ( ending marker )          
                                        
                               \ FAH    
-------------------------------------------- SCREEN 024
( Intra branching notes  < 9/18/85>161) 
EXIT EXIT EXIT EXIT EXIT EXIT EXIT EXIT 
                                        
The intra-screen branching words will   
use a scheme that is much like the way  
that forth itself deals with branching  
operators.                              
                                        
All forward references to an END will   
be delt with in the following manner.   
                                        
The first occurence of a DONE will put  
the address of its argument into the    
variable DONE. All rest of the DONEs,   
before the END, will compile the old    
value of DONE into its argument then    
place the address of its argument in    
DONE. END will then go down this list   
resolving all occurences to the value   
which is now known                      
                                        
                                        
                                        
                               ( FAH  ) 
-------------------------------------------- SCREEN 025
\ !BRANCH                <12/18/85>165  
                                        
\ this is the OPDB equal to BRANCH      
\ ARG: offset , offset is from the      
\      begining of the next             
\      instruction, and is relative     
EXCODE: \ -- ;                          
   @2ARG EP +! CLEANUP EX;              
                                        
[LOADER]                                
   \ stores the branch excode and       
   \ returns the disk address of the    
   \ argument                           
X: !BRANCH \ -- adr ; branches always   
    !EXCODE                             
    EXEC DEP @ LOADER                   
    0 ,OPDB X;                          
                                        
                                        
                                        
                                        
                                        
                                        
                               \ FAH    
-------------------------------------------- SCREEN 026
\ !0BRANCH !1BRANCH      <12/18/85>166  
                                        
\ ARG: offset                           
EXCODE: \ T/F -- ; if false, branch     
  IF @2ARG DROP ELSE @2ARG EP +!        
  THEN CLEANUP EX;                      
                                        
[LOADER]                                
X: !0BRANCH \ -- adr ; branchs if false 
  !EXCODE EXEC DEP @ LOADER 0 ,OPDB X;  
                                        
\ ARG: offset                           
EXCODE: \ T/F -- ;                      
  NOT IF @2ARG DROP ELSE @2ARG EP +!    
  THEN CLEANUP EX;                      
                                        
[LOADER]                                
X: !1BRANCH \ -- adr ; branchs if true  
  !EXCODE EXEC DEP @ LOADER 0 ,OPDB X;  
                                        
                                        
                                        
                                        
                               \ FAH    
-------------------------------------------- SCREEN 027
\ RESOLVE RESOLVE-EP     <12/18/85>167  
[LOADER]                                
\ given A1, the location of an argument 
\ for a branch, make it branch to A2    
X: RESOLVE \ A1 A2 -- ;                 
   OVER - 2- SWAP EXEC OPDB !DISK X;    
                                        
\ make A1 branch to current value       
\ of DEP                                
X: RESOLVE-EP \ A1 -- ;                 
   EXEC DEP @ LOADER RESOLVE X;         
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                               \ FAH    
-------------------------------------------- SCREEN 028
\ Branching stack words  <12/18/85>168  
                                        
[LOADER]                                
                                        
  XCREATE BSTK                          
     BS-MAX 2* 2+ ALLOT                 
                                        
: @BSTK \ -- N ;                        
  BSTK POP ;                            
                                        
: !BSTK \ N -- ;                        
  BSTK PUSH ;                           
                                        
: BPICK \ N -- M ; returns N'th item    
  BSTK SPICK ;                          
                                        
' BSTK CFA ' BDEPTH ! ( set up BDEPTH ) 
                                        
                                        
                                        
                                        
                                        
                                        
                               \ FAH    
-------------------------------------------- SCREEN 029
\ menu tables            <12/18/85>169  
[EXEC]                                  
                                        
\ holds data for each item in the menu  
XCREATE MITEMS                          
   MAX-#MITEMS 8 * ALLOT                
   ( x , y , place-adr , run-adr , )    
                                        
\ holds data for each special menu key  
XCREATE MKEYS                           
   MAX-#MKEYS 3 * ALLOT                 
   ( key C, adr , )                     
                                        
\ given item number, and offset into the
\ item return the addres (n starts at 1)
: ^MITEMS \ n o -- addr ;               
  SWAP 1- 8 * MITEMS + + ;              
                                        
\ given item number return starting     
\ address (n starts at 1)               
: ^MKEYS \ n -- addr ;                  
  1- 3 * MKEYS + ;                      
                                        
                               \ FAH    
-------------------------------------------- SCREEN 030
\ START-MENU             < 2/22/86>170  
[EXEC]                                  
  XVAR >CONT-MENU 2 ALLOT               
  XVAR NEXT-EP 2 ALLOT                  
  VARIABLE #MITEMS                      
  VARIABLE #MKEYS                       
                                        
EXCODE: \ -- clear menu                 
   MITEMS MAX-#MITEMS 8 * 0 FILL        
   MKEYS MAX-#MKEYS 3 * 0 FILL          
   0 #MITEMS ! 0 #MKEYS !               
   1 M-ITEM# ! CLEANUP                  
   LAST-DEP @ >CONT-MENU 2+ !           
EX; ( set flag for CONT-MENU )          
                                        
[KEYWORDS]                              
\ BSTK: -- 0 5 ;                        
: START-MENU                            
   EXEC #MITEMS @ -1 = NOT              
   ABORT" Can't nest menus"             
   LOADER INSCR? !EXCODE                
   0 EXEC #MITEMS ! 0 #MKEYS !          
   LOADER 0 !BSTK 5 !BSTK ;             
                               \ FAH    
-------------------------------------------- SCREEN 031
\ END-MENU               <12/18/85>171  
\ this word clears flags so that        
\ another menu may be started           
\ must be called by every menu word     
                                        
[LOADER]                                
\ BSTK: 0 5 -- ;                        
X: END-MENU \ -- ;                      
  INSCR? @BSTK 5 = NOT                  
  ABORT" Missing START-MENU"            
  @BSTK DROP                            
  -1 EXEC #MITEMS ! X;                  
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                               \ FAH    
-------------------------------------------- SCREEN 032
\ MENU-ITEM              <12/18/85>172  
                                        
EXCODE: \ -- ;                          
  #MITEMS @ 1+ DUP MAX-#MITEMS >        
  RUN-ERR" Too many items in menu"      
  DUP #MITEMS !                         
  CURX @ OVER 0 ^MITEMS !               
  CURY @ SWAP 2 ^MITEMS !               
  CLEANUP EX;                           
                                        
[LOADER]                                
\ Checks if in a menu structure         
X: INMENU? \ -- ;                       
  INSCR? EXEC #MITEMS @ -1 =            
  ABORT" After START-MENU only" X;      
                                        
[KEYWORDS]                              
\ BSTK: -- ;                            
: MENU-ITEM \ -- ;                      
  LOADER INMENU? EXEC                   
  #MITEMS @ 1+ DUP MAX-#MITEMS >        
  ABORT" Too many items in menu"        
  #MITEMS ! LOADER !EXCODE ;            
                               \ FAH    
-------------------------------------------- SCREEN 033
( IF-PLACED              < 2/22/86>173) 
                                        
\ arg: branch offset ,                  
\ sets table then branchs around        
EXCODE:                                 
  @2ARG ( get arg, advance EP)          
  EP @ #MITEMS @ 4 ^MITEMS !            
   \ set table                          
  EP +! ( skip around )                 
  CLEANUP EX;                           
                                        
[LOADER]                                
\ X: MCHECK \ -- ; check for menu if    
\   LOADER INMENU? 1 BPICK 5 = NOT      
\   ABORT" Not within IF..ENDIF's" X;   
                                        
[KEYWORDS]                              
\ BSTK: 0 5 -- 0 5 adr 6 ;              
: IF-PLACED \ -- ;                      
   LOADER INMENU?                       
   !EXCODE EXEC DEP @ LOADER 0 ,OPDB    
   ( adr ) !BSTK 6 !BSTK ;              
                                        
                               ( FAH  ) 
-------------------------------------------- SCREEN 034
( IF-SELECTED            < 2/22/86>174) 
                                        
\ arg: branch offset ,                  
\ sets table then branchs around        
EXCODE:                                 
  @2ARG ( get arg, advance EP)          
  EP @ #MITEMS @ 6 ^MITEMS !            
   \ set table                          
  EP +! ( skip around )                 
  CLEANUP EX;                           
                                        
[KEYWORDS]                              
\ BSTK: 0 5 -- 0 5 adr 6 ;              
: IF-SELECTED \ -- ;                    
   LOADER INMENU?                       
   !EXCODE EXEC DEP @ LOADER 0 ,OPDB    
   ( adr ) !BSTK 6 !BSTK ;              
                                        
                                        
                                        
                                        
                                        
                                        
                               ( FAH  ) 
-------------------------------------------- SCREEN 035
( IF-KEY                 < 2/22/86>175) 
                                        
\ arg: branch offset ,                  
\ sets table then branchs around        
EXCODE: \ key -- ;                      
  #MKEYS @ 1+ DUP MAX-#MKEYS >          
  RUN-ERR" Too many menu keys"          
  DUP #MKEYS ! ^MKEYS C!                
  @2ARG ( get arg, advance EP)          
  EP @ #MKEYS @ ^MKEYS 1+ !             
   \ set table                          
  EP +! ( skip around )                 
  CLEANUP EX;                           
                                        
[KEYWORDS]                              
\ BSTK: 0 5 -- 0 5 adr 6 ;              
: IF-KEY \ -- ;                         
   LOADER INMENU?                       
   TYPES CHAR LOADER GET-EXPR           
   !EXCODE EXEC DEP @ LOADER 0 ,OPDB    
   ( adr ) !BSTK 6 !BSTK ;              
                                        
                                        
                               ( FAH  ) 
-------------------------------------------- SCREEN 036
( RUN-CODE               <12/19/85>176) 
[EXEC]                                  
0 CONSTANT EXIT-SCR?                    
\ this code runs the code in SCR-BUF    
\ until a zero is reached               
CODE {run-code} \ -- exocde or 0        
   EXEC ' EXIT-SCR? ASM LDA, 0= NOT     
   IF,   # 0 LDA,                       
   ELSE, EXEC ' {@1arg} ASM JSR,        
   THEN,                                
   # 0 LDY,                             
   DEX, BOT STY,                        
   DEX, BOT STA,                        
   NEXT JMP, C;                         
                                        
: RUN-CODE \ adr -- ; returns to forth  
  ?DUP                                  
  IF EP ! 0 TO EXIT-SCR?                
    BEGIN {run-code} DUP                
    WHILE RUN-EXCODE                    
    REPEAT DROP                         
  THEN ;                                
                                        
                               ( FAH  ) 
-------------------------------------------- SCREEN 037
\ menu primitives        <12/18/85>177  
[EXEC]                                  
                                        
\ approx 18.2 ticks/sec                 
: WAIT \ N -- ; waits n ticks           
   ?DUP IF 0                            
     DO 220 0 DO NOOP LOOP LOOP         
   THEN ;                               
                                        
\ approx 18.2 ticks/sec                 
: QWAIT \ N -- ; waits n ticks or key   
   ?DUP IF 0 DO 190 0                   
     DO QTERM IF LEAVE THEN LOOP LOOP   
   THEN ;                               
                                        
\ prints current menu at the posistion  
\ for the current item                  
: .MCHAR \ -- ;                         
   M-ITEM# @ 0 ^MITEMS @                
   M-OFFS @ + CURX !                    
   M-ITEM# @ 2 ^MITEMS @ CURY !         
   M-CHAR @ GEMIT ;                     
                                        
                               \ FAH    
-------------------------------------------- SCREEN 038
( menu primitives        < 3/17/86>178) 
[EXEC]                                  
                                        
: MCURS \ -- blink till press           
( TFG @ IBM ONLY ) GETMODE              
  CURX @ CURY @                         
( M-COLOR @ TEXT-FG  IBM ONLY )         
  M-BLINK @ ( blink it? )               
  IF ( cursor should blink )            
   BEGIN                                
    M-ON @ SETMODE .MCHAR               
    M-BLINK @ QWAIT                     
    M-OFF @ SETMODE .MCHAR              
    M-BLINK @ QWAIT QTERM               
   UNTIL                                
  ELSE ( don't blink cursor )           
   M-ON @ SETMODE .MCHAR                
   BEGIN QTERM UNTIL                    
   M-OFF @ SETMODE .MCHAR               
  THEN                                  
  CURY ! CURX !                         
  SETMODE ( TFG ! IBM ONLY ) ;          
                                        
                               ( FAH  ) 
-------------------------------------------- SCREEN 039
\ menu primitives        <12/18/85>179  
[EXEC]                                  
\ checks to see if the key is in the    
\ list of special keys.  if it is it    
\ returns the index into the table      
\ else 0                                
                                        
X: MENU-KEY? \ key -- key <N or 0>      
  #MKEYS @ DUP                          
  IF 0 SWAP 1+ 1                        
   DO OVER I ^MKEYS C@ = \ in list?     
    IF DROP I ( return number )         
    THEN                                
   LOOP                                 
  THEN X;                               
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                               \ FAH    
-------------------------------------------- SCREEN 040
\ GO-CODE CONT-MENU      <12/18/85>180  
                                        
[EXEC]                                  
\ if adr is not zero return address     
X: GO-CODE \ adr -- ; doesn't return    
   ?DUP                                 
   IF R> >CONT-MENU !                   
      LAST-DEP @ >CONT-MENU 2+ !        
      EP !                              
   THEN X;                              
                                        
EXCODE: \ -- ; continues last menu      
  >CONT-MENU 2+ @ LAST-DEP @ = NOT      
   RUN-ERR" Can't MCONT"                
  >CONT-MENU @ >R EXIT EX;              
                                        
[LOADER]                                
X: INMIF? \ -- ; in menu if?            
   INMENU? @BSTK 6 = NOT                
   ABORT" Missing menu IF- word" X;     
                                        
                                        
                                        
                               \ FAH    
-------------------------------------------- SCREEN 041
\ MCONT MEXIT            <12/18/85>181  
                                        
[KEYWORDS]                              
\ BSTK: addr 6 -- ;                     
: MCONT \ continue the menu             
   LOADER INMIF?                        
   !EXCODE ( to continue menu )         
   @BSTK RESOLVE-EP ;                   
                                        
EXCODE: \ -- go to code after menu word 
  NEXT-EP 2+ @ LAST-DEP @ = NOT         
  RUN-ERR" Can't MEXIT"                 
  NEXT-EP @ EP ! EX;                    
                                        
[KEYWORDS]                              
\ BSTK: addr 6 -- ;                     
: MEXIT \ leave the menu                
   LOADER INMIF?                        
   !EXCODE ( to exit menu )             
   @BSTK RESOLVE-EP ;                   
                                        
                                        
                                        
                               \ FAH    
-------------------------------------------- SCREEN 042
\ DO-MENU                <12/18/85>182  
                                        
EXCODE:                                 
  EP @ NEXT-EP ! LAST-DEP @ NEXT-EP 2+ !
  BEGIN M-ITEM# @ 4 ^MITEMS @ GO-CODE   
   ( execute IF-PLACED arguments )      
   MCURS KEY MENU-KEY? ?DUP             
   IF SWAP DROP       ( key pressed )   
    ^MKEYS 1+ @ GO-CODE                 
   ELSE ( check movement keys )         
    DUP >R UPAR?      ( move up? )      
    IF -1 M-ITEM# +! THEN               
    R@ DNAR?          ( move down )     
    IF  1 M-ITEM# +! THEN               
    M-ITEM# @ 1- #MITEMS @ +            
    #MITEMS @ MOD 1+ M-ITEM# ! ( wrap ) 
    R> 13 =           ( selected? )     
    IF M-ITEM# @ 6 ^MITEMS @ GO-CODE    
   THEN THEN                            
  AGAIN EX;                             
                                        
                                        
                                        
                               \ FAH    
-------------------------------------------- SCREEN 043
( DO-MENU                < 2/22/86>183) 
                                        
[KEYWORDS]                              
: DO-MENU \ -- ;                        
   LOADER END-MENU                      
   !EXCODE ;                            
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                               ( FAH  ) 
-------------------------------------------- SCREEN 044
\ BEGIN                  <12/18/85>184  
\ if this is the first BEGIN set the    
\ variable SCR-BEG, if DEP is different 
\ from DEP it resovles the count        
                                        
[LOADER]                                
  XVAR LAST-END                         
                                        
[KEYWORDS] 0 WARNING !                  
\ BSTK: -- addr 1 ;                     
: BEGIN [ 1 WARNING ! ] \ -- ;          
   LOADER BDEPTH 0= ( start of screen ) 
   IF LAST-END @ 2+ EXEC DEP @ = NOT    
    IF \ variables defined              
     DEP @ LOADER LAST-END @ 2+ -       
     LAST-END @ EXEC OPDB !DISK         
     DEP @ LOADER LAST-END !            
     0 ,OPDB ( next count ) THEN        
    EXEC DEP @ LOADER SCR-BEG !         
    -1 EXEC #MITEMS ! ( clear flag )    
    LOADER !PAGINATE                    
   THEN                                 
   EXEC DEP @ LOADER !BSTK 1 !BSTK ;    
                               \ FAH    
-------------------------------------------- SCREEN 045
\ IF THEN                <12/17/85>185  
                                        
[KEYWORDS] 0 WARNING !                  
\ BSTK: -- 0 2 ;                        
: IF [ 1 WARNING ! ] \ -- ;             
   LOADER INSCR?                        
   TYPES LOGIC LOADER GET-EXPR          
   0 !BSTK 2 !BSTK ;                    
                                        
0 WARNING !                             
\ BSTK: 0 2 -- addr 3 ;                 
: THEN [ 1 WARNING ! ] \  -- ;          
   LOADER INSCR? @BSTK 2 = NOT          
   ABORT" Missing IF"                   
   @BSTK DROP                           
   !0BRANCH ( addr ) !BSTK              
   3 !BSTK ;                            
                                        
                                        
                                        
                                        
                                        
                                        
                               \ FAH    
-------------------------------------------- SCREEN 046
( ELSE ENDIF             < 9/18/85>183) 
[KEYWORDS] 0 WARNING !                  
\ BSTK: addr 3 -- addr 4                
: ELSE [ 1 WARNING ! ] \ -- ;           
   LOADER INSCR? @BSTK 3 = NOT          
   ABORT" Missing THEN"                 
   !BRANCH                              
   @BSTK ( addr of IF 0BRANCH )         
   RESOLVE-EP                           
   ( addr of BRANCH ) !BSTK             
   4 !BSTK ;                            
                                        
\ BSTK: addr <3 or 4> -- ;              
: ENDIF \ -- ;                          
   LOADER INSCR?                        
   @BSTK 3 4 WITHIN NOT                 
   ABORT" Missing THEN"                 
   @BSTK RESOLVE-EP ;                   
                                        
                                        
                                        
                                        
                                        
                               ( FAH  ) 
-------------------------------------------- SCREEN 047
\ SCREEN-REPEAT SCREEN-DO<12/18/85>187  
[LOADER]                                
\ BSTK: <0 2 -- ;> or < -- ;>           
X: IF?-!BR \ -- disk adr of arg ;       
   1 BPICK 2 = ( is this an if? )       
   IF @BSTK @BSTK DDROP !1BRANCH        
   ELSE !BRANCH THEN X;                 
                                        
VARIABLE SCR-DONE                       
                                        
[KEYWORDS]                              
\ BSTK: -- ;                            
: SCREEN-REPEAT \ -- ;                  
   LOADER INSCR?                        
   IF?-!BR SCR-BEG @ RESOLVE ;          
                                        
[KEYWORDS]                              
\ BSTK: -- ;                            
: SCREEN-DONE \ -- ;                    
   LOADER INSCR? IF?-!BR ( addr )       
   SCR-DONE @ ?DUP                      
   IF OVER EXEC OPDB !DISK THEN         
   LOADER SCR-DONE ! ;                  
                               \ FAH    
-------------------------------------------- SCREEN 048
\ REPEAT                 <12/18/85>188  
[LOADER]                                
  XVAR DONE                             
                                        
[KEYWORDS] 0 WARNING !                  
\ BSTK: -- ;                            
: REPEAT [ 1 WARNING ! ] \ -- ;         
  LOADER INSCR? IF?-!BR                 
  0 BDEPTH 1+ 1                         
  DO I BPICK 1 =                        
   IF DROP I 1+ BPICK LEAVE THEN        
  2 +LOOP                               
  DUP 0= ABORT" REPEAT err"             
  RESOLVE ;                             
                                        
\ BSTK: -- ;                            
: DONE \ -- ;                           
   LOADER INSCR? IF?-!BR ( addr )       
   DONE @ ?DUP                          
   IF OVER EXEC OPDB !DISK THEN         
   LOADER DONE ! ;                      
                                        
                                        
                               \ FAH    
-------------------------------------------- SCREEN 049
\ DO-BACKS               <12/18/85>189  
                                        
\ given the address of the first offset 
\ in the chain them go to DEP           
                                        
[LOADER]                                
                                        
X: DO-BACKS \ addr -- ;                 
   ?DUP NOT IF EXIT THEN                
   BEGIN                                
     DUP EXEC OPDB @DISK LOADER         
       \ get next in chain              
     SWAP RESOLVE-EP ( fix this )       
     DUP 0=                             
   UNTIL DROP X;                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                               \ FAH    
-------------------------------------------- SCREEN 050
( END                    < 9/18/85>187) 
                                        
[KEYWORDS]                              
\ BSTK: adr 1 -- ;                      
: END \ -- ;                            
   LOADER INSCR? @BSTK 1 = NOT          
   ABORT" Missing ENDIF"                
   @BSTK DROP                           
   DONE @ DO-BACKS 0 DONE !             
   BDEPTH 0= \ if last END              
   IF SCR-DONE @ DO-BACKS 0 SCR-DONE !  
      \ fix backward references         
      SET-IBRANCH \ set the value of    
         \ any screen labels            
      EXEC DEP @ LOADER SCR-BEG @ -     
      SCR-BEG @ 2- EXEC OPDB !DISK      
      \ fix count for READ-SCR          
      DEP @ LOADER LAST-END !           
      0 ,OPDB                           
      \ count for the next items        
   THEN ;                               
                                        
                                        
                               ( FAH  ) 
-------------------------------------------- SCREEN 051
( NEXT                   < 9/18/85>188) 
                                        
[KEYWORDS]                              
                                        
: NEXT                                  
  ?LOADING                              
  0 >IN ! 1 BLK +!                      
  BLK @ . ;                             
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                               ( FAH  ) 
-------------------------------------------- SCREEN 052
\ MSG-BUF PROCESS-MSG <@M<12/18/85>192  
[EXEC]                                  
0 CONSTANT LAST-MSG# \ set by RUN-INIT  
  \ largest message number              
                                        
AUXWIDTH                                
CREATE MSG-BUF                          
   MSG-BUF-LEN ALLOT                    
                                        
: PROCESS-MSG NOOP ;                    
                                        
\ given an absolute message number read 
\ it into MSG-BUF                       
: <@MSG> \ N -- ;                       
  DUP 1 LAST-MSG# WITHIN NOT            
  RUN-ERR" Invalid message number"      
  2* 510 + MSG-PTRS @DISK ( start adr ) 
  MSG-TEXT DUP C@DISK 1+                
  DUP MSG-BUF-LEN >                     
  RUN-ERR" Message too big to read"     
  MSG-BUF SWAP DISK>                    
  PROCESS-MSG ;                         
                                        
                               \ FAH    
-------------------------------------------- SCREEN 053
\ @MSG .MSG G.MSG        <12/18/85>193  
[EXEC]                                  
                                        
0 CONSTANT LAST-GRP# \ set by RUN-INIT  
  \ largest group number                
                                        
: ?GRP-NUM \ N -- ; checks group number 
  1 LAST-GRP# WITHIN NOT                
  RUN-ERR" Invalid group number" ;      
                                        
: @MSG \ N G -- ;                       
  DUP ?GRP-NUM                          
  2* 2+ MSG-PTRS @DISK + 1- <@MSG> ;    
                                        
: .MSG \ N G -- ; uses TYPE             
  @MSG MSG-BUF COUNT TYPE ;             
                                        
: G.MSG \ N G -- ; uses GTYPE           
  @MSG MSG-BUF COUNT GTYPE ;            
                                        
                                        
                                        
                                        
                               \ FAH    
-------------------------------------------- SCREEN 054
( MGROUP .GMSG G.GMSG<   < 9/18/85>191) 
[EXEC]                                  
                                        
  VARIABLE MGRP \ current default       
                \ message group         
                                        
: MGROUP \ N -- ;                       
  DUP ?GRP-NUM                          
  MGRP ! ;                              
                                        
: @GMSG \ N -- ; read in from default   
  MGRP @ @MSG ;                         
                                        
: .GMSG \ N -- ; print from default grp 
  MGRP @ .MSG ;                         
                                        
: G.GMSG \ N -- ;                       
  MGRP @ G.MSG ;                        
                                        
                                        
                                        
                                        
                                        
                               ( FAH  ) 
-------------------------------------------- SCREEN 055
\ MGROUP                 <12/18/85>195  
                                        
\ ARG: none                             
IS-EXCODE MGROUP                        
                                        
[KEYWORDS]                              
\ use: SET-MGROUP n                     
: MGROUP                                
  LOADER INSCR?                         
  TYPES INT LOADER GET-EXPR             
  !EXCODE                               
;                                       
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                               \ FAH    
-------------------------------------------- SCREEN 056
( CENTERED FLEFT FRIGHT  < 9/19/85>193) 
[EXEC]                                  
  VARIABLE PMODE \ PRINT modes          
   ( 0 = normal,    1 = centered )      
   ( 2 = flush left 3 = flush right )   
                                        
\ arg: PMODE C,                         
EXCODE: \ -- ;                          
  @1ARG PMODE ! EX;                     
                                        
[KEYWORDS]                              
: CENTERED \ -- ;                       
  LOADER INSCR? !EXCODE 1 C,OPDB ;      
                                        
: FLEFT \ -- ;                          
  LOADER INSCR? !EXCODE 2 C,OPDB ;      
                                        
: FRIGHT \ -- ;                         
  LOADER INSCR? !EXCODE 3 C,OPDB ;      
                                        
                                        
                                        
                                        
                               ( FAH  ) 
-------------------------------------------- SCREEN 057
( DO-PMODE               <11/22/85>197) 
[EXEC]                                  
                                        
\ modifies CURX based on the value      
\ of PMODE, PMODE is cleared            
: DO-PMODE \ adr cnt -- adr cnt         
  DX @ TO CDELX                         
  ( MAKE STRLEN WORK PROPERLY )         
  PMODE @ 1 = ( centered? )             
  IF DDUP <STRLEN> 2/                   
     CURX @ SWAP - CURX ! THEN          
  PMODE @ 3 = ( flush right? )          
  IF DDUP <STRLEN>                      
     CURX @ SWAP - CURX ! THEN          
  0 PMODE ! ;                           
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
-------------------------------------------- SCREEN 058
\ MSG prims              <12/18/85>198  
                                        
\ ARG: none                             
EXCODE: \ N -- ; print from cur group   
  @GMSG MSG-BUF COUNT DO-PMODE          
  GTYPE CLEANUP EX;                     
                                        
[LOADER]                                
X: !GMSG \ -- ;                         
  !EXCODE X;                            
                                        
\ ARG: none                             
EXCODE: \ M N -- ; print from group m   
  SWAP @MSG MSG-BUF COUNT DO-PMODE      
  GTYPE CLEANUP EX;                     
                                        
[LOADER]                                
X: !MSG \ -- ;                          
  !EXCODE X;                            
                                        
                                        
                                        
                                        
                               \ FAH    
-------------------------------------------- SCREEN 059
( MSG                    < 9/18/85>196) 
\ reads one expression. If expression   
\ was ended with a comma it tries to    
\ read another expression               
                                        
\ USE: MSG n -- print from cur group    
\   or MSG m,n -- print from group m    
                                        
[KEYWORDS]                              
: MSG \ -- ;                            
  LOADER INSCR?                         
  TYPES INT LOADER GET-EXPR             
  HERE @ 11265 ( , ) =                  
   \ did the last WORD get a comma?     
  IF TYPES INT LOADER GET-EXPR          
     !MSG                               
  ELSE !GMSG                            
  THEN ;                                
                                        
                                        
                                        
                                        
                                        
                               ( FAH  ) 
-------------------------------------------- SCREEN 060
\ PRINT                  <12/17/85>200  
                                        
\ ARG: none                             
EXCODE: \ addr -- ;                     
  1+ COUNT DO-PMODE                     
  GTYPE CLEANUP EX;                     
                                        
[KEYWORDS]                              
\ use: PRINT string-expr                
: PRINT                                 
  LOADER INSCR?                         
  TYPES STR LOADER GET-EXPR             
  !EXCODE                               
;                                       
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                               \ FAH    
-------------------------------------------- SCREEN 061
\ AT                     <12/17/85>201  
                                        
\ args: none                            
EXCODE: \ X Y -- ;                      
  DUP CURY ! OVER  CURX !               
  LASTY ! LASTX !                       
  CLEANUP EX;                           
                                        
[KEYWORDS]                              
\ use: AT xexpr , yexpr                 
: AT \ -- ;                             
  LOADER INSCR?                         
  TYPES INT LOADER GET-EXPR ( get x )   
  TYPES INT LOADER GET-EXPR ( get y )   
  !EXCODE ;                             
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
-------------------------------------------- SCREEN 062
\ ATX ATY                <12/17/85>202  
                                        
\ args: none                            
EXCODE: \ X -- ;                        
  DUP CURX ! LASTX !                    
  CLEANUP EX;                           
                                        
[KEYWORDS] \ use: ATX xexpr             
: ATX                                   
  LOADER INSCR?                         
  TYPES INT LOADER GET-EXPR ( get x )   
  !EXCODE ;                             
                                        
\ args: none                            
EXCODE: \ y -- ;                        
  DUP CURY ! LASTY !                    
  CLEANUP EX;                           
                                        
[KEYWORDS] \ use: ATX xexpr             
: ATY                                   
  LOADER INSCR?                         
  TYPES INT LOADER GET-EXPR ( get y )   
  !EXCODE ;                             
                               \ FAH    
-------------------------------------------- SCREEN 063
( CLS                    <12/19/85>203) 
\ handles reseting all defaults         
\ such as character spacing background  
\ etc... also deals with pagination     
                                        
\ args: none                            
EXCODE: \ -- ;                          
  HGR  ( PL' @ PL BG' @ BG )            
  ( TFG' @ TEXT-FG TBG' @ TEXT-BG )     
  DX' @ DX ! DY' @ DY !                 
  DOPAG                                 
  CLEANUP EX;                           
                                        
[KEYWORDS] 0 WARNING !                  
: CLS [ 1 WARNING ! ]                   
  LOADER INSCR? !EXCODE ;               
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                               ( FAH  ) 
-------------------------------------------- SCREEN 064
\ PALETTE                <12/18/85>204  
                                        
\ args: none                            
\ EXCODE: \ n -- ; set to palette N     
\  DUP 0 2 WITHIN NOT                   
\  RUN-ERR" Invalid Palette number"     
\  DROP ( FOR APPLE )                   
\  CLEANUP EX;                          
\                                       
                                        
IS-EXCODE CLEANUP                       
                                        
[KEYWORDS] 0 WARNING !                  
\ use: PALETTE expr                     
: PALETTE [ 1 WARNING ! ]               
  LOADER INSCR?                         
  TYPES INT LOADER GET-EXPR             
  !EXCODE ;                             
                                        
                                        
                                        
                                        
                                        
                               \ FAH    
-------------------------------------------- SCREEN 065
\ BACKGROUND             <12/18/85>205  
                                        
\ args: none                            
\ EXCODE: \ n -- ; set to background N  
\   DUP 0 32 WITHIN NOT                 
\   RUN-ERR" Invalid Background number" 
\   DROP ( FOR APPLE )                  
\   CLEANUP EX;                         
                                        
[KEYWORDS] 0 WARNING !                  
\ use: BACKGROUND expr                  
: BACKGROUND [ 1 WARNING ! ]            
  LOADER INSCR?                         
  TYPES INT LOADER GET-EXPR             
  !EXCODE                               
;                                       
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                               \ FAH    
-------------------------------------------- SCREEN 066
\ TEXT-FG                <12/18/85>206  
                                        
\ args: none                            
\ EXCODE: \ n -- ; set TEXT forgroun    
\   DUP 0 4 WITHIN NOT                  
\   RUN-ERR" Invalid text color number" 
\   DROP ( FOR APPLE )                  
\   CLEANUP EX;                         
                                        
[KEYWORDS] 0 WARNING !                  
\ use: TEXT-FG expr                     
: TEXT-FG [ 1 WARNING ! ] \ N -- ;      
  LOADER INSCR?                         
  TYPES INT LOADER GET-EXPR             
  !EXCODE                               
;                                       
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                               \ FAH    
-------------------------------------------- SCREEN 067
\ TEXT-BG                <12/18/85>207  
                                        
\ args: none                            
\ EXCODE: \ n -- ; set TEXT forgroun    
\   DUP 0 4 WITHIN NOT                  
\   RUN-ERR" Invalid text color number" 
\   DROP ( FOR APPLE )                  
\   CLEANUP EX;                         
                                        
[KEYWORDS] 0 WARNING !                  
\ use: TEXT-BG expr                     
: TEXT-BG [ 1 WARNING ! ] \ N -- ;      
   LOADER INSCR?                        
   TYPES INT LOADER GET-EXPR            
   !EXCODE                              
;                                       
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                               \ FAH    
-------------------------------------------- SCREEN 068
\ COLOR                  <12/18/85>208  
                                        
\ args: none                            
IS-EXCODE HCOLOR                        
                                        
[KEYWORDS] 0 WARNING !                  
\ use: COLOR expr                       
: COLOR [ 1 WARNING ! ] \ N -- ;        
   LOADER INSCR?                        
   TYPES INT LOADER GET-EXPR            
   !EXCODE                              
;                                       
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                               \ FAH    
-------------------------------------------- SCREEN 069
\ MODE                   <12/18/85>209  
\ args: none                            
IS-EXCODE SETMODE                       
                                        
[KEYWORDS] 0 WARNING !                  
\ use: MODE expr                        
: MODE [ 1 WARNING ! ] \ N -- ;         
   LOADER INSCR?                        
   TYPES INT LOADER GET-EXPR            
   !EXCODE                              
;                                       
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                               \ FAH    
-------------------------------------------- SCREEN 070
\ BOX                    <12/17/85>210  
                                        
\ args: none                            
EXCODE: \ w h -- ; draw a BOX at CURX,Y 
   CURX @ CURY @ BAR CLEANUP EX;        
                                        
[KEYWORDS]                              
\ use: BOX width , heigth               
: BOX \ -- ;                            
   LOADER INSCR?                        
   TYPES INT LOADER GET-EXPR            
   TYPES INT LOADER GET-EXPR            
   !EXCODE                              
;                                       
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                               \ FAH    
-------------------------------------------- SCREEN 071
\ FRAME                  <12/17/85>211  
\ args: none                            
EXCODE: \ w h t -- ; draws a frame w    
 \ outer dims of W by H , T pix wide    
  1- >R >R >R  ( I=w  I'=h  J=t )       
  CURX @ DUP J + SETENDPTS              
  CURY @ DUP I' + VLINE ( LEFT )        
  CURX @ I + DUP J - SETENDPTS          
  CURY @ DUP I' + VLINE ( RIGHT )       
  CURX @ J + 1+ CURX @ I + J - 1-       
  SETENDPTS                             
  CURY @ DUP J + VLINE ( TOP )          
  CURY @ I' + DUP J - VLINE ( BOT )     
  R> R> DDROP R> DROP CLEANUP EX;       
                                        
[KEYWORDS]                              
\ use: BOX width , heigth , thickness   
: FRAME                                 
  LOADER INSCR?                         
  TYPES INT LOADER GET-EXPR             
  TYPES INT LOADER GET-EXPR             
  TYPES INT LOADER GET-EXPR             
  !EXCODE                               
;                              \ FAH    
-------------------------------------------- SCREEN 072
\ GRAPHIC                < 1/20/87>212  
                                        
\ args: none                            
EXCODE: \ N -- ; draw graphic n         
   ?GETPIC NOT                          
   RUN-ERR" Invalid picture number"     
   PACKBUF CURX @ 7 / CURY @ UNPACK     
   PACK-DONE                            
   CLEANUP EX;                          
                                        
[KEYWORDS]                              
\ use: GRAPHIC num                      
: GRAPHIC \ -- ;                        
   LOADER INSCR?                        
   TYPES INT LOADER GET-EXPR            
   !EXCODE                              
;                                       
                                        
                                        
                                        
                                        
                                        
                                        
                               \ FAH    
-------------------------------------------- SCREEN 073
\ GET-GRAPHIC DRAW-GRAPHI< 1/20/87>213  
                                        
\ args: none                            
EXCODE: \ N -- ; get graphic n          
   ?GETPIC NOT                          
   RUN-ERR" Invalid picture number"     
   CLEANUP EX;                          
                                        
[KEYWORDS]                              
\ use: GET-GRAPHIC num                  
: GET-GRAPHIC \ -- ;                    
   LOADER INSCR?                        
   TYPES INT LOADER GET-EXPR            
   !EXCODE ;                            
\ args: none                            
EXCODE: \ -- ; draw last at curx,y      
   PACKBUF CURX @ 7 / CURY @ UNPACK     
   PACK-DONE EX;                        
                                        
[KEYWORDS]                              
\ use: DRAW-GRAPHIC                     
: DRAW-GRAPHIC \ -- ;                   
  LOADER INSCR?                         
  !EXCODE ;                    \ FAH    
-------------------------------------------- SCREEN 074
( PRESS-SPACE            < 9/19/85>211) 
EXIT -----------------------            
                                        
\ args: none                            
EXCODE: \ N -- ; draw graphic n         
   BL WAIT-KEY CLEANUP EX;              
                                        
[KEYWORDS]                              
\ use: PRESS-SPACE                      
: PRESS-SPACE \ -- ;                    
  LOADER !EXCODE ;                      
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                               ( FAH  ) 
-------------------------------------------- SCREEN 075
( GETKEY                 < 9/19/85>212) 
\ clears input buffer then inputs a     
\ single character to variable          
                                        
\ args: var#                            
EXCODE: \ -- ; get a key into variable  
   EAT-KEYS KEY                         
   @1ARG !VAL CLEANUP EX;               
                                        
[KEYWORDS]                              
\ use: GETKEY variable                  
: GETKEY \ -- ;                         
  LOADER INSCR? GET-VAR-NUM DUP         
  EXEC @VTYPE DUP TYPES CHAR =          
  SWAP INT = OR NOT                     
  ABORT" Only CHAR or INT"              
  LOADER !EXCODE C,OPDB ;               
                                        
                                        
                                        
                                        
                                        
                                        
                               ( FAH  ) 
-------------------------------------------- SCREEN 076
\ WAITKEY                <12/17/85>216  
                                        
\ args: none                            
EXCODE: \ N -- ; wait for a key N       
   EAT-KEYS                             
   BEGIN DUP KEY =                      
   UNTIL DROP                           
   CLEANUP EX;                          
                                        
[KEYWORDS]                              
\ use: WAITKEY expr                     
: WAITKEY \ -- ;                        
  LOADER INSCR?                         
  TYPES CHAR LOADER GET-EXPR            
  !EXCODE                               
;                                       
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                               \ FAH    
-------------------------------------------- SCREEN 077
\ \                      <12/18/85>217  
                                        
[KEYWORDS] WARNOFF                      
                                        
: \                                     
  [COMPILE] \ ; IMMEDIATE               
                                        
                                        
WARNON                                  
                                        
[FORTH]                                 
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                               \ FAH    
-------------------------------------------- SCREEN 078
( RUN-INIT               <10/30/85>218) 
[EXEC]                                  
    \ does all initialization that      
    \ is before starting execution      
    \ for the first time                
: RUN-INIT \ -- ;                       
  5 SETMODE 7 HCOLOR                    
  0 CURX ! 0 CURY !                     
  0 DEP  !                              
  0 PMODE ! ( print normal )            
  VTABLE 1stUserVar# 3 * +              
  #VARS 1stUserVar# - 3 * 0 FILL        
  ( clear variable tbl )                
  UserVP VP ! ( set variable pointer )  
  GSTACK SCLEAR                         
  MSG-PTRS 0 @DISK TO LAST-MSG#         
  MSG-PTRS 2 @DISK TO LAST-GRP#         
  1 MGROUP                              
  CLEANUP HGR ;                         
                                        
                                        
                                        
                                        
                               ( FAH  ) 
-------------------------------------------- SCREEN 079
( RUN                    < 9/19/85>216) 
[FORTH]                                 
                                        
\ this is the main loop of the entire   
\ program.                              
\ it reads screens then calls RUN-SCR   
\ to execute it.  This continues until  
\ READ-SCR returns true which indicates 
\ the end of the file                   
                                        
: <RUN>                                 
  EXEC RUN-INIT                         
  BEGIN READ-SCR NOT                    
  WHILE                                 
    SCR-BUF RUN-CODE CLEANUP            
  REPEAT ;                              
                                        
: RUN                                   
  EXEC <RUN>                            
  2000 10 TONE BL WAIT-KEY              
  TEXT QUIT ;                           
                                        
                                        
                               ( FAH  ) 
-------------------------------------------- SCREEN 080
\ FORGET-VARS MARK-FORGET<12/18/85>220  
[FORTH] MAIN                            
                                        
0 XCONST ^FORGET                        
                                        
\ removes all words above ^FORGET in    
\ the main dictionary                   
WARNOFF                                 
: FORGET-VARS                           
  ^FORGET <<FORGET>> ;                  
                                        
WARNON                                  
\ this word marks so that any words     
\ defined after this in the main        
\ dictionary will be forgotten          
\ by FORGET-VARS                        
: MARK-FORGET \ -- ;                    
  HERE X' ^FORGET !                     
;                                       
                                        
                                        
                                        
                                        
                               \ FAH    
-------------------------------------------- SCREEN 081
( INIT-COMPILE           <10/17/85>218) 
[LOADER]                                
  \ does all initialization that is     
  \ needed to compile OpDB from scratch 
  \ ****** CLEARS DATA STACK ********   
: INIT-COMPILE \ -- clears ;            
  FORGET-SYS LOADER [COMPILE] LOADER    
  EXEC -1 #MITEMS ! 0 DEP !             
  VTABLE 1stUserVar# 3 * +              
  #VARS 1stUserVar# -                   
  3 * 0 FILL \ clear variable tbl       
  UserVP VP ! \ set variable pointer    
  1stUserVar# LOADER VAR# ! \ set var # 
  BSTK SCLEAR 0 LAST-END !              
  0 LOADER ,OPDB  \ first count word    
  0 ^RESOLVE !                          
  FORGET-VARS                           
  SP! ;                                 
                                        
: FINISH-COMPILE \ -- ;                 
  BDEPTH ABORT" Missing END"            
  CHECK-INTER                           
  [FORTH] FLUSH ;                       
                                        
-------------------------------------------- SCREEN 082
( COMP                   <10/18/85>222) 
[LOADER]                                
: <COMP> \ S -- L ; L=Last screen compd 
  DEPTH 1 < ABORT" number required"     
  ?DUP NOT ABORT" Can't COMP scr 0"     
  BLK @ >R >IN @ >R 0 >IN ! DUP . BLK ! 
  BEGIN 32 WORD ( DUP COUNT TYPE CR )   
    DUP C@ ( while not end )            
  WHILE                                 
    LOADER ' KEYWORDS VFIND? NOT        
    ABORT" Not a KEYWORD"               
    CFA EXECUTE DEPTH 0>                
    IF WHERE1 CR ." Stack not empty " .S
     EXEC BL WAIT-KEY SP! LOADER THEN   
  REPEAT DROP                           
  BLK @ R> >IN ! R> BLK ! ;             
                                        
[FORTH]                                 
: COMP                                  
  LOADER [COMPILE] LOADER               
  >R INIT-COMPILE R> <COMP> DROP        
  FINISH-COMPILE ;                      
                                        
                                        
-------------------------------------------- SCREEN 083
( COMP-ALL prims         < 2/22/86>223) 
                                        
[LOADER]                                
  0 XCONST COMPILE-DONE?                
  0 XCONST PAUSE-COMP?                  
                                        
[KEYWORDS]                              
                                        
: SYSTEM-END                            
  CR CR ." SYSTEM IS LOADED" CR CR      
  1 LOADER X' COMPILE-DONE? ! ;         
                                        
: PAUSE-COMP                            
  CR CR ." INSERT NEXT DISK TO LOAD"    
  CR CR                                 
  1 LOADER X' PAUSE-COMP? ! ;           
                                        
[FORTH]                                 
: INIT-COMPILE                          
  LOADER [COMPILE] LOADER               
  INIT-COMPILE                          
  [FORTH] ;                             
                                        
                               ( bobp ) 
-------------------------------------------- SCREEN 084
( COMP-ALL               <10/18/85>224) 
\ compiles till the KEYWORDS SYSTEM-END 
\ is encountered or ESCape key pressed  
                                        
[FORTH]                                 
: COMP-ALL \ -- ;                       
  SYS-FLG @ 5 = NOT                     
  ABORT" LOADER MUST REMAIN RESIDENT"   
  DEPTH 1 < ABORT" USE: start COMP-ALL" 
  0 LOADER X' COMPILE-DONE? !           
  0 X' PAUSE-COMP? !                    
  BEGIN <COMP>                          
    COMPILE-DONE?                       
    PAUSE-COMP? OR                      
    QTERM                               
    IF KEY ELSE 0 THEN 27 = OR NOT      
  WHILE 1+ REPEAT                       
  DROP                                  
  PAUSE-COMP? NOT                       
  IF FINISH-COMPILE  THEN               
;                                       
                                        
                                        
                                        
-------------------------------------------- SCREEN 085
( CURS                   < 9/19/85>221) 
EXIT ********************************   
[FORTH]                                 
                                        
9 CONSTANT CUR-SIZE                     
                                        
  \ draws a cursor at X,Y               
: CURS \ X Y -- X Y ;                   
  COLOR# @ >R                           
  0 SETMODE 7 HCOLOR                    
  >R >R ( X is I, Y is I' )             
  1 CUR-SIZE I I' CUR-SIZE 2/ - BAR     
  CUR-SIZE 1 I CUR-SIZE 2/ - I' BAR     
  R> R>                                 
  R> HCOLOR ;                           
                                        
: MYGEMIT \ C -- ;                      
  CURX @ SWAP GEMIT 7 + CURX ! ;        
                                        
                                        
                                        
                                        
                                        
                                        
-------------------------------------------- SCREEN 086
( CKEY MOVE-AMT CX CY .XY< 9/19/85>222) 
EXIT ********************************   
[FORTH]                                 
                                        
1 CONSTANT MA ( move amount )           
                                        
VARIABLE CX 33 CX !                     
VARIABLE CY  0 CY !                     
VARIABLE RCY                            
                                        
  \ prints at CX, CY                    
: .XY \ X Y MODE -- X Y ;               
  SETMODE                               
  ' EMIT @ >R ' MYGEMIT CFA ' EMIT !    
  CX @ 0 MAX 33 MIN 7 *                 
  RCY @ 0 MAX 24 MIN 8 * XYTAB          
  DDUP SWAP 3 .R SPACE 3 .R             
  >R ' EMIT ! ;                         
                                        
                                        
                                        
                                        
                                        
                                        
-------------------------------------------- SCREEN 087
( CUR                    < 9/19/85>223) 
EXIT ********************************   
[FORTH]                                 
: CUR \ -- ;                            
  HG @CURSOR GETMODE                    
  140 96 CURS CY @ RCY !                
  BEGIN 3 .XY KEY >R CURS               
   R@ 49 57 WITHIN                      
   IF R@ 48 - 2* 1- TO MA THEN          
   R@ UPAR? IF MA - 0 MAX THEN          
   R@ DNAR? IF MA + 199 MIN THEN        
   R@ LFAR? IF >R MA - 0 MAX R> THEN    
   R@ RTAR? IF >R MA + 319 MIN R> THEN  
   R@ 87 = IF 5 .XY RCY @ 1-            
              0 MAX RCY ! THEN          
   R@ 90 = IF 5 .XY RCY @ 1+            
              23 MIN RCY ! THEN         
   CURS ( turn on new )                 
  R> 27 = UNTIL                         
  CURS DDROP                            
  SETMODE !CURSOR                       
  TEXT ;                                
                                        
                                        
-------------------------------------------- SCREEN 088
( C                      <10/ 8/85>224) 
                                        
[FORTH]                                 
                                        
: C   \ compile current screen          
  SCR @ COMP ;                          
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
-------------------------------------------- SCREEN 093
( <IQEMIT>               <10/24/85>230) 
\ Set up vectors for character draw     
                                        
: <IQEMIT>                              
   DX @ TO CDELX DY @ TO CDELY          
   <GEMIT> ;                            
                                        
                                        
REVECTOR <IQEMIT> TO GEMIT              
                                        
CURX TO GX                              
CURY TO GY                              
                                        
                                        
EXIT                                    
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                               ( bobp ) 
-------------------------------------------- SCREEN 100
( DOARGS                 < 9/18/85>272) 
                                        
VARIABLE ARGS?                          
\ 1=BYTE 2=WORD 3=STRING                
                                        
: DOARGS \ ADR -- ADR'                  
  ARGS? @                               
  IF ARGS? @ 1 = ( BYTE )               
   IF DUP C@ . 1+                       
   ELSE ARGS? @ 2 = ( WORD )            
    IF DUP @ U. 2+                      
    ELSE ARGS? @ 3 = ( STRING )         
     IF DUP COUNT DUP >R                
      34 EMIT TYPE 34 EMIT R> + 1+      
     THEN                               
    THEN                                
   THEN                                 
  THEN                                  
;                                       
                                        
                                        
-->                                     
                                        
                                        
-------------------------------------------- SCREEN 101
\ <SEE>                  <10/17/85>  2  
: <SEE> ( PFA -- )                      
  CR CR CONTEXT @                       
  [COMPILE] KEYWORDS CONTEXT !          
  BEGIN DUP @                           
   SPACE 0 ARGS? ! LOADER               
   DUP ' <!EXCODE> CFA =                
   IF 1 ARGS? !                         
   ELSE DUP ' <ABORT"> CFA =            
    OVER ' <."> CFA = OR                
    IF 3 ARGS? !                        
    ELSE DUP ' BRANCH CFA =             
     OVER ' 0BRANCH CFA = OR            
     OVER ' LIT CFA = OR                
     OVER ' <TO> CFA = OR               
     IF 2 ARGS? ! THEN                  
   THEN THEN                            
   ARGS? @ 1 = IF 63 50 C! THEN         
   DUP 2+ NFA ID.                       
   >R 2+ DOARGS 255 50 C! R> CR         
   ' <EXIT> CFA =                       
  UNTIL DROP CR ;                       
                                        
-->                                     
-------------------------------------------- SCREEN 102
\ PRINT NUMBERS AS RUN   <10/17/85>  3  
                                        
: SEE                                   
  [COMPILE] ' <SEE> ;                   
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                               \ 11:00  
-------------------------------------------- SCREEN 123
\ UNMSG                  < 1/15/86>263  
EXIT --------                           
: !CHR ( c -- ; puts c in buffer )      
  PAD C@ 1+ PAD + C!                    
  1 PAD +C! ;                           
\ Unpacks message at MSGBUF             
\ placing result back in MSGBUF         
: UNMSG ( -- )                          
  EXEC 0 PAD !                          
  MSG-BUF COUNT ?DUP                    
  IF 0                                  
   DO COUNT DUP 127 >                   
    IF 127 AND !CHR BL !CHR             
    ELSE !CHR THEN                      
   LOOP DROP                            
   PAD DUP C@ 1+ DUP MSG-BUF-LEN >      
   RUN-ERR" Message too big (unpacked)" 
   MSG-BUF SWAP CMOVE                   
  ELSE DROP THEN ;                      
                                        
EXEC ' UNMSG CFA ' PROCESS-MSG !        
CR CR ." Message unpack added" CR CR    
                                        
                               \ FAH    
-------------------------------------------- SCREEN 124
( data formats           <10/17/85>264) 
EXIT                                    
--------- MSG-PTR data format ----------
  0000:  last message number used       
  0002:  last group number used         
  0004:  pointer to group 1 ,           
          : : : : : : : : :             
  0510:  pointer to group 254 ,         
  0512:  pointer to msg 1 ,             
          : : : : : : : :               
                                        
n*2+2:   pointer to start of group n    
         (1 <= n <= 254 )               
n*2+510: pointer to start of msg n      
         (1 <= N < ???? )               
----------------------------------------
                                        
-------- MSG-TEXT data format ----------
  0000:  next available byte to store   
  0002:  message text ......            
  nnnn:     "      "                    
----------------------------------------
                                        
                               ( FAH  ) 
-------------------------------------------- SCREEN 125
( SWITCH TO MLOADER      < 2/12/86>265) 
CR CR ." LOADING MESSAGE LOADER " CR CR 
MAIN                                    
ONLY FORTH VIRTUAL ALSO                 
  FORTH ALSO DEFINITIONS                
                                        
\ save system status                    
  FORGET-SYS FREEZE                     
                                        
MLDR    \ set virtual parameter pointer 
                                        
\ switch to virtual mem                 
  VIR-BASE DP !                         
\ fill with E's                         
  VIR-BASE 8192 69 FILL                 
\ compile check words                   
  VIR-FLG @ VIR-TST @ , , 0 ,           
\ dummy definition for lfa              
  CREATE _ SMUDGE                       
\ remember first LFA                    
  LATEST PFA-LFA  FIRSTLFA !            
                                        
ONLY FORTH ALSO                         
                               ( bobp ) 
-------------------------------------------- SCREEN 126
( LBUF                   <10/17/85>266) 
                                        
130 CONSTANT LBUF-LEN                   
CREATE LBUF LBUF-LEN ALLOT              
   \ buffer for GET-LINE                
                                        
VARIABLE ^LBUF                          
   \ offset into LBUF                   
                                        
0 CONSTANT DBUF-LEN                     
   \ length of the disk buffer, set by  
   \ FILE>DBUF or BLOCK>DBUF            
                                        
CREATE DBUF 1024 ALLOT                  
   \ disk buffer                        
                                        
VARIABLE ^DBUF                          
   \ offset into DBUF                   
                                        
                                        
                                        
                                        
                                        
                               ( FAH  ) 
-------------------------------------------- SCREEN 127
( BLOCK>DBUF             <10/17/85>267) 
                                        
: ?LBUF-LEN \ N -- ; errors if no room  
  ^LBUF @ + LBUF-LEN >                  
  ABORT" Message too big" ;             
                                        
VARIABLE NEXT-BLK                       
  \ next block to be loaded             
VARIABLE LAST-BLK                       
  \ last block to load                  
                                        
: BLOCK>DBUF \ -- T/F; T=past end       
  1024 TO DBUF-LEN                      
  NEXT-BLK @ LAST-BLK @ > DUP NOT       
  IF NEXT-BLK @ DUP . BLOCK             
     DBUF 1024 CMOVE                    
     1 NEXT-BLK +!                      
     0 ^DBUF !                          
  THEN ;                                
                                        
                                        
                                        
                                        
                               ( FAH  ) 
-------------------------------------------- SCREEN 128
( GET-LINE               <10/30/85>268) 
                                        
: GET-LINE \ -- T/F ; T=end of "file"   
  0 ^LBUF ! ^DBUF @ C/L 40 =            
  IF 960 ELSE 1024 THEN < NOT DUP       
  IF DROP BLOCK>DBUF THEN               
  DUP NOT \ is there data to look at?   
  IF DBUF ^DBUF @ + C@ ASCII @ =        
    IF \ 2 line msg? , read first       
      C/L 1- ?LBUF-LEN                  
      DBUF ^DBUF @ + 1+                 
      LBUF ^LBUF @ + C/L 1- CMOVE       
      C/L ^LBUF +! C/L ^DBUF +!         
      \ remove trailing spaces from 1st 
      BEGIN LBUF ^LBUF @ + C@ BL =      
        ^LBUF @ 1 > AND                 
      WHILE -1 ^LBUF +!                 
      REPEAT 1 ?LBUF-LEN 1 ^LBUF +!     
      BL LBUF ^LBUF @ + C!              
    THEN \ now do the regular line      
    C/L ?LBUF-LEN DBUF ^DBUF @ +        
    LBUF ^LBUF @ + C/L CMOVE            
    C/L ^LBUF +! C/L ^DBUF +!           
  THEN ;                       ( FAH  ) 
-------------------------------------------- SCREEN 129
( STRIP-LBUF             <10/17/85>269) 
\ removes leading and trailing spaces   
\ and quotes and returns the starting   
\ address and count for the portion of  
\ the string to write to disk           
: STRIP-LBUF \ -- adr cnt ; alters ^LBUF
  ^LBUF @ 1 = LBUF C@ 34 = AND LBUF     
  ^LBUF @ -TRAILING SWAP DROP 0= OR     
  IF PAD 0 EXIT THEN                    
  LBUF \ remove leading items           
  BEGIN DUP C@ 32 =                     
  WHILE 1+ REPEAT                       
  DUP @ 8781 = IF 3 + ( skip M" )       
  ELSE DUP C@ 34 = + ( advance past " ) 
  THEN \ now remove trailing items      
  BEGIN LBUF ^LBUF @ 1- + C@ 32 =       
  WHILE -1 ^LBUF +! REPEAT              
  LBUF ^LBUF @ 1- + C@ 34 =             
  IF -1 ^LBUF +! THEN ( skip ending " ) 
  \ now compute count                   
  ^LBUF @ OVER LBUF - -                 
;                                       
                                        
                               ( FAH  ) 
-------------------------------------------- SCREEN 130
\ PACKMSG                < 1/13/86>270  
\ packs string to pad returns           
\ new adress and count                  
\ ' EXIT CFA ' PACKMSG ! to disable     
: ^CH ( -- ADR )                        
  PAD C@ PAD + ;                        
: !CH ( C -- ; put c into buffer inc )  
  1 PAD +C! ^CH C! ;                    
\ set hi bit on last if exists          
: !BL ( -- ; store a blank)             
  PAD C@ 0>                             
  IF ^CH C@ DUP 127 > ( already set )   
   IF DROP BL !CH                       
   ELSE 128 OR ^CH C! THEN              
  ELSE BL !CH THEN ;                    
                                        
: PACKMSG ( ADR CNT -- ADR' CNT' )      
  EXIT 0 PAD ! 0                        
  DO COUNT DUP BL =                     
   IF DROP !BL ELSE !CH THEN            
  LOOP                                  
  DROP                                  
  PAD COUNT ;                           
                               \ FAH    
-------------------------------------------- SCREEN 131
( !MSG                   <10/17/85>271) 
\ stores the message                    
WARNOFF                                 
: !MSG \ -- ;                           
  0 MSG-PTRS @DISK ( next msg # )       
  2 @DISK 2* 2+ @DISK - 255 >           
  ABORT" Too many messages in group"    
  LBUF                                  
  BEGIN DUP C@ BL =                     
    OVER LBUF ^LBUF @ + < AND           
  WHILE 1+ REPEAT                       
  C@ DUP 42 = SWAP 92 = OR NOT          
  IF STRIP-LBUF ?DUP                    
   IF PACKMSG                           
    DUP 0 MSG-TEXT @DISK ( free ptr )   
    OVER 1+ 0 @DISK + 0 !DISK           
    ( inc free ptr )                    
    DUP >R C!DISK    ( store count )    
    R@ 1+ SWAP >DISK ( store text )     
    R> 0 MSG-PTRS @DISK 1+              
    2* 510 + !DISK   ( store pointer )  
    0 @DISK 1+ 0 !DISK ( inc mess # )   
   ELSE DROP ( ADR ) THEN               
  THEN ;                                
-------------------------------------------- SCREEN 132
( !MESSAGE               <10/17/85>272) 
\ store the message or increment        
\ the start the next group              
                                        
WARNOFF                                 
: !MESSAGE \ -- ;                       
  LBUF C@ ASCII # =                     
  IF \ start next group                 
   0 MSG-PTRS @DISK 1+ \ next msg #     
   2 @DISK 1+ DUP 2 !DISK               
   DUP 254 > ABORT" Too many groups"    
   CR DUP 4 U.R ."  --- "               
   2* 2+ !DISK                          
  ELSE                                  
    !MSG                                
  THEN ;                                
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
-------------------------------------------- SCREEN 133
( MINIT                  <10/17/85>273) 
\ initializes for COMP-MSGS             
                                        
WARNOFF                                 
: MINIT                                 
  DBUF 512 0 FILL                       
  0 DBUF     ! ( last msg # )           
  1 DBUF 2 + ! ( last group used )      
  1 DBUF 4 + ! ( start of group 1 )     
  DBUF 0 512 MSG-PTRS >DISK             
  2 0 MSG-TEXT !DISK                    
  0 2 0 >DISK  ( clip back file )       
  CR ."    1 --- " ;                    
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
-------------------------------------------- SCREEN 134
( MTHRU                  <10/17/85>274) 
\ compiles the messages                 
                                        
WARNOFF                                 
: MTHRU \ S E -- ;                      
  DEPTH 2 <                             
  ABORT" USE: start end MTHRU"          
  LAST-BLK ! NEXT-BLK !                 
  MINIT BLOCK>DBUF DROP                 
  BEGIN                                 
   GET-LINE NOT                         
  WHILE                                 
   !MESSAGE                             
  REPEAT                                
  FLUSH                                 
;                                       
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
-------------------------------------------- SCREEN 135
( QUOTE GLIST            < 2/13/86>275) 
WARNOFF                                 
                                        
10 CONSTANT INDVAL                      
55 CONSTANT LINES/PAGE                  
VARIABLE #LINES                         
VARIABLE PAGE#                          
                                        
: QUOTE NOOP 34 EMIT ;                  
                                        
: MTITLE                                
  1 PAGE# +! 12 EMIT                    
  CR INDVAL SPACES .M/D/Y 5 SPACES      
  ." Message listing" 15 SPACES         
  ." Page " PAGE# @ . CR CR CR ;        
                                        
: <MYCR>                                
  CR #LINES @ 1+ DUP LINES/PAGE >       
  IF DROP MTITLE 5 THEN                 
  #LINES ! ;                            
                                        
: MYCR CR ;                             
                                        
                               ( bobp ) 
-------------------------------------------- SCREEN 136
( GLIST                  <10/17/85>276) 
WARNOFF                                 
: GLIST \ grp -- ; list group n         
  DUP >R 1 2 MSG-PTRS @DISK WITHIN NOT  
  ABORT" Group not loaded"              
  MYCR INDVAL SPACES                    
  ." MESSAGE GROUP # " R@ . MYCR        
  0 @DISK EXEC TO LAST-MSG#             
  2 @DISK EXEC TO LAST-GRP#             
  R@ 2* 2+ @DISK   \ 1st message number 
  R@ 2 @DISK < NOT \ at last group?     
  IF 0 @DISK 2+    \ yes, get last msg# 
  ELSE R@ 2+ 2* @DISK 1+                
  THEN                                  
  SWAP - ( # in group ) DUP 0>          
  IF 1 ( grp # is J in loop )           
   DO INDVAL SPACES                     
    J 0 .R ASCII , EMIT I .             
    BEGIN SPACE OUT @ INDVAL 8 + =      
    UNTIL                               
    QUOTE I J EXEC .MSG QUOTE MYCR      
   LOOP                                 
  ELSE DROP THEN                        
  R> DROP MYCR ;               ( FAH  ) 
-------------------------------------------- SCREEN 137
( MLIST MPRINT           <10/17/85>277) 
WARNOFF                                 
: <MLIST> \ -- ;                        
  2 MSG-PTRS @DISK ( last grp # ) 1+ 1  
  DO I GLIST LOOP ;                     
                                        
: ?QUOTES \ -- ;                        
  PAGE TEXT                             
  ." Surrond with quotes"               
  (Y/N)?                                
  IF ' NOOP ELSE ' EXIT THEN            
  CFA ' QUOTE ! ;                       
                                        
: MLIST                                 
  ?QUOTES ' CR CFA ' MYCR !             
  1 ' INDVAL ! PAGE CR CR <MLIST> ;     
                                        
: MPRINT \ -- ;                         
  ?QUOTES 1 PR# 0 PAGE# !               
  ' <MYCR> CFA ' MYCR ! 10 ' INDVAL !   
  MSG-PTRS 100 #LINES ! MYCR <MLIST>    
  0 PR#  ;                              
                                        
WARNON                         ( FAH  ) 
-------------------------------------------- SCREEN 138
( write MLOADER to disk: < 2/12/86>278) 
ONLY FORTH VIRTUAL ALSO                 
  FORTH ALSO                            
                                        
 MLDR                                   
\ remember last LFA and DP              
  LATEST PFA-LFA  LASTLFA !             
  HERE SAVE-VDP !                       
\ restore system status                 
 ICEBOX @ VOC-LINK !                    
  ICEBOX 2+ @ DP !                      
  ICEBOX 4 + @ CONTEXT @ !              
\ unhook then re-install normally       
 FORGET-SYS                             
                                        
  MLDR                                  
  VIR-FLG @ SYS-FLG !                   
  SYS-LINK1 FIRSTLFA @ !                
  LASTLFA @ SYS-LINK2 !                 
  <PUT-VIR>    \ write to disk          
  V!AUX        \ copy to aux bank       
  FORGET-SYS  ONLY FORTH ALSO           
CR CR ." MLOADER written" CR CR         
                               ( bobp ) 
-------------------------------------------- SCREEN 139
( definitions in main mem<10/17/85>279) 
                                        
FORTH DEFINITIONS                       
                                        
GET-MLOADER                             
0 WARNING !                             
                                        
: MTHRU  GET-MLOADER MTHRU  ;           
: MLIST  GET-MLOADER MLIST  ;           
: MPRINT GET-MLOADER MPRINT ;           
                                        
1 WARNING !                             
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
