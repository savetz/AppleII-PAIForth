 ______________________________________________________________                                                                               Virtuoso - Apple Run-time diskwidth should work here )                   8192 3 * DP !          \ reserve space for 2 pages              CR CR ." First word: INDEX-SEC (zptr)" CR CR                    160 CONSTANT INDEX-SEC \ first sec# for index                      145 147 THRU \ zero page usage and names                        148 149 THRU \ Assembler extensions (SUBR,LABEL...)          XCREATE AMARKER \ appendix marker to forget heads                  150 155 THRU \ Parellel recieve words                           260 279 THRU \ aux memory access words                          190 249 THRU \ resource manager                                 156 189 THRU \ random primitives                                                                                             FORGET AMARKER                                                                                                         ( fahrunning double counter inc'd by NEXT                                                                     APPENDIX                                                          D0 CONSTANT zptr   \ working variable for field words           D2 CONSTANT GPATTERN \ pattern pointer                        \ D3 CONSTANT ???? \                                            \ D4 CONSTANT ???? \                                                                                                            DECIMAL MAIN                                                    EXIT ---------------------------------------                    Locations D0 through EF are not used by MVP-PADS, to allow      use of the Applesoft ram floating-point and graphics routines.                                                                  ( SYSTEM ZERO PAGE USAGE cont                    <11/ 1/89>145) HEX APPENDIX                                                                                                                    \ 0D5 CONSTANT ???? \                                           \ 0D6 CONSTANT ???? \                                           \ 0D7 CONSTANT ???? \                                           \ 0D8 CONSTANT ???? \                                           \ 0D9 CONSTANT ???? \                                           \ 0DA CONSTANT ???? \                                           \ 0DB CONSTANT ???? \                                           \ 0DC CONSTANT ???? \                                           \ 0DD CONSTANT ???? \                                           \ 0DE CONSTANT ???? \                                           \ 0DF CONSTANT ???? \                                           DECIMAL MAIN                                                                                                                    ( SYSTEM ZERO PAGE USAGE cont                    <11/ 1/89>147) HEX APPENDIX                                                      0E0 CONSTANT GBASE  \ >Y address                                0E2 CONSTANT 0ADR   \ >something                                0E4 CONSTANT GFIG   \ >fig data                                 0E6 CONSTANT &QUO   \ quocient                                  0E7 CONSTANT &REM   \ remainder                                 0E8 CONSTANT PMSK   \ pix to change                             0E9 CONSTANT TCLR   \ text color                                0EA CONSTANT PVAL   \ {putpack} temp                            0EB CONSTANT REMCNT \ pack cntr                                 0EC CONSTANT REP?   \ pack reg                                  0ED CONSTANT BYTE#  \ pack reg                                \ 0EE CONSTANT ?????                                            \ 0EF CONSTANT ?????                                            DECIMAL MAIN                                           (  PAI ) ( SUBR S; S'                                     <11/ 1/89>148) GET-A&E APPENDIX                                                \ things to make assembl er more useful                                                                                         : SUBR \ define headless word (which returns its location)         GET-A&E ?MAIN HERE 255 AND 255 = ALLOT                          HERE [APPN] CONSTANT SMUDGE [COMPILE] ASSEMBLER                 ASSEMBLER MEM !CSP FORTH [MAIN] ;                                                                                            : S; \ end definition                                              ?CSP [APPN] SMUDGE [MAIN] CURRENT @ CONTEXT ! ;                                                                              : S' \ -- adr, return main memory location of SUBR                ?FIND DROP @ [COMPILE] LITERAL ; IMMEDIATE                                                                                                                                                    ( LABEL LOBYTE HIBYTE                            <11/ 1/89>149)                                                                 : LABEL \ same as SUBR except head remembered                      [COMPILE] CODE                                                  <VAR> LATEST PFA CFA ! \ make word return address            ; IMMEDIATE                                                                                                                     : LOBYTE ( n -- m, return low byte of n )                          255 AND ;                                                    : HIBYTE ( n -- m, return hi byte of n )                           SP@ 1+ C@ SWAP DROP ;                                                                                                        MAIN                                                                                                                                                                                                                                                            ( 6821 I/O 32 DRIVER                             <10/24/89>150) \ written 05/22/89 by djl, modified 10/23/89 by fah                                                                             HEX \ ADRESSES FOR I/O 32 BOARD IN SLOT 2                          C0A4 CONSTANT PA \ PORT A, 6821 #1,A                            C0A5 CONSTANT CA \ CONTROL A, 6821 #1,A                         C0A8 CONSTANT PC \ PORT C, 6821 #2,A                            C0A9 CONSTANT CC \ CONTROL C, 6821 #2,A                      : SETUP  ( -- )                                                    0 CA C!  0 CC C!   \ access DDA                                 0 PA C! 0 PC C!    \ all bits input                             2C CA C! 2C CC C!  \ set pulse mode                             CA C@ 80 AND       \ test for ready                             IF PA C@ PC C@ DDROP THEN ;                                  DECIMAL                                                                                                                         ( RECEIVE                                        <10/24/89>151) \ count MUST be even or won't terminate                         CODE RECEIVE ( address count -- )                                  0 ,X LDA, N STA,      \ get LSB of count, save it               0 #  LDA, SEC, N SBC, \ compute (0 - LSB_COUNT)                 TAY, N STA,           \ into Y, to be addr offset               1 ,X LDA, N 1+ STA,   \ get count MSB save for X reg            CS NOT                \ increment MSB only if LSB <> 0          IF, N 1+ INC, THEN,                                             2 ,X LDA,             \ get address LSB                         SEC, N SBC,           \ back off addr by offset                 N STA,                \ save address LSB at N                   3 ,X LDA,             \ get address MSB                         0 #  SBC,             \ carry subtract to MSB                   INX, INX, INX,  INX,  \ 2DROP                                                                                       ( fah  ) ( RECEIVE cont.                                  <10/24/89>152)                                                                     XSAVE STX, N 1+ LDX,      \ get count of pages in X             N 1+ STA,                 \ save MSB of adresss                 BEGIN, CA BIT,            \ test CA1 lead                       DDUP 0< UNTIL,            \ till it goes high                    PA LDA, N )Y STA, INY,   \ Get LSB,  store at addr + Y          PC LDA, N )Y STA, INY,   \ Get MSB, store at addr + Y          DDUP 0= UNTIL,            \ till Y = 256                         N 1+ INC,                \ bump MSB of addr                     DEX,                     \ decrement page count                0= UNTIL,                 \ till no more pages                  XSAVE LDX,                                                      NEXT JMP, C;                                                DECIMAL                                                                                                                         ( RECV-BLOCKS                                    <10/24/89>153)                                                                 : RECV-BLOCKS ( start -- )                                         DEPTH 1 < ABORT" use: start RECV-BLOCKS"                        \ get number of blocks from IBM                                 SETUP CR PAD 2 RECEIVE                                          ." Recieve " PAD @ . ." Blocks from IBM" (Y/N)? CR              IF DUP PAD @ + SWAP                                              DO 46 EMIT I BUFFER 1024 RECEIVE UPDATE LOOP                    FLUSH                                                          ELSE DROP                                                       THEN ;                                                                                                                                                                                                                                                                                                                       ( REFRESH                                        <10/24/89>154)                                                                 \ recive 8K to hires graphics buffer                            : REFRESH ( -- )                                                   SETUP HGR                                                       BEGIN 8192 8192 RECEIVE  0 UNTIL ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ( fahcfa -- , check for real word, then call )             DUP @                                                           DUP <VAR> =                                                     OVER <CONST> = OR                                               OVER C@ 32 = OR ( does code? )                                  SWAP ' <:> = OR NOT                                             IF CR ." NOT A CFA AT " U. CR ABORT THEN                        EXECUTE ;                                                                                                                    : REAL-EXECUTE \ set above to run normal execute                   ' EXECUTE CFA @ ' ?EXECUTE CFA ! ;                                                                                                                                                                                                                  ( fah  ) ( 2^                                             <10/23/89>157)                                                                 CODE 2^ ( n --v , raise 2 to the nth power  0<=n<=15 )            BOT LDA, TAY,                                                   # 0 LDA, BOT 1+ STA,                                            # 1 LDA, BOT STA,                                               0 # CPY, 0= NOT                                                 IF,                                                              BEGIN, BOT ASL, BOT 1+ ROL, DEY, 0= UNTIL,                     THEN,                                                           NEXT JMP, C;                                                                                                                                                                                                                                                                                                                                                                                  ( SEED {random}    Bob's Random Number Generator < 1/25/88>  7) VARIABLE SEED 0 SEED !                                                                                                          : RANDOM ( N -- N' return "random" number 0 to N-1)                 SEED @ U* >R DROP                                               SEED @ 27517 * 2311 + SEED ! R> ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ( MARK-STACK                                     <10/23/89>159) \ **** WARNING:USES RETURN STACK TO SAVE OLD VALUE OF ^TOS ****                                                                 0 XCONSTANT ^TOS                                                                                                                CODE MARK-STACK \ -- , mark stack for @SP... words                 X' ^TOS LDA, PHA,                                               X' ^TOS 1+ LDA, PHA, \ save old value on return stack           TXA, X' ^TOS STA,                                               NEXT JMP, C;                                                                                                                                                                                                                                                                                                                                                                                                                                                 ( DROP-ARGS                                      <10/23/89>160)                                                                 CODE DROP-ARGS ( N -- , drop n args from stack )                     \ compute new top of stack                                    BOT LDA, .A ASL, CLC, X' ^TOS ADC, TAX,                           \ restore value ^TOS from return stack!!!!                    PLA, X' ^TOS STA,                                               PLA, X' ^TOS 1+ STA,                                            NEXT JMP, C;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 ( @SP0 @SP1 @SP2 @SP3                            <10/23/89>161)                                                                 CODE @SP0 \ -- n, get top item from MARK-STACK                     DEX, DEX, X' ^TOS LDY, 0 ,Y LDA, BOT STA,                       1 ,Y LDA, BOT 1+ STA, NEXT JMP, C;                           CODE @SP1 \ -- n, get second item from MARK-STACK                  DEX, DEX, X' ^TOS LDY, 2 ,Y LDA, BOT STA,                       3 ,Y LDA, BOT 1+ STA, NEXT JMP, C;                           CODE @SP2 \ -- n, get third item from MARK-STACK                   DEX, DEX, X' ^TOS LDY, 4 ,Y LDA, BOT STA,                       5 ,Y LDA, BOT 1+ STA, NEXT JMP, C;                           CODE @SP3 \ -- n, get fourth item from MARK-STACK                  DEX, DEX, X' ^TOS LDY, 6 ,Y LDA, BOT STA,                       7 ,Y LDA, BOT 1+ STA, NEXT JMP, C;                                                                                                                                                  ( fah  ) ( @SP4 @SP5                                      <10/23/89>162)                                                                 CODE @SP4 \ -- n, get fifth item from MARK-STACK                   DEX, DEX, X' ^TOS LDY, 8 ,Y LDA, BOT STA,                       9 ,Y LDA, BOT 1+ STA, NEXT JMP, C;                           CODE @SP5 \ -- n, get sixth item from MARK-STACK                   DEX, DEX, X' ^TOS LDY, 8 ,Y LDA, BOT STA,                       9 ,Y LDA, BOT 1+ STA, NEXT JMP, C;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ( fah  ) ( !SP0 !SP1 !SP2 !SP3                            <10/23/89>163)                                                                 CODE !SP0 \ n --, set top item in MARK-STACK                       X' ^TOS LDY, BOT LDA, 0 ,Y STA,                                 BOT 1+ STA, 1 ,Y STA, POP JMP, C;                            CODE !SP1 \ -- n, set second item in MARK-STACK                    X' ^TOS LDY, BOT LDA, 2 ,Y STA,                                 BOT 1+ STA, 3 ,Y STA, POP JMP, C;                            CODE !SP2 \ -- n, set third item in MARK-STACK                     X' ^TOS LDY, BOT LDA, 4 ,Y STA,                                 BOT 1+ STA, 5 ,Y STA, POP JMP, C;                            CODE !SP3 \ -- n, set fourth item in MARK-STACK                    X' ^TOS LDY, BOT LDA, 6 ,Y STA,                                 BOT 1+ STA, 7 ,Y STA, POP JMP, C;                                                                                                                                                   ( fah  ) ( !SP4 !SP5                                      <10/23/89>164)                                                                 CODE !SP4 \ -- n, set fifth item in MARK-STACK                     X' ^TOS LDY, BOT LDA, 8 ,Y STA,                                 BOT 1+ STA, 9 ,Y STA, POP JMP, C;                            CODE !SP5 \ -- n, set sixth item in MARK-STACK                     X' ^TOS LDY, BOT LDA, 10 ,Y STA,                                BOT 1+ STA, 11 ,Y STA, POP JMP, C;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ( fah  ) ( @SPN !SPN                                      <10/23/89>165)                                                                 CODE @SPN ( N -- V , fetch nth item from mark 0=first )            BOT LDA, .A ASL, CLC, X' ^TOS ADC, TAY,                         0 ,Y LDA, BOT STA,                                              1 ,Y LDA, BOT 1+ STA, NEXT JMP, C;                                                                                           CODE !SPN ( V N -- , store v to nth item from mark 0=first )       BOT LDA, .A ASL, CLC, X' ^TOS ADC, TAY,                         SEC LDA, 0 ,Y STA,                                              SEC 1+ STA, 1 ,Y STA, POPTWO JMP, C;                                                                                                                                                                                                                                                                                                                                                ( fah  ) ( BUFSUBL                                        < 1/31/88> 12) EXIT ---- should not need here --------                                                                                         \ compare cnt chars in strings,                                 \ case is significant, hi-bit is ignored                        CODE BUFSUBL ( seg1 ofs1 seg2 ofs2 cnt -- dif )                    CX POP DI POP ES POP AX POP DS POP                              SI PUSH SI, AX MOV ( old REP BYTE CMPS )                        DO AH, ES: [DI] MOV AH, # 127 AND                                  AL, [SI] MOV AL, # 127 AND SI INC DI INC AL, AH SUB          LOOPZ ( until match or count exhausted )                        CBW SI POP BX, CS MOV DS, BX MOV ES, BX MOV                     APUSH-JMP C;                                                                                                                                                                                                                                                 ( BUFCMPL BUFCMP                                 <10/23/89>167) EXIT ---- should not need here --------                                                                                         : BUFCMPL ( seg1 ofs1 seg2 ofs2 cnt -- T/F, T=equal )              BUFSUBL 0= ;                                                                                                                 : BUFCMP ( ADR1 ADR2 N -- T/F, T=match )                           >R >R GET:CS SWAP GET:CS R> R> BUFCMPL ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            ( fah  ) ( STRCMPL STRCMP                                 <10/23/89>168) EXIT ---- should not need here --------                                                                                         : STRCMPL ( seg1 ofs1 seg2 ofs2 -- T/F, T=equal )                  DOVER C@L >R DDUP C@L R@ =                                      IF R> BUFCMPL                                                   ELSE R> DROP DDROP DDROP 0                                      THEN ;                                                                                                                       : STRCMP ( ADR1 ADR2  -- T/F, T=match )                            OVER C@ >R DUP C@ R@ =                                          IF R> BUFCMP                                                    ELSE R> DROP DDROP 0                                            THEN ;                                                                                                                                                                              ( fah  ) ( DLA+ LA+                                       <10/23/89>169) EXIT ---- should not need here --------                         \ add double offset to long address                             CODE DLA+ ( seg adr doffs -- seg' adr' )                          DX POP CX POP BX POP AX POP  \ AX=seg BX=adr CX=dl DX=dh        CX, BX ADD DX, # 0 ADC       \ add up byte offsets              BX, CX MOV BX, # 15 AND      \ BX=adr'                          DX, 1 SHR CX, 1 RCR DX, 1 SHR CX, 1 RCR \ convert to segment    DX, 1 SHR CX, 1 RCR DX, 1 SHR CX, 1 RCR                         AX, CX ADD AX PUSH BX PUSH                                      NEXT-JMP C;                                                                                                                   : LA+ ( seg adr n -- seg' adr', add unsigned byte ... )           0 DLA+ ;                                                                                                                                                                             ( fah  ) ( DLA-                                           <10/23/89>170) EXIT ---- should not need here --------                         \ give the difference in bytes between the two addresses        CODE DLA- ( seg1 adr1 seg2 adr2 -- d )                            DX POP CX POP AX, # 0 MOV                \ CX=seg2 DX=adr2      CX, 1 SHL AX, 1 RCL CX, 1 SHL AX, 1 RCL  \ seg to bytes         CX, 1 SHL AX, 1 RCL CX, 1 SHL AX, 1 RCL                         DX, CX ADD AX, # 0 ADC CX, AX MOV        \ CX-DX=phy adr2       BX POP AX POP DX PUSH DX, # 0 MOV        \ AX=seg1 BX=adr1      AX, 1 SHL DX, 1 RCL AX, 1 SHL DX, 1 RCL  \ seg to bytes         AX, 1 SHL DX, 1 RCL AX, 1 SHL DX, 1 RCL                         BX, AX ADD DX, # 0 ADC AX, DX MOV DX POP \ AX-BX=phy adr1       BX, DX SUB AX, CX SBB                    \ find difference      BX PUSH AX PUSH NEXT-JMP C;                                                                                                                                                          ( fah  ) ( KB                                             <10/23/89>171) EXIT ---- should not need here --------                                                                                         : KB ( n -- d , convert KB to bytesfah  ) ( B->S "                                         <10/23/89>172)                                                                 : B->S ( byte -- word, sign extend byte )                         DUP 127 > IF -256 OR THEN ;                                                                                                   X: <"> ( leave adr of count byte )                                R> DUP COUNT + >R X;                                                                                                          : "                                                               ?LOADING STATE @                                                IF COMPILE <"> THEN                                             34 WORD C@ 1+ ALLOT                                           ; IMMEDIATE                                                                                                                                                                                                                                            ( fah  ) ( CASE:                                          <10/23/89>173)                                                                 : CASE:                                                            :                                                               DOES> ( 0 executes first word )                                   SWAP 2* + @ EXECUTE ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( fah  ) ( LFILL                                          <10/23/89>174) EXIT ---- should not need here --------                                                                                         CODE LFILL ( seg adr byte cnt -- )                                CX POP AX POP DI POP ES POP                                     REP BYTE STOS                                                   AX, DS MOV ES, AX MOV                                           NEXT-JMP C;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          ( fah  ) ( RL SL FLE                                      <10/20/88> 29) EXIT ---- should not need here --------                         0 CONSTANT OLDPAT                                                                                                               : RLPATCH ( --, tries to forget first word )                       OLDPAT INTO HEAD     \ restore normal head words                >IN @ FORGET >IN !   \ forget any words with same name          ' HEAD >R ;          \ execute word that was replaced                                                                        : RL ( -- , set vectors to reload )                                OLDPAT 0= IF ' HEAD @ TO OLDPAT THEN                            REVECTOR RLPATCH INTO HEAD ;                                                                                                 : SL  SCR @ LOAD ;                                              : FLE RL SCR @ LAST-SCR THRU ;                                                                                                  ( TYPEL                                          < 1/25/88> 27) EXIT ---- should not need here --------                                                                                         : TYPEL ( seg adr cnt -- )                                        ?DUP                                                            IF 0                                                             DO DDUP C@L EMIT 1+                                             LOOP                                                           THEN                                                            DDROP                                                         ;                                                                                                                                                                                                                                                                                                                                                                                               ( ZSTRLEN                                        <10/23/89>177)                                                                 : ZSLEN \ adr --- n, len of zero delimted string (not inc 0)       0                                                               BEGIN SWAP COUNT                                                WHILE SWAP 1+ REPEAT                                            SWAP DROP ;                                                                                                                                                                                  EXIT ---- should not need here --------                                                                                         : ZSTRLEN \ seg adr -- n, len of zero delimted string                                                                                                                                                                                                                                                                  ( fah  ) ( UC UC-STR UC=                                  <10/23/89>178)                                                                 : UC ( C -- C' , Convert character to upper case )                 DUP ASCII a ASCII z WITHIN                                      IF 32 - THEN ;                                                                                                               : UC-STR ( ADR -- )                                                COUNT 0                                                         DO DUP C@ UC OVER C! 1+ LOOP                                    DROP ;                                                                                                                       : UC= ( l1 l2 -- T/F, T=chars equal, ignores case )                UC SWAP UC = ;                                                                                                                                                                                                                                      ( fah  ) ( IF.. ..THEN                                    <10/23/89>179)                                                                 : IF.. ( -- , first if of if-else structure )                     -1 ( flag for ..THEN ) [COMPILE] IF                           ; IMMEDIATE                                                                                                                     : ..THEN ( --, generate as many thens as neededclear raw instruction counter )                    0. RAWCNT D! ;                                               : @RAWCNT ( -- dbl, read raw instruction counter )                 RAWCNT D@ ;                                                  : @TIMECOUNT ( --, read raw counter, convert to 18.2/sec )         @RAWCNT RAW-CONV M/MOD ROT DROP ;                                                                                            : DELAY ( N --, wait for n ticks to occurllocate areas                             EMPTY-RESOURCES   -- Empty all resources                                                                                      n RES-LOCATE        -- get seg of res n (never purged)          n DATA-LOCATE       -- get seg of res n (purged last)             DEC-DEATH-COUNT   -- dec count to determine who dies                                                                          b HALLOC            -- return handle num of area b bytes        n PT-HALLOC         -- return seg of HALLOC n                   n HFREE             -- release handle alloc by HALLOC                                                                                                                                                                                                ( fah  ) ( NOTES                                          <10/26/89>192) EXIT --------------------------------------------------------                                                                   The resource table is a FIXED length table that maintains       information on every resource plus a fixed length table for     the location of dynamically allocated items.                                                                                    The 1st 128 bytes hold a text message (unused)                                                                                  The next 6 bytes are used to hold table info                                                                                      0 word: ID for resource file index (-123)                       2 word: Value for RES-NUMBER                                    4 word: Unused                                                                                                                                                                       ( fah  ) ( RESOURCE TABLE FORMAT                          <10/26/89>193) EXIT --------------------------------------------------------                                                                   The fixed information about resource items are stored in an     array at the start of the data file and read into memory at     the start of the program:                                                                                                        ofs size  contents                                               0   1    flags                                                  1   2    Length of items in bytes                               3   3    Offset to start location in data file                                                                                                                                                                                                                                                                                                                                       ( fah  ) ( RESOURCE TABLE FLAG                            <10/26/89>194) EXIT --------------------------------------------------------                                                                     bit(s) contents                                                   7     1=Never remove this item                                  6     1=Remove at the end of the section                        5     1=Item is not loaded                                      4     Unused, set to zero                                      3-0    Release counter                                                                                                       If Bit 7, 6 and 5 are zero the release counter is scanned to    determine which resource to release when more memory is requiredThe value is set every time a resource is accessed. It is       dec'd by DEC-HEAP-COUNTS, when its time to purge the lowest     numbered counters are released first.                                                                                  ( fah  ) ( LOCATION TABLE FORMAT                          <10/26/89>195) EXIT --------------------------------------------------------                                                                   To track the current location of a resource items another       array (with the same index as the resource array) is created    to hold the location in memory of the resource or zero if it    is not currently loaded.                                                                                                         ofs size  contents                                               0   2    Start segment of block or zero                                                                                       The contents of this array may vary be machine/operating        system                                                                                                                                                                                                                                                 ( fah  ) ( MANAGING THE MEMORY                            <10/26/89>196) EXIT --------------------------------------------------------                                                                   Since resource are loaded and released in a random order        we must have a method of reclaiming released space that         prevents fragmentation.                                                                                                         Every time an item is released any items that area above        the freed block will be moved down and the pointers will        be adjusted. This will assure that all allocated memory will    be contigeous and that available memory will be contingeuos     on the top of memory.                                                                                                                                                                                                                                                                                                  ( fah  ) ( DYNAMICALLY ALLOCATED STORAGE                  <10/26/89>197) EXIT --------------------------------------------------------                                                                   This mechanism also provides for a method allocating a fixed    number of "extra" memory handles. These blocks recieve entries  in both the resource table and the location table.              The flag byte in the resource table is set to never purge       so that it will not be removed by the purge process.            It will remain in the heap until it is freed with HFREE                                                                         NOTE - Both HALLOC and HFREE can cause heap movement.                                                                                                                                                                                                                                                                                                                                  ( fah  ) ( CHANGES FROM IBM TO APPLE VERSION              <10/27/89>198) EXIT --------------------------------------------------------                                                                   This code was translated directly from the IBM source code      with the following exceptions:                                                                                                   -- Support for two resource tables has been removed             -- Changed resload to use GET-DISK to read resources            -- Removed SAVE:SEG-LEN                                         -- only low byte of field length is copied to FLEN                                                                                                                                                                                                                                                                                                                                                                                                             ( -RES-                                          <10/27/89>199)                                                                 ONLY FORTH ALSO DEFINITIONS                                                                                                       VOCABULARY -RES- IMMEDIATE                                                                                                    ONLY FORTH ALSO -RES- ALSO FORTH DEFINITIONS                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ( fah  ) ( Global variables                               <10/27/89>200) FORTH DEFINITIONS                                                                                                                500 CONSTANT HEXTRA       \ extra handles to alloc over resrc       VARIABLE LOC-TABLE    \ start segment of location table       0 CONSTANT LAST-HAL#    \ last resource number halloc'd                                                                                                                                          VARIABLE HAN-NUMBER    \ number of resource handles            0 CONSTANT LAST-RES#   \ arg to last PT-RESOURCE                                                                                                                                                                                                                                                                                                                                                                                                             ( Local variables - table definers               <10/27/89>201) -RES- DEFINITIONS                                                                                                                   XVARIABLE RES-NUMBER  \ # of fixed resource handles                                                                             XVARIABLE RES-TABLE   \ start segment of resource table                                                                         XVARIABLE HEAP-START  \ seg of 1st available heap loc           XVARIABLE HEAP-END    \ seg of lst non-valid heap loc           XVARIABLE HEAP-FREE   \ pointer to free space in heap                                                                                                                                       200 HAN-NUMBER !                                                                                                                                                                                                                                                ( Local variables - working                      <10/27/89>202) -RES- DEFINITIONS                                                                                                                  0 XCONSTANT HAN-SEG     \ start seg of block were releasing     0 XCONSTANT HAN-SEG-LEN \ segment len of above                                                                                  0 XCONSTANT ^RES-ITEM   \ offset to current resource entry      6 XCONSTANT RES-ILEN    \ byte len of resource table            0 XCONSTANT ^LOC-ITEM   \ offset to current resource location   2 XCONSTANT LOC-ILEN    \ byte len of location table                                                                                                                                                                                                                                                                                                                                                                                                         ( D>SEG >SEG                                     <10/27/89>203) FORTH DEFINITIONS                                                                                                               : D>SEG ( dnum -- n, convert number of bytes to number of segs )  2 M/ SWAP 0= NOT + ;                                                                                                          : >SEG ( num -- nfah  ) ( @RES-FLAG !RES-FLAG @RES-SIZE @RES-POS         <10/27/89>204) FORTH DEFINITIONS                                                \ offset to item in resource table, set by <PT-RESOURCE>       : @RES-FLAG ( -- v )                                               RES-TABLE @ ^RES-ITEM C@L ;                                  : !RES-FLAG ( v -- )                                               RES-TABLE @ ^RES-ITEM C!L ;                                  : @RES-SIZE ( -- v )                                               RES-TABLE @ ^RES-ITEM 1+ @L ;                                : !RES-SIZE ( v -- )                                               RES-TABLE @ ^RES-ITEM 1+ !L ;                                : @RES-POS ( -- v )                                                RES-TABLE @ ^RES-ITEM 3 + T@L ;                              : !RES-POS ( -- v )                                                RES-TABLE @ ^RES-ITEM 3 + T!L ;                                                                                     ( fah  ) ( @RES-SEG                                       <10/27/89>205) FORTH DEFINITIONS                                                \ offset to item in location table, set by <PT-RESOURCE>                                                                       : @RES-SEG ( -- v )                                                LOC-TABLE @ ^LOC-ITEM @L ;                                   : !RES-SEG ( v -- )                                                LOC-TABLE @ ^LOC-ITEM !L ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          ( fah  ) ( {@han-seg}                                     <10/27/89>206) EXIT ---------                                                  FORTH DEFINITIONS                                                                                                               VARIABLE han-seg  \ RET: seg of handle                                                                                          \  --- SOME CODE WORDS (NOTABLY THE RECORD WORDS) WILL ----     \  --- GET THE SEGMENT THEMSELVES BE SURE TO CHECK!!!  ----     \ NOTE: No checks are made to assure handle is loaded!                                                                                                                                                                                                                                                                                                                                                                                                                                                                 ( fah  ) ( {@han-seg}                                     <10/27/89>207) EXIT                                                                                                                            SUBR {@han-seg}n -- s, ret #segs for HAN-NUMBER,  n bytes)        HAN-NUMBER @ * >SEG X;                                                                                                      X: ?RESNUM ( n -- abort if n is not valid resource # )             HAN-NUMBER @ U< NOT ABORT" resource # errfah  ) ( SETUP-RESOURCE                                 <10/27/89>209) FORTH DEFINITIONS                                               : SETUP-RESOURCE ( -- , setup memory locations )                    \ *** set HAN-NUMBER to desired value before calling ***        \ set point to the end of available free memory                AUX-END HEAP-END !         ( get end of memory from PSP )        \ set resource table to the start of available memory          AUX-START RES-TABLE !                                            \ put the location table after the resource table              RES-TABLE @ RES-ILEN TBL-SEG-LEN + 5 + LOC-TABLE !               \ set the start of the heap, and free memory after loc tab     LOC-TABLE @ LOC-ILEN TBL-SEG-LEN + 5 +                          DUP HEAP-START ! HEAP-FREE !                                    1 RES-NUMBER ! \ no fixed stuff, 1st HALLOC is 1             ;                                                                                                                               ( ?RESNUM <PT-RESOURCE>                          <10/24/89>214) FORTH DEFINITIONS                                                                                                               : <PT-RESOURCE> \ n -- point to resource entry n (0=1st)           ( n ) >R  \ set RES-ITEM to point to resource table             RES-ILEN R@ * TO ^RES-ITEM                                       \ set LOC-ITEM to point to location table                      LOC-ILEN R> * TO ^LOC-ITEM                                   ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ( PT-RESOURCE RE-PT-RESOURCE                     <10/24/89>215) FORTH DEFINITIONS                                                                                                               : PT-RESOURCE \ n -- point to resource entry n (0=1st)             DUP TO LAST-RES# DUP ?RESNUM                                    <PT-RESOURCE> ;                                                                                                              : RE-PT-RESOURCE \ --, re-point to last PT-RESOURCE                LAST-RES# <PT-RESOURCE> ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ( SET-NOT-LOADED SET-LOADED                      <10/27/89>212) FORTH DEFINITIONS                                                                                                               : SET-NOT-LOADED \ -- set flag to indicate not loaded              @RES-FLAG 32 OR !RES-FLAG ;                                                                                                  : SET-LOADED \ -- set flag to indicate not loaded                  @RES-FLAG 223 AND !RES-FLAG ;                                                                                                : NOT-LOADED? \ -- T/F, T=resource is not loaded/allocated         @RES-FLAG 32 AND 32 =                                        ;                                                                                                                                                                                                                                                                                                                      ( fah  ) ( EMPTY-RESOURCES                                <10/27/89>213) FORTH DEFINITIONS                                               : EMPTY-RESOURCES ( -- forget about all memory set to empty )       \ reset heap pointer                                           HEAP-START @ HEAP-FREE !                                         \ for all fixed resources, clear loaded flag/seg               RES-NUMBER @ 0                                                  DO I PT-RESOURCE                                                 SET-NOT-LOADED 0 !RES-SEG                                      LOOP                                                             \ for all dynamic resources, clear loaded flag/size/seg        HAN-NUMBER @ RES-NUMBER @                                       DO I PT-RESOURCE                                                 32 !RES-FLAG 0 !RES-SEG 0 !RES-SIZE                            LOOP                                                         ;                                                      ( fah  ) ( PACK-HEAP                                      <10/27/89>214) -RES- DEFINITIONS                                                                                                               X: PACK-HEAP ( -- move heap data down over HAN-SEG )               HAN-SEG HAN-SEG-LEN + 0    \ source address                     HAN-SEG 0                  \ dest address                       HEAP-FREE @ 3 PICK - DUP 0>  \ segments to move                 IF ( # segs) 2*            \ bytes to move                       CMOVEL EXIT               \ move it                            THEN                                                            DDROP DDROP                                                  X;                                                                                                                                                                                                                                                                                                                     ( fah  ) ( <PACK-HANDLE>                                  <10/31/89>215) -RES- DEFINITIONS                                                                                                               XCODE <PACK-HANDLE> ( seg n -- seg adjust handle n at seg  )       BOT ASL, BOT 1+ ROL,        \ mult handle num by two            from_mem JSR,               \ read value from memory ...        DEX, DEX, to_stack JSR,     \ to one below bottom of stack      # 2 LDA, N 4 + STA, # 1 LDA, N 5 + STA,                         ' transfer JSR,             \ segment now at BOT                SEC, X' HAN-SEG LDA, BOT SBC,                                   X' HAN-SEG 1+ LDA, BOT 1+ SBC, CS \ this U> han-seg?            IF, POPTWO JMP,             \ yes, drop val&ofs, exit           THEN,                                                                                                                                                                                                                                               ( fah  ) ( <PACK-HANDLE> cont                             <10/31/89>216)                                                                    SEC, BOT LDA,                     \ subtract HAN-SEG-LEN...     X' HAN-SEG-LEN SBC, BOT STA,       \ from current value         BOT 1+ LDA,                                                     X' HAN-SEG-LEN 1+ SBC, BOT 1+ STA,                              0 # LDY, from_stack JSR,          \ write from stack            INX, INX, to_mem JSR,             \ to memory                   # 2 LDA, N 4 + STA, # 1 LDA, N 5 + STA,                         ' transfer JSR,                                                 POP JMP,  ( drop ofs, leave seg )                            XC;                                                                                                                                                                                                                                                                                                                             ( PACK-HANDLES                                   <10/27/89>217) -RES- DEFINITIONS                                                                                                               X: PACK-HANDLES                                                     LOC-TABLE @ ( seg of handles )                                  HAN-NUMBER @ 1                                                  DO I <PACK-HANDLE> LOOP                                         DROP                                                            \ decrement free pointer                                        HEAP-FREE @ HAN-SEG-LEN - HEAP-FREE !                       X;                                                                                                                                                                                                                                                                                                                                                                                              ( RELEASE                                        <10/27/89>218) FORTH DEFINITIONS                                                                                                               : <RELEASE> ( --, relase this res mem, compact heap )              NOT-LOADED? ABORT" RELEASE: Already released!"                  @RES-SEG TO HAN-SEG                                             @RES-SIZE >SEG TO HAN-SEG-LEN                                   SET-NOT-LOADED    \ set flag that its released                  PACK-HEAP         \ move down over this allocation              PACK-HANDLES      \ adjust the handles                       ;                                                                                                                               : RELEASE ( handle --, relase hanlde memory, compact heap )        PT-RESOURCE <RELEASE>                                           RE-PT-RESOURCE ;                                                                                                    ( fah  ) ( HEAP-PURGE notes                               <10/27/89>219) EXIT ---------------------------------------------------------- When deciding which items to purge the RES-FLAG byte is used    in the following way:                                                                                                           15 passes are made through the RESOURCE table with i=0 to 14    For each resource if count/flag byte is equal to i this         resource is released. Since flags are stored with the count     this means that if any flag is set it will never be checked.    Also count values of 15 are NEVER purged as they are needed     by this screen.                                                                                                                 HEAP-PURGE will leave 16K or twice requested, whichever         is greater.                                                                                                                                                                            ( fah  ) ( HEAP-AVAIL U2/                                 <10/27/89>220) FORTH DEFINITIONS                                                                                                               : HEAP-AVAIL ( -- segs, return free segs in heap )                 HEAP-END @ HEAP-FREE @ - ;                                                                                                   CODE U2/  ( n -- n, unsigned divided n by 2 )                      BOT 1+ LSR, BOT ROR, DEY,                                       NEXT JMP, C;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ( fah  ) ( PRG-NEEDED PRG-DONE?                           <10/27/89>221) -RES- DEFINITIONS                                                                                                               0 XCONSTANT PRG-NEEDED \ segments needed by purge                                                                               X: PRG-DONE? ( -- T/F, T=we have purged enough were done )         PRG-NEEDED HEAP-AVAIL U< X;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ( SET-PURGE                                      <10/27/89>222)                                                                 FORTH DEFINITIONS                                               \ SET-PURGE is used to allow routines to define a minimum       \ purge amount so that purge not required for every alloc       \ once the space is full                                                                                                        : SET-PURGE ( N -- N' )                                            EXIT ( only needed in runtime )                                 \ relase 2N or 16K whichever larger                             2* 1024 MAX                                                  ;                                                                                                                                                                                                                                                                                                                               ( <HEAP-PURGE>                                   <10/27/89>223) FORTH DEFINITIONS                                                                                                               : <HEAP-PURGE> \ N --, clear till segments available               SET-PURGE TO PRG-NEEDED PRG-DONE? NOT                           IF 15 0                                                          DO RES-NUMBER @ 0 \ can only purge resources                     DO I <PT-RESOURCE> @RES-FLAG J =                                 IF <RELEASE> PRG-DONE? IF LEAVE THEN                            THEN                                                           LOOP                                                            PRG-DONE? IF LEAVE THEN                                        LOOP                                                            PRG-DONE? NOT ABORT" HEAP-PURGE: no memory"                   THEN ;                                                                                                               ( fah  ) ( HEAP-PURGE                                     <10/27/89>224) FORTH DEFINITIONS                                                                                                               : HEAP-PURGE \ bytes --, through away things till enough room      \ for @RES-SIZE bytes at HEAP-FREE                              U2/ <HEAP-PURGE> ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ( fah  ) ( HEAP-OPEN INC-HEAP                             <10/27/89>225) -RES- DEFINITIONS                                                                                                               X: HEAP-OPEN ( -- check if room for RES-SIZE bytes )                \ if no room at free, purges HEAP to make room                  @RES-SIZE HEAP-PURGE                                            RE-PT-RESOURCE X;                                                                                                                                                                           X: INC-HEAP ( -- set loc of this, inc free pointer )               HEAP-FREE @ !RES-SEG          \ no, remember loc                @RES-SIZE >SEG HEAP-FREE +!  \ increment free ptr            X;                                                                                                                                                                                                                                                     ( fah  ) ( GET-DISK variables                             <10/27/89>226) FORTH DEFINITIONS                                                                                                                  0 CONSTANT SEC-START ( first sector number )                    0 CONSTANT NUM-SEC   ( number of sectors  )                     6 CONSTANT SEC-SLOT  ( read/write slot number )                 0 CONSTANT SEC-DR    ( read/write slot drive )                  0 CONSTANT SEC-LAST  ( last sec# read by GET-SEC# )                                                                             CREATE SEC-BUF       ( location where GET-DISK reads raw )        256 ALLOT          ( sector value )                                                                                        \ special disk error codes                                      \ -1: sector number out of range                                \ -2: verify error                                                                                                              ( GET-SEC# PUT-SEC#                              <10/27/89>227) FORTH DEFINITIONS                                                                                                               : ?SEC# ( sec -- errors if bad sector number )                     NUM-SEC U< NOT  ( check if in range )                           IF -1 DISK-ERROR ! DISKERR THEN ;                                                                                            : GET-SEC# ( sec# --, won't reload if = SEC-LAST )                 DUP SEC-LAST = IF DROP EXIT THEN                                DUP ?SEC# SEC-START + >R        ( read sector to read )         SEC-BUF SEC-SLOT SEC-DR R> SECS/TRK /MOD 1 1 RWTS ;                                                                          : PUT-SEC# ( sec# -- write out SEC-BUF to sector )                 DUP ?SEC# SEC-START + >R        ( sector to write d )           SEC-BUF SEC-SLOT SEC-DR R> SECS/TRK /MOD 0 1 RWTS ;                                                                          ( SEC# <GET-DISK>                                <10/27/89>228) FORTH DEFINITIONS                                                                                                               : SEC# ( doffs -- ofs sec# )                                       0 256 U/MOD ;                                                                                                                : <GET-DISK> ( seg adr ofs sec# cnt -- seg' adr' )                 ?DUP                                                            IF >R GET-SEC#                 \ read requested sector           GET:CS SEC-BUF ROT +          \ copy requested part             DOVER R@ CMOVEL               \ to current address              R> +                          \ increment memory               ELSE DDROP THEN                \ do nothing if zero count    ;                                                                                                                                                                                               ( GET-DISK                                       <10/27/89>229) FORTH DEFINITIONS                                                                                                               : GET-DISK \ doffs seg adr cnt -- load cnt bytes to seg adr        >R DSWAP SEC#             ( seg adr ofs sec# -- )               BEGIN OVER R@ + 255 >     \ crosses sectors?                    WHILE 256 3 PICK -        \ count left in this sector            R> OVER - >R             \ dec remaining count                  OVER >R                  \ remeber this sec#                    <GET-DISK>               \ read/move/inc                        0 R> 1+                  \ next ofs zero, inc sec#             REPEAT                                                          R> <GET-DISK>             \ now read the last part              ( seg adr ) DDROP ;                                                                                                                                                                          ( RES-LOAD                                       <10/24/89>230) -RES- DEFINITIONS                                                                                                               : RES-LOAD ( -- T/F, T=resource loaded )                            \ load the last PT-RESOURCE from file                          HEAP-OPEN   \ make room to read this                            @RES-POS HEAP-FREE @ 0 @RES-SIZE GET-DISK                       INC-HEAP SET-LOADED                                             1 ( okhan --, verify resource is loaded, load it        ?DUP 0= IF EXIT THEN                                            PT-RESOURCE                                                     NOT-LOADED?                                                     IF \ check to be sure its not a dynamic handle                   LAST-RES# RES-NUMBER @ U< NOT                                   ABORT" NO LONGER ALLOCATED!"                                    RES-LOAD DROP \ now try to load it ignore error                THEN ;                                                                                                                                                                                                                                                                                                              ( fah  ) ( <RES-LOCATE>                                   <10/27/89>232) FORTH DEFINITIONS                                                                                                               : <RES-LOCATE> ( n -- seg, return pointer to resource )            \ will load the resource if it is not in memory                 <RES-VERIFY>                                                    @RES-SEG  \ return the locationfah  ) ( RES-LOCATE                                     <10/27/89>233) FORTH DEFINITIONS                                                                                                               : RES-LOCATE \ n -- seg, get loc of resource, loads if needed      <RES-LOCATE> ( get/point to it )                                  \ reset death count to 15 so these are never forgotten          \ until the next DEC-DEATH-COUNT                              @RES-FLAG 15 OR !RES-FLAG                                    ;                                                                                                                               : RES-VERIFY \ n --, check if resource loaeded, reset death cnt    <RES-VERIFY>                                                    @RES-FLAG 15 OR !RES-FLAG                                    ;                                                                                                                                                                                      ( fah  ) ( DATA-LOCATE                                    <10/27/89>234) FORTH DEFINITIONS                                                                                                               : DATA-LOCATE \ n -- seg, get loc of data res, loades if needed    <RES-LOCATE> ( get/point to it )                                  \ reset death count to 14 so data for this screen (which        \ should not change and may be large) will be forgotten         \ as a last resort before we run out of memory                @RES-FLAG 240 AND 14 OR                                         !RES-FLAG                                                    ;                                                                                                                                                                                                                                                                                                                                                                                      ( fah  ) ( <DEC-DEATH-COUNT>                              <10/27/89>235) FORTH DEFINITIONS                                                                                                               : <DEC-DEATH-COUNT> \ -- for all resources                         440 2 TONE                                                      \ only operates on resource 0 to RES-NUNBER - 1                 RES-NUMBER @ 0                                                  DO I <PT-RESOURCE> \ if any flag bit set count not changed       @RES-FLAG 1 15 WITHIN                                           IF @RES-FLAG 1- !RES-FLAG THEN                                 LOOP                                                            RE-PT-RESOURCE                                                  880 2 TONE                                                   ;                                                                                                                                                                                      ( fah  ) ( HALLOC etc notes                               <10/27/89>236) EXIT ---------------------------------------------------------                                                                  The HALLOC words are used to allocate and free dynamic          memory blocks that are sometimes needed as the program runs     (for saving screen images, etc..) they operate exactely         like resources except that HALLOC's set the death count to      15 which will prevent them being from being purged although     they still maybe moved.                                                                                                         they are never purged because dec death count doesn't change    the death count if it is 15                                                                                                                                                                                                                                                                                            ( fah  ) ( PT-FREE-HAN                                    <10/27/89>237) -RES- DEFINITIONS                                                                                                               X: PT-FREE-HAN ( -- , point to 1st avail free handle )             \ scan all table entries from resource top to end               HAN-NUMBER @ RES-NUMBER @                                       DO I PT-RESOURCE NOT-LOADED?                                     IF LEAVE THEN                                                  LOOP                                                            NOT-LOADED? 0= ABORT" No free handles!"                      X;                                                                                                                                                                                                                                                                                                                                                                                     ( fah  ) ( HALLOC PT-HALLOC                               <10/27/89>238) FORTH DEFINITIONS                                                                                                               : HALLOC ( bytes -- han, return handle to block )                  \ allocate a handle with enough room for n BYTES                \ mark as NON-PURGABLE so it won't be unexpectidely released    PT-FREE-HAN                                                     ( n ) !RES-SIZE     \ set size                                  HEAP-OPEN           \ make room for item                        INC-HEAP            \ reserve space for item                    128 !RES-FLAG       \ SET NOT-PURGABLE BIT                      LAST-RES#           \ return number of free handle              DUP TO LAST-HAL#                                             ;                                                                                                                                                                                      ( fah  ) ( RS-TOP ?RCHK                                   <10/27/89>239) -RES- DEFINITIONS                                                                                                               X: RS-TOP ( bytes -- , resize resource at top of heap )            !RES-SIZE                     \ set to new size                 @RES-SEG @RES-SIZE >SEG +     \ set free to after me            HEAP-FREE ! X;                                                                                                               X: ?RCHK ( N -- , point to resource n, check if loaded )           PT-RESOURCE                                                     NOT-LOADED? ABORT" Handle released!" X;                                                                                                                                                                                                                                                                                                                                             ( fah  ) ( RS-OTHER                                       <10/27/89>240) -RES- DEFINITIONS                                                                                                               X: RS-OTHER ( bytes --, resize resource not at top )                 \ HAN-SEG and HAN-SEG-LEN set to size of orig                  HAN-SEG 0 HEAP-FREE @ 0    \ orig loc, new loc                  @RES-SIZE CMOVEL           \ copy to top                        ( bytes ) !RES-SIZE        \ set to new size                    HEAP-FREE @ !RES-SEG       \ set new location                   HEAP-FREE @ @RES-SIZE >SEG +                                    HEAP-FREE !                \ set new top                        PACK-HEAP                  \ move down over old copy            PACK-HANDLES X;                                                                                                                                                                                                                                    ( fah  ) ( HRESIZE                                        <10/27/89>241) FORTH DEFINITIONS                                                                                                               : HRESIZE ( bytes han --, resize handle to bytes )                   \ **** WILL ALWAYS CAUSE HEAP MOVEMENT *****                   PT-RESOURCE ( bytes ) >R                                        R@ HEAP-PURGE      \ make room on heap for new item             @RES-SEG TO HAN-SEG             \ set pointers to release..     @RES-SIZE >SEG TO HAN-SEG-LEN   \ old when we're done           HAN-SEG HAN-SEG-LEN + HEAP-FREE @ = \ at top already?           IF R> RS-TOP                    \ yes, this ones easy           ELSE R> RS-OTHER                \ no, copy, resize              THEN ;                                                                                                                                                                                                                                             ( fah  ) ( PT-HALLOC HBLK-SIZE                            <10/27/89>242) FORTH DEFINITIONS                                                                                                               : PT-HALLOC ( h -- seg, return location of halloced item )         \ aborts if the handle has been relased                         ?RCHK @RES-SEG  \ return the location                        ;                                                                                                                               : HBLK-SIZE ( h -- n, return byte size of halloc'd item )          ?RCHK @RES-SIZE ;                                                                                                                                                                                                                                                                                                                                                                                                                                   ( fah  ) ( <HFREE> HFREE                                  <10/27/89>243) FORTH DEFINITIONS                                                                                                               : <HFREE> \ n -- relase memory for resource or halloc              PT-RESOURCE <RELEASE>                                           SET-NOT-LOADED                                                  0 !RES-SEG    \ clear location                               ;                                                                                                                               : HFREE ( N -- release handle n )                                  DUP RES-NUMBER @ U< ABORT" Can't HFREE resources"               <HFREE> ;                                                                                                                                                                                                                                                                                                           ( fah  ) ( ?RESLE                                         <10/24/89>245) -RES- DEFINITIONS                                                                                                               XCREATE RESHEAD 6 ALLOT                                                                                                         X: CLR-NL                                                          RES-NUMBER @ 1                                                  DO I PT-RESOURCE SET-NOT-LOADED LOOP X;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ( READ-INDEX                                     <10/24/89>246) -RES- DEFINITIONS                                                                                                               X: READ-INDEX \ -- read index file,                                128. GET:CS RESHEAD 6 GET-DISK      \ read resource header      RESHEAD @ DUP -123 = NOT                                        IF -2 DISK-ERROR ! DISKERR THEN     \ verify error              RESHEAD 2+ @ HEXTRA + HAN-NUMBER !  \ set tot # handles         SETUP-RESOURCE EMPTY-RESOURCES      \ clear new table           RESHEAD 2+ @ RES-NUMBER !           \ set # of fixed resource   134. RES-TABLE @ 0                  \ source ofs, dest adr      RES-NUMBER @ 6 * GET-DISK           \ count                     CLR-NL X;                                                                                                                                                                                                                                                    ( OPEN-RESOURCE CLOSE-RESOURCE                   <10/24/89>247) FORTH DEFINITIONS                                                                                                               : OPEN-RESOURCE \ -- read in index file                            -1 TO SEC-LAST          \ set SEC-BUF as not loaded             INDEX-SEC TO SEC-START  \ point to index                        READ-INDEX                                                      \ increment SEC-START to start with data "file"                 RES-NUMBER @ 6 * 134 + 256 / ' SEC-START +!                  ;                                                                                                                               : CLOSE-RESOURCE \ -- close file                                ;                                                                                                                                                                                                                                                               ( ^DATA                                          <10/27/89>247) FORTH DEFINITIONS                                                                                                               : ^DATA ( doffs -- seg adr )                                       \ in the handle system the high word of doffs is unused         \ as it is not needed, the low word is the resource id          0= NOT ABORT" ^DATA: 0 expected!"                               ( resource id ) DATA-LOCATE ( seg of resource )                 0 ( offset is always zero )                                  ;                                                                                                                                                                                                                                                                                                                                                                                                                                                      ( fah  ) ( MEMORY-INIT                                    <10/27/89>248) FORTH DEFINITIONS                                                                                                               : MEMORY-INIT \ clear tables/allocationstest words                                     <10/31/89>250) 10 HAN-NUMBER !                                                 : TI MEMORY-INIT ;                                              : .RES @RES-FLAG . @RES-SIZE . @RES-SEG U. @RES-POS D. CR ;     : .T CR CR HAN-NUMBER @ 1 \ RES-NUMBER                             DO I 4 U.R ." : " I PT-RESOURCE .RES LOOP                       5 SPACES HEAP-FREE @ U. HEAP-AVAIL U. ;                      : FH ( n -- ) DUP PT-HALLOC @RES-SIZE 0                            DO DDUP I C!L LOOP DDROP ;                                   : CH ( n -- ) DUP PT-HALLOC @RES-SIZE 0                            DO DDUP I C@L = NOT IF I . ." -- " ABORT THEN                   LOOP DDROP ;                                                 : SC ( v n -- ) PT-RESOURCE !RES-FLAG ;                         : Z ( v n -- ) DUP FH SC ;                                      : SS 1 DO I 100 * HALLOC FH LOOP ;                                                                                              ( test word                                      <10/31/89>251)                                                                 20 HAN-NUMBER !                                                 TI \ build condition to test                                    101 HALLOC . 102 HALLOC . 103 HALLOC .                          104 HALLOC . 105 HALLOC . 106 HALLOC .                          107 HALLOC . 108 HALLOC . 109 HALLOC .                          14 1 Z   15 2 Z   13 3 Z                                        12 4 Z   10 5 Z   11 6 Z                                        15 7 Z    2 8 Z   15 9 Z                                        9 RES-NUMBER !                                                  HEAP-END @ HEAP-AVAIL - 20 + HEAP-END !                                                                                                                                                                                                                                                                                         (                                                <10/31/89>252)                                                                 : CHS                                                              HAN-NUMBER @ 1                                                  DO CR I . I PT-RESOURCE NOT-LOADED?                              IF ." not loaded"                                               ELSE I CH ." okfah  )                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 ( transfer notes                                 <10/24/89>260) EXIT --------------------                                       transfer is a word that is used to move data to/from main       and auxillary memory.                                                                                                           Because of the memory organization any attempts to move         to addresses OUT of the range of $200-$BFFF will result in      moving to the current block (regardless of the request)                                                                         transfer is loaded at the start of the forth kernel and is      copied to aux memory with SETUP-LONG                                                                                            the first two stores are patched to set the proper soft         switches to complete the request. NOTE set RAMWRT vector        first so RAMRD will be set from main mem copy of transfer                                                                       ( transfer                                       <10/24/89>261) EXIT ******** LOADED AT START OF FORTH KERNEL ********          \ call:  (N) start memory address                               \      (N+2) dest memory address                                \      (N+4) number bytes to move + 256 (word)                  \         Y  zero                                               CODE transfer   ( to/from main/aux memory )                       C004 STA,    \ set RAMWRT as desired **** MUST BE FIRST ****    C002 STA,    \ set RAMRD as desired                             BEGIN, N )Y LDA, N 2+ )Y STA, INY, 0= \ move a byte              IF, N 1+ INC, N 3 + INC, THEN,       \ inc high byte            N 4 + DEC, 0= IF, N 5 + DEC, THEN, 0=                          UNTIL,                                                          C002 STA, C004 STA, RTS, C; \ switch to read/write main                                                                                                                                       ( rwtsl                                          <10/27/89>262) EXIT ******** LOADED AT START OF FORTH KERNEL ********          HEX  ######## NEVER USED OR TESTED ############                 ( call: ' transfer 4 + C@ = read switch offs (2=main, 3=aux)                                                                    CODE rwtsl ( adr slot dr sec tr r/w nsects -- seg )                 ' transfer 4 + LDY,  ( get read switch set in transfer )        C000 ,Y STA,                 ( set RAMRD as requested )         INY, INY, C000 ,Y STA,       ( set RAMWRT to match )            BOT 12 + LDA, .A ASL .A ASL, ( slot # *10h )                    .A ASL, .A ASL, B7E9 STA,    ( patch dos word )                 B65E JSR,                    ( do it )                          C002 STA, C004 STA,          ( read/write main )                RTS, C;                                                                                                                                                                            ( fah  ) ( long operator constants                        <12/21/85>262)                                                                 HEX                                                                   0 CONSTANT GET:CS    \ equivelant segment for code           8000 CONSTANT AUX:SEG   \ seg to access start of aux mem                                                                     ' SP0 10 + 2/ AUX:SEG +    \ compute first valid segment #         CONSTANT AUX-START      \ start of free mem in main aux mem                                                                  5600 AUX:SEG + ( last valid seg with RWTS in long )                CONSTANT AUX-END        \ end of aux (changed by SETUP-LONG)                                                                    0 CONSTANT AUX-RWTS?    \ T=copy RWTS to aux mem                                                                             DECIMAL                                                                                                                         ( "SEGMENT" notes                                <10/27/89>265) EXIT --------------------------------------------------------                                                                   In order to be functionaly compatable with the IBM memory       organization (with adr is an offset from the start of a segment)these high memory words compute real addresses as follows:                                                                        SEG * 2 + ADR = adr                                             if hibit of seg is set data is in aux memory                    if hibit of seg is clear data is in main memory                                                                               In this organization GET:CS will always be zero                                                                                 Should we later use more //gs memory we can change the          mapping without any problems                                                                                                    ( from_mem                                       <10/27/89>265)                                                                 LABEL from_mem \ set to transfer from seg ofs on top of stack     SEC LDA, .A ASL, N STA,        \ multiply segment * 2           SEC 1+ LDA, .A ROL, N 1+ STA,  \ hi bit of seg in carry         # 1 LDA, .A ROL,               \ A=2 if no carry, 3 if carry    ' transfer 4 + STA,            \ patch RAMRD in transfer        CLC, BOT LDA, N ADC, N STA,    \ add offset to base address     BOT 1+ LDA, N 1+ ADC, N 1+ STA,                                 RTS, C;                                                                                                                                                                                                                                                                                                                                                                                                                                              ( fah  ) ( to_mem                                         <10/27/89>266)                                                                 LABEL to_mem \ set to transfer to seg ofs on top of stack         SEC LDA, .A ASL, N 2+ STA,     \ multiply segment * 2           SEC 1+ LDA, .A ROL, N 3 + STA, \ hi bit of seg in carry         # 2 LDA, .A ROL,               \ A=4 if no carry, 5 if carry    ' transfer 1+ STA,             \ patch RAMWRT in transfer       CLC, BOT LDA, N 2+ ADC, N 2+ STA, \ add offset to base address  BOT 1+ LDA, N 3 + ADC, N 3 + STA,                               RTS, C;                                                                                                                                                                                                                                                                                                                                                                                                                                              ( fah  ) ( from_stack to_stack                            <10/27/89>267)                                                                 LABEL from_stack \ set to transfer from CURRENT top of stack      # 2 LDA, ' transfer 4 + STA,   \ RAMRD=off (main mem)           N STX, N 1+ STY,               \ source adr = 0X                RTS, C;                                                                                                                       LABEL to_stack \ set to transfer to CURRENT top of stack          # 4 LDA, ' transfer 1 + STA,   \ RAMWRT=off (main mem)          N 2+ STX, N 3 + STY,           \ dest adr = 0X                  RTS, C;                                                                                                                                                                                                                                                                                                                                                                              ( fah  ) ( CMOVEL                                         <10/27/89>268)                                                                 CODE CMOVEL ( seg adr seg adr count -- )                           \ ***** WARNING WILL ALWAYS MOVE FROM BOTTOM TO TOP *******     BOT LDA, N 4 + STA,                \ store count LSB            BOT 1+ LDA, N 5 + STA, N 5 + INC,  \ count MSB + 1              INX, INX,              \ throw away count                       to_mem JSR,          \ setup dest address                       INX, INX, INX, INX,    \ throw away dest address                from_mem JSR,        \ setup source address                     INX, INX, INX, INX,    \ throw away source address              ' transfer JSR,                                                 NEXT JMP, C;                                                                                                                                                                                                                                        ( fah  ) ( SETUP-LONG                                     <10/27/89>269) HEX                                                                                                                             : SETUP-LONG \ -- setup AUX memory                                 \ if AUX-RWTS? is true copy RWTS to aux mem too                 GET:CS ' transfer         \ copy prims to aux memory            AUX:SEG ' transfer                                              ' SP0 ' transfer - CMOVEL                                       AUX-RWTS? \ copy RWTS to aux mem?                               IF D600 TO AUX-END     \ set to stop at B600 in aux seg          GET:CS B600           \ copy RWTS itself to aux mem             AUX:SEG B600 A00 CMOVEL                                        ELSE E000 TO AUX-END   \ set to stop at C000 in aux seg         THEN ;                                                                                                                       DECIMAL                                                         ( C@L                                            <12/21/85>264)                                                                 CODE C@L ( seg adr -- val )                                        from_mem JSR,                                                   INX, INX, BOT 1+ STY,  ( clear top word )                       to_stack JSR,                                                   # 1 LDA, N 4 + STA,  \ set count low byte                       N 5 + STA,           \ high byte + 1                            ' transfer JSR,                                                 NEXT JMP, C;                                                                                                                                                                                                                                                                                                                                                                                                                                                 ( C!L                                            <10/27/89>271)                                                                 CODE C!L ( val seg adr --  )                                       to_mem JSR,                                                     INX, INX, INX, INX,                                             from_stack JSR,                                                 # 1 LDA, N 4 + STA,  \ set count low byte                       N 5 + STA,           \ high byte + 1                            ' transfer JSR,                                                 POP JMP, C;                                                                                                                                                                                                                                                                                                                                                                                                                                         ( fah  ) ( @L                                             <10/27/89>272)                                                                 CODE @L ( seg adr -- val )                                         from_mem JSR,                                                   INX, INX,                                                       to_stack JSR,                                                   # 2 LDA, N 4 + STA,  \ set count low byte                       # 1 LDA,  N 5 + STA, \ high byte + 1                            ' transfer JSR,                                                 NEXT JMP, C;                                                                                                                                                                                                                                                                                                                                                                                                                                        ( fah  ) ( !L                                             <10/27/89>273)                                                                 CODE !L ( val seg adr -- )                                         to_mem JSR,                                                     INX, INX, INX, INX,                                             from_stack JSR,                                                 # 2 LDA, N 4 + STA,  \ set count low byte                       # 1 LDA, N 5 + STA,  \ high byte + 1                            ' transfer JSR,                                                 POP JMP, C;                                                                                                                                                                                                                                                                                                                                                                                                                                         ( fah  ) ( T@L                                            <10/27/89>274)                                                                 \ stores as: high byte C, low word ,                            CODE T@L ( seg adr -- double )                                     from_mem JSR,                                                   INX,                                                            to_stack JSR,                                                   # 3 LDA, N 4 + STA,  \ set count low byte                       # 1 LDA,  N 5 + STA, \ high byte + 1                            ' transfer JSR,                                                 DEX,                                                            BOT 1+ LDA, BOT STA, \ move hi byte to lo byte of top word      # 0 LDA, BOT 1+ STA, \ zero hi byte of top word                 NEXT JMP, C;                                                                                                                                                                        ( fah  ) ( T!L                                            <10/27/89>275)                                                                 \ stores as: high byte C, low word ,                            CODE T!L ( double seg adr -- )                                     to_mem JSR,                                                     INX, INX, INX, INX,                                             BOT LDA, BOT 1+ STA, INX, \ move low byte up 1                  from_stack JSR,                                                 # 3 LDA, N 4 + STA,  \ set count low byte                       # 1 LDA, N 5 + STA,  \ high byte + 1                            ' transfer JSR,                                                 INX, POP JMP, C;                                                                                                                                                                                                                                                                                                    ( fah  ) ( D@L                                            <10/27/89>276)                                                                 \ stores as: high word , low word ,                             CODE D@L ( seg adr -- double )                                     from_mem JSR,                                                   to_stack JSR,                                                   # 4 LDA, N 4 + STA,  \ set count low byte                       # 1 LDA,  N 5 + STA, \ high byte + 1                            ' transfer JSR,                                                 NEXT JMP, C;                                                                                                                                                                                                                                                                                                                                                                                                                                        ( fah  ) ( D!L                                            <10/27/89>277)                                                                 \ stores as: high word , low word ,                             CODE D!L ( double seg adr -- )                                     to_mem JSR,                                                     INX, INX, INX, INX,                                             from_stack JSR,                                                 # 4 LDA, N 4 + STA,  \ set count low byte                       # 1 LDA, N 5 + STA,  \ high byte + 1                            ' transfer JSR,                                                 POPTWO JMP, C;                                                                                                                                                                                                                                                                                                                                                                      ( fah  ) ( <RWTSL>                                        <10/27/89>278) EXIT \  ######## NEVER USED OR TESTED ############                                                                              CODE <RWTSL> ( seg adr slot dr sec tr r/w nsects -- err )          XSAVE STX, TXA,                                                 CLC, # 12 ADC, TAX,     \ set BOT to point to adr               from-mem JSR,           \ rwtsl gets args from source adr       N LDA, BOT STA,         \ replace "fake" address with real      N 1+ LDA, BOT 1+ STA,   \ adr calculated by from-mem            XSAVE LDX,              \ restore orig stack ptr                ' rwtsl JSR,            \ perform the request                   BOT LDA, SEC STA,       \ put return value over segment         BOT 1+ LDA, SEC 1+ STA,                                         POP JMP,                \ through extra                                                                                                                                                      (                                                <10/27/89>279) EXIT                                                            : TIMEIT                                                          1000 10 TONE                                                    0. 0 D! \ clear counter                                         10 0 DO 30000 0 DO NOOP NOOP LOOP LOOP                          0 D@ D. 1000 10 TONE ;                                                                                                                                                                        \ orig = 45 sec                                                 \ new = 65 sec  150051 count                                                                                                                                                                                                                                                                                                                                                                    